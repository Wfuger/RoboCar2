
RoboCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007014  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800722c  0800722c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007234  08007234  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800723c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  2000000c  08007248  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08007248  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cd9  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d7d  00000000  00000000  00034d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  00037a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  00038e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003cb5  00000000  00000000  0003a048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000111ee  00000000  00000000  0003dcfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104a82  00000000  00000000  0004eeeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015396d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000520c  00000000  00000000  001539e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080071f4 	.word	0x080071f4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080071f4 	.word	0x080071f4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <set_pixformat>:
#include "ov7725.h"
#include "ov7725_reg.h"


uint8_t set_pixformat()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
    uint8_t reg;
    uint8_t ret = rdSensorReg8_8(COM7, &reg);
 800053e:	1dbb      	adds	r3, r7, #6
 8000540:	4619      	mov	r1, r3
 8000542:	2012      	movs	r0, #18
 8000544:	f000 fa21 	bl	800098a <rdSensorReg8_8>
 8000548:	4603      	mov	r3, r0
 800054a:	71fb      	strb	r3, [r7, #7]

	reg = COM7_SET_FMT(reg, COM7_FMT_YUV);
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	f023 0303 	bic.w	r3, r3, #3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	71bb      	strb	r3, [r7, #6]
	ret |= wrSensorReg8_8(DSP_CTRL4, DSP_CTRL4_YUV_RGB);
 8000556:	2100      	movs	r1, #0
 8000558:	2067      	movs	r0, #103	; 0x67
 800055a:	f000 f9dd 	bl	8000918 <wrSensorReg8_8>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4313      	orrs	r3, r2
 8000566:	71fb      	strb	r3, [r7, #7]

    // Write back register
    return wrSensorReg8_8(COM7, reg) | ret;
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	4619      	mov	r1, r3
 800056c:	2012      	movs	r0, #18
 800056e:	f000 f9d3 	bl	8000918 <wrSensorReg8_8>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4313      	orrs	r3, r2
 800057a:	b2db      	uxtb	r3, r3
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <set_framesize>:

uint8_t set_framesize()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
    uint8_t reg;
    uint8_t ret=0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
    uint16_t w = 320;
 800058e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000592:	80bb      	strh	r3, [r7, #4]
    uint16_t h = 240;
 8000594:	23f0      	movs	r3, #240	; 0xf0
 8000596:	807b      	strh	r3, [r7, #2]
    bool vflip;

    // Write MSBs
    ret |= wrSensorReg8_8(HOUTSIZE, w>>2);
 8000598:	88bb      	ldrh	r3, [r7, #4]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	b29b      	uxth	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	2029      	movs	r0, #41	; 0x29
 80005a2:	f000 f9b9 	bl	8000918 <wrSensorReg8_8>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	71fb      	strb	r3, [r7, #7]
    ret |= wrSensorReg8_8(VOUTSIZE, h>>1);
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	085b      	lsrs	r3, r3, #1
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	202c      	movs	r0, #44	; 0x2c
 80005ba:	f000 f9ad 	bl	8000918 <wrSensorReg8_8>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	71fb      	strb	r3, [r7, #7]

    // Write LSBs
    ret |= wrSensorReg8_8(EXHCH, ((w&0x3) | ((h&0x1) << 2)));
 80005c8:	88bb      	ldrh	r3, [r7, #4]
 80005ca:	f003 0203 	and.w	r2, r3, #3
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	4313      	orrs	r3, r2
 80005d8:	4619      	mov	r1, r3
 80005da:	202a      	movs	r0, #42	; 0x2a
 80005dc:	f000 f99c 	bl	8000918 <wrSensorReg8_8>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	71fb      	strb	r3, [r7, #7]

    // Sample VFLIP
    ret |= rdSensorReg8_8(COM3, &reg);
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	200c      	movs	r0, #12
 80005f0:	f000 f9cb 	bl	800098a <rdSensorReg8_8>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	71fb      	strb	r3, [r7, #7]
    vflip = reg & COM3_VFLIP;
 80005fe:	783b      	ldrb	r3, [r7, #0]
 8000600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	707b      	strb	r3, [r7, #1]
    ret |= rdSensorReg8_8(HREF, &reg);
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	2032      	movs	r0, #50	; 0x32
 8000614:	f000 f9b9 	bl	800098a <rdSensorReg8_8>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4313      	orrs	r3, r2
 8000620:	71fb      	strb	r3, [r7, #7]
    ret |= wrSensorReg8_8(HREF, (reg & 0xBF) | (vflip ? 0x40 : 0x00));
 8000622:	783b      	ldrb	r3, [r7, #0]
 8000624:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 8000628:	787a      	ldrb	r2, [r7, #1]
 800062a:	2a00      	cmp	r2, #0
 800062c:	d001      	beq.n	8000632 <set_framesize+0xae>
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	e000      	b.n	8000634 <set_framesize+0xb0>
 8000632:	2200      	movs	r2, #0
 8000634:	4313      	orrs	r3, r2
 8000636:	4619      	mov	r1, r3
 8000638:	2032      	movs	r0, #50	; 0x32
 800063a:	f000 f96d 	bl	8000918 <wrSensorReg8_8>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4313      	orrs	r3, r2
 8000646:	71fb      	strb	r3, [r7, #7]

	// Set QVGA Resolution
	ret = rdSensorReg8_8(COM7, &reg);
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	2012      	movs	r0, #18
 800064e:	f000 f99c 	bl	800098a <rdSensorReg8_8>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	reg = COM7_SET_RES(reg, COM7_RES_QVGA);
 8000656:	783b      	ldrb	r3, [r7, #0]
 8000658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065c:	b2db      	uxtb	r3, r3
 800065e:	703b      	strb	r3, [r7, #0]
	ret |= wrSensorReg8_8(COM7, reg);
 8000660:	783b      	ldrb	r3, [r7, #0]
 8000662:	4619      	mov	r1, r3
 8000664:	2012      	movs	r0, #18
 8000666:	f000 f957 	bl	8000918 <wrSensorReg8_8>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4313      	orrs	r3, r2
 8000672:	71fb      	strb	r3, [r7, #7]

	// Set QVGA Window Size
	ret |= wrSensorReg8_8(HSTART, 0x3F);
 8000674:	213f      	movs	r1, #63	; 0x3f
 8000676:	2017      	movs	r0, #23
 8000678:	f000 f94e 	bl	8000918 <wrSensorReg8_8>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4313      	orrs	r3, r2
 8000684:	71fb      	strb	r3, [r7, #7]
	ret |= wrSensorReg8_8(HSIZE,  0x50);
 8000686:	2150      	movs	r1, #80	; 0x50
 8000688:	2018      	movs	r0, #24
 800068a:	f000 f945 	bl	8000918 <wrSensorReg8_8>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4313      	orrs	r3, r2
 8000696:	71fb      	strb	r3, [r7, #7]
	ret |= wrSensorReg8_8(VSTART, 0x03 - vflip);
 8000698:	787b      	ldrb	r3, [r7, #1]
 800069a:	f1c3 0303 	rsb	r3, r3, #3
 800069e:	4619      	mov	r1, r3
 80006a0:	2019      	movs	r0, #25
 80006a2:	f000 f939 	bl	8000918 <wrSensorReg8_8>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	71fb      	strb	r3, [r7, #7]
	ret |= wrSensorReg8_8(VSIZE,  0x78);
 80006b0:	2178      	movs	r1, #120	; 0x78
 80006b2:	201a      	movs	r0, #26
 80006b4:	f000 f930 	bl	8000918 <wrSensorReg8_8>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4313      	orrs	r3, r2
 80006c0:	71fb      	strb	r3, [r7, #7]

	// Enable auto-scaling/zooming factors
	ret |= wrSensorReg8_8(DSPAUTO, 0xFF);
 80006c2:	21ff      	movs	r1, #255	; 0xff
 80006c4:	20ac      	movs	r0, #172	; 0xac
 80006c6:	f000 f927 	bl	8000918 <wrSensorReg8_8>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	71fb      	strb	r3, [r7, #7]

    return ret;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <sccb_bus_start>:




 static void sccb_bus_start(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    SCCB_SID_H();
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ea:	4810      	ldr	r0, [pc, #64]	; (800072c <sccb_bus_start+0x4c>)
 80006ec:	f003 fe6a 	bl	80043c4 <HAL_GPIO_WritePin>
    delay_us(I2C_TIM);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f991 	bl	8000a18 <delay_us>
    SCCB_SIC_H();
 80006f6:	2201      	movs	r2, #1
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <sccb_bus_start+0x4c>)
 80006fc:	f003 fe62 	bl	80043c4 <HAL_GPIO_WritePin>
    delay_us(I2C_TIM);
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f989 	bl	8000a18 <delay_us>
    SCCB_SID_L();
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <sccb_bus_start+0x4c>)
 800070e:	f003 fe59 	bl	80043c4 <HAL_GPIO_WritePin>
    delay_us(I2C_TIM);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 f980 	bl	8000a18 <delay_us>
    SCCB_SIC_L();
 8000718:	2200      	movs	r2, #0
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <sccb_bus_start+0x4c>)
 800071e:	f003 fe51 	bl	80043c4 <HAL_GPIO_WritePin>
    delay_us(I2C_TIM);
 8000722:	2001      	movs	r0, #1
 8000724:	f000 f978 	bl	8000a18 <delay_us>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020400 	.word	0x40020400

08000730 <sccb_bus_stop>:


static void sccb_bus_stop(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    SCCB_SID_L();
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <sccb_bus_stop+0x3c>)
 800073c:	f003 fe42 	bl	80043c4 <HAL_GPIO_WritePin>
    delay_us(I2C_TIM);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 f969 	bl	8000a18 <delay_us>
    SCCB_SIC_H();
 8000746:	2201      	movs	r2, #1
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <sccb_bus_stop+0x3c>)
 800074c:	f003 fe3a 	bl	80043c4 <HAL_GPIO_WritePin>
    delay_us(I2C_TIM);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 f961 	bl	8000a18 <delay_us>
    SCCB_SID_H();
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <sccb_bus_stop+0x3c>)
 800075e:	f003 fe31 	bl	80043c4 <HAL_GPIO_WritePin>
    delay_us(I2C_TIM);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 f958 	bl	8000a18 <delay_us>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020400 	.word	0x40020400

08000770 <sccb_bus_send_noack>:


static void sccb_bus_send_noack(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	SCCB_SID_H();
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077a:	4810      	ldr	r0, [pc, #64]	; (80007bc <sccb_bus_send_noack+0x4c>)
 800077c:	f003 fe22 	bl	80043c4 <HAL_GPIO_WritePin>
	delay_us(I2C_TIM);
 8000780:	2001      	movs	r0, #1
 8000782:	f000 f949 	bl	8000a18 <delay_us>
	SCCB_SIC_H();
 8000786:	2201      	movs	r2, #1
 8000788:	2140      	movs	r1, #64	; 0x40
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <sccb_bus_send_noack+0x4c>)
 800078c:	f003 fe1a 	bl	80043c4 <HAL_GPIO_WritePin>
	delay_us(I2C_TIM);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 f941 	bl	8000a18 <delay_us>
	SCCB_SIC_L();
 8000796:	2200      	movs	r2, #0
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	4808      	ldr	r0, [pc, #32]	; (80007bc <sccb_bus_send_noack+0x4c>)
 800079c:	f003 fe12 	bl	80043c4 <HAL_GPIO_WritePin>
	delay_us(I2C_TIM);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 f939 	bl	8000a18 <delay_us>
	SCCB_SID_L();
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <sccb_bus_send_noack+0x4c>)
 80007ae:	f003 fe09 	bl	80043c4 <HAL_GPIO_WritePin>
	delay_us(I2C_TIM);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 f930 	bl	8000a18 <delay_us>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40020400 	.word	0x40020400

080007c0 <sccb_bus_write_byte>:
	SCCB_SID_L();
	delay_us(I2C_TIM);
}

static uint8_t sccb_bus_write_byte(uint8_t data)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	uint8_t tem;

	for(i = 0; i < 8; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	e027      	b.n	8000820 <sccb_bus_write_byte+0x60>
	{
		if((data<<i) & 0x80) SCCB_SID_H();
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d006      	beq.n	80007ee <sccb_bus_write_byte+0x2e>
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e6:	4828      	ldr	r0, [pc, #160]	; (8000888 <sccb_bus_write_byte+0xc8>)
 80007e8:	f003 fdec 	bl	80043c4 <HAL_GPIO_WritePin>
 80007ec:	e005      	b.n	80007fa <sccb_bus_write_byte+0x3a>
		else 				 SCCB_SID_L();
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	4824      	ldr	r0, [pc, #144]	; (8000888 <sccb_bus_write_byte+0xc8>)
 80007f6:	f003 fde5 	bl	80043c4 <HAL_GPIO_WritePin>

		delay_us(I2C_TIM);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 f90c 	bl	8000a18 <delay_us>
		SCCB_SIC_H();
 8000800:	2201      	movs	r2, #1
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	4820      	ldr	r0, [pc, #128]	; (8000888 <sccb_bus_write_byte+0xc8>)
 8000806:	f003 fddd 	bl	80043c4 <HAL_GPIO_WritePin>
		delay_us(I2C_TIM);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 f904 	bl	8000a18 <delay_us>
		SCCB_SIC_L();
 8000810:	2200      	movs	r2, #0
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	481c      	ldr	r0, [pc, #112]	; (8000888 <sccb_bus_write_byte+0xc8>)
 8000816:	f003 fdd5 	bl	80043c4 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; i++)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3301      	adds	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b07      	cmp	r3, #7
 8000824:	d9d4      	bls.n	80007d0 <sccb_bus_write_byte+0x10>

	}
	SCCB_DATA_IN;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <sccb_bus_write_byte+0xc8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <sccb_bus_write_byte+0xc8>)
 800082c:	f463 2340 	orn	r3, r3, #786432	; 0xc0000
 8000830:	6013      	str	r3, [r2, #0]
	delay_us(I2C_TIM);
 8000832:	2001      	movs	r0, #1
 8000834:	f000 f8f0 	bl	8000a18 <delay_us>
	SCCB_SIC_H();
 8000838:	2201      	movs	r2, #1
 800083a:	2140      	movs	r1, #64	; 0x40
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <sccb_bus_write_byte+0xc8>)
 800083e:	f003 fdc1 	bl	80043c4 <HAL_GPIO_WritePin>
	delay_us(I2C_TIM);
 8000842:	2001      	movs	r0, #1
 8000844:	f000 f8e8 	bl	8000a18 <delay_us>

	tem = !SCCB_SID_STATE;
 8000848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084c:	480e      	ldr	r0, [pc, #56]	; (8000888 <sccb_bus_write_byte+0xc8>)
 800084e:	f003 fda1 	bl	8004394 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	72fb      	strb	r3, [r7, #11]

	SCCB_SIC_L();
 8000860:	2200      	movs	r2, #0
 8000862:	2140      	movs	r1, #64	; 0x40
 8000864:	4808      	ldr	r0, [pc, #32]	; (8000888 <sccb_bus_write_byte+0xc8>)
 8000866:	f003 fdad 	bl	80043c4 <HAL_GPIO_WritePin>
	delay_us(I2C_TIM);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 f8d4 	bl	8000a18 <delay_us>
	SCCB_DATA_OUT;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <sccb_bus_write_byte+0xc8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <sccb_bus_write_byte+0xc8>)
 8000876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800087a:	6013      	str	r3, [r2, #0]
	return tem;
 800087c:	7afb      	ldrb	r3, [r7, #11]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40020400 	.word	0x40020400

0800088c <sccb_bus_read_byte>:

static uint8_t sccb_bus_read_byte(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t read = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	70fb      	strb	r3, [r7, #3]

	SCCB_DATA_IN;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <sccb_bus_read_byte+0x88>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <sccb_bus_read_byte+0x88>)
 800089c:	f463 2340 	orn	r3, r3, #786432	; 0xc0000
 80008a0:	6013      	str	r3, [r2, #0]
	delay_us(I2C_TIM);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 f8b8 	bl	8000a18 <delay_us>
	for(i = 8; i > 0; i--)
 80008a8:	2308      	movs	r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	e023      	b.n	80008f6 <sccb_bus_read_byte+0x6a>
	{
		delay_us(I2C_TIM);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 f8b2 	bl	8000a18 <delay_us>
		SCCB_SIC_H();
 80008b4:	2201      	movs	r2, #1
 80008b6:	2140      	movs	r1, #64	; 0x40
 80008b8:	4816      	ldr	r0, [pc, #88]	; (8000914 <sccb_bus_read_byte+0x88>)
 80008ba:	f003 fd83 	bl	80043c4 <HAL_GPIO_WritePin>
		delay_us(I2C_TIM);
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 f8aa 	bl	8000a18 <delay_us>
		read = read << 1;
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	70fb      	strb	r3, [r7, #3]
		if(SCCB_SID_STATE)
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	4811      	ldr	r0, [pc, #68]	; (8000914 <sccb_bus_read_byte+0x88>)
 80008d0:	f003 fd60 	bl	8004394 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <sccb_bus_read_byte+0x54>
		{
			read += 1;
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	3301      	adds	r3, #1
 80008de:	70fb      	strb	r3, [r7, #3]
		}
		SCCB_SIC_L();
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	; 0x40
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <sccb_bus_read_byte+0x88>)
 80008e6:	f003 fd6d 	bl	80043c4 <HAL_GPIO_WritePin>
		delay_us(I2C_TIM);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f894 	bl	8000a18 <delay_us>
	for(i = 8; i > 0; i--)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1d8      	bne.n	80008ae <sccb_bus_read_byte+0x22>
	}
    SCCB_DATA_OUT;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <sccb_bus_read_byte+0x88>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <sccb_bus_read_byte+0x88>)
 8000902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000906:	6013      	str	r3, [r2, #0]
	return read;
 8000908:	78fb      	ldrb	r3, [r7, #3]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020400 	.word	0x40020400

08000918 <wrSensorReg8_8>:

uint8_t wrSensorReg8_8(int regID, int regDat)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	delay_us(5);
 8000922:	2005      	movs	r0, #5
 8000924:	f000 f878 	bl	8000a18 <delay_us>
	sccb_bus_start();
 8000928:	f7ff feda 	bl	80006e0 <sccb_bus_start>
	if(sccb_bus_write_byte(WRITE_ADDR) == 0)
 800092c:	2042      	movs	r0, #66	; 0x42
 800092e:	f7ff ff47 	bl	80007c0 <sccb_bus_write_byte>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <wrSensorReg8_8+0x28>
	{
		sccb_bus_stop();
 8000938:	f7ff fefa 	bl	8000730 <sccb_bus_stop>
		return 1;
 800093c:	2301      	movs	r3, #1
 800093e:	e020      	b.n	8000982 <wrSensorReg8_8+0x6a>
	}
	delay_us(5);
 8000940:	2005      	movs	r0, #5
 8000942:	f000 f869 	bl	8000a18 <delay_us>
	if(sccb_bus_write_byte(regID) == 0)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff38 	bl	80007c0 <sccb_bus_write_byte>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <wrSensorReg8_8+0x46>
	{
		sccb_bus_stop();
 8000956:	f7ff feeb 	bl	8000730 <sccb_bus_stop>
		return 2;
 800095a:	2302      	movs	r3, #2
 800095c:	e011      	b.n	8000982 <wrSensorReg8_8+0x6a>
	}
	delay_us(5);
 800095e:	2005      	movs	r0, #5
 8000960:	f000 f85a 	bl	8000a18 <delay_us>
	if(sccb_bus_write_byte(regDat)==0)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff29 	bl	80007c0 <sccb_bus_write_byte>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d103      	bne.n	800097c <wrSensorReg8_8+0x64>
	{
		sccb_bus_stop();
 8000974:	f7ff fedc 	bl	8000730 <sccb_bus_stop>
		return 3;
 8000978:	2303      	movs	r3, #3
 800097a:	e002      	b.n	8000982 <wrSensorReg8_8+0x6a>
	}
	sccb_bus_stop();
 800097c:	f7ff fed8 	bl	8000730 <sccb_bus_stop>
	return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <rdSensorReg8_8>:

uint8_t rdSensorReg8_8(uint8_t regID, uint8_t* regDat)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	6039      	str	r1, [r7, #0]
 8000994:	71fb      	strb	r3, [r7, #7]
	delay_us(10);
 8000996:	200a      	movs	r0, #10
 8000998:	f000 f83e 	bl	8000a18 <delay_us>

	sccb_bus_start();
 800099c:	f7ff fea0 	bl	80006e0 <sccb_bus_start>
	if(sccb_bus_write_byte(WRITE_ADDR) == 0)
 80009a0:	2042      	movs	r0, #66	; 0x42
 80009a2:	f7ff ff0d 	bl	80007c0 <sccb_bus_write_byte>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <rdSensorReg8_8+0x2a>
	{
		sccb_bus_stop();
 80009ac:	f7ff fec0 	bl	8000730 <sccb_bus_stop>
		//goto start;
		return 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e02c      	b.n	8000a0e <rdSensorReg8_8+0x84>
	}
	delay_us(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f000 f82f 	bl	8000a18 <delay_us>
	if(sccb_bus_write_byte(regID)==0)//ID
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff feff 	bl	80007c0 <sccb_bus_write_byte>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <rdSensorReg8_8+0x46>
	{
		sccb_bus_stop();
 80009c8:	f7ff feb2 	bl	8000730 <sccb_bus_stop>
		//goto start;
		return 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	e01e      	b.n	8000a0e <rdSensorReg8_8+0x84>
	}
	sccb_bus_stop();
 80009d0:	f7ff feae 	bl	8000730 <sccb_bus_stop>
	delay_us(10);
 80009d4:	200a      	movs	r0, #10
 80009d6:	f000 f81f 	bl	8000a18 <delay_us>
	sccb_bus_start();
 80009da:	f7ff fe81 	bl	80006e0 <sccb_bus_start>
	if(sccb_bus_write_byte(WRITE_ADDR|0x01)==0)
 80009de:	2043      	movs	r0, #67	; 0x43
 80009e0:	f7ff feee 	bl	80007c0 <sccb_bus_write_byte>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d103      	bne.n	80009f2 <rdSensorReg8_8+0x68>
	{
		sccb_bus_stop();
 80009ea:	f7ff fea1 	bl	8000730 <sccb_bus_stop>
		//goto start;
		return 3;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e00d      	b.n	8000a0e <rdSensorReg8_8+0x84>
	}
	delay_us(10);
 80009f2:	200a      	movs	r0, #10
 80009f4:	f000 f810 	bl	8000a18 <delay_us>
	*regDat = sccb_bus_read_byte();
 80009f8:	f7ff ff48 	bl	800088c <sccb_bus_read_byte>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
	sccb_bus_send_noack();
 8000a04:	f7ff feb4 	bl	8000770 <sccb_bus_send_noack>
	sccb_bus_stop();
 8000a08:	f7ff fe92 	bl	8000730 <sccb_bus_stop>
	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <delay_us>:
#include "core_cm7.h"

#pragma GCC push_options
#pragma GCC optimize ("O3")
void delay_us(uint32_t us)
{
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4604      	mov	r4, r0
	/* Go to number of cycles for system */
	us *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000a1c:	f004 fb20 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <delay_us+0x24>)
 8000a22:	fba3 3000 	umull	r3, r0, r3, r0
 8000a26:	0c80      	lsrs	r0, r0, #18
 8000a28:	fb04 f000 	mul.w	r0, r4, r0

	  /* Delay till end */
	for (uint32_t i = 0; i<us; ++i) asm("NOP");
 8000a2c:	b120      	cbz	r0, 8000a38 <delay_us+0x20>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	bf00      	nop
 8000a32:	3301      	adds	r3, #1
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d1fb      	bne.n	8000a30 <delay_us+0x18>
}
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	bf00      	nop
 8000a3c:	431bde83 	.word	0x431bde83

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f000 fe2e 	bl	80016a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f831 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fa1d 	bl	8000e8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a52:	f000 f9fd 	bl	8000e50 <MX_DMA_Init>
  MX_ETH_Init();
 8000a56:	f000 f8f7 	bl	8000c48 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a5a:	f000 f99b 	bl	8000d94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a5e:	f000 f9c9 	bl	8000df4 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8000a62:	f000 f8bb 	bl	8000bdc <MX_DCMI_Init>
  MX_TIM2_Init();
 8000a66:	f000 f92f 	bl	8000cc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <main+0x60>)
 8000a6e:	f004 ff7d 	bl	800596c <HAL_TIM_PWM_Start>

  uint8_t ret = set_framesize();
 8000a72:	f7ff fd87 	bl	8000584 <set_framesize>
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  uint8_t bet = set_pixformat();
 8000a7a:	f7ff fd5d 	bl	8000538 <set_pixformat>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71bb      	strb	r3, [r7, #6]

  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, img, IMG_SIZE);
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <main+0x64>)
 8000a84:	23fa      	movs	r3, #250	; 0xfa
 8000a86:	2100      	movs	r1, #0
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <main+0x68>)
 8000a8a:	f001 f817 	bl	8001abc <HAL_DCMI_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <main+0x6c>)
 8000a94:	f003 fcaf 	bl	80043f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f000 fe61 	bl	8001760 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a9e:	e7f6      	b.n	8000a8e <main+0x4e>
 8000aa0:	20000658 	.word	0x20000658
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	20000608 	.word	0x20000608
 8000aac:	40020400 	.word	0x40020400

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0b8      	sub	sp, #224	; 0xe0
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000aba:	2234      	movs	r2, #52	; 0x34
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 fb90 	bl	80071e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2290      	movs	r2, #144	; 0x90
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f006 fb81 	bl	80071e4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000ae2:	f003 fdeb 	bl	80046bc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <SystemClock_Config+0x120>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a39      	ldr	r2, [pc, #228]	; (8000bd0 <SystemClock_Config+0x120>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <SystemClock_Config+0x120>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <SystemClock_Config+0x124>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b06:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <SystemClock_Config+0x124>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <SystemClock_Config+0x124>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b3c:	2360      	movs	r3, #96	; 0x60
 8000b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fe12 	bl	800477c <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b5e:	f000 fa5f 	bl	8001020 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b62:	f003 fdbb 	bl	80046dc <HAL_PWREx_EnableOverDrive>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b6c:	f000 fa58 	bl	8001020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b70:	230f      	movs	r3, #15
 8000b72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2302      	movs	r3, #2
 8000b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b94:	2103      	movs	r1, #3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 f89e 	bl	8004cd8 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000ba2:	f000 fa3d 	bl	8001020 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <SystemClock_Config+0x128>)
 8000ba8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fa85 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000bc4:	f000 fa2c 	bl	8001020 <Error_Handler>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	37e0      	adds	r7, #224	; 0xe0
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40007000 	.word	0x40007000
 8000bd8:	00200100 	.word	0x00200100

08000bdc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <MX_DCMI_Init+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0a:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_DCMI_Init+0x64>)
 8000c2c:	f000 fecc 	bl	80019c8 <HAL_DCMI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 8000c36:	f000 f9f3 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000608 	.word	0x20000608
 8000c44:	50050000 	.word	0x50050000

08000c48 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <MX_ETH_Init+0x7c>)
 8000c50:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	3302      	adds	r3, #2
 8000c76:	22e1      	movs	r2, #225	; 0xe1
 8000c78:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	3303      	adds	r3, #3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	3305      	adds	r3, #5
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000ca6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000caa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_ETH_Init+0x78>)
 8000cae:	f002 fd5b 	bl	8003768 <HAL_ETH_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000cb8:	f000 f9b2 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000698 	.word	0x20000698
 8000cc4:	40028000 	.word	0x40028000

08000cc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  int frequency = 900000;
 8000cce:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <MX_TIM2_Init+0xc4>)
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  int pclk = HAL_RCC_GetPCLK2Freq();
 8000cd2:	f004 f9e5 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  int period = (pclk / frequency) - 1;
 8000cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d2a:	4819      	ldr	r0, [pc, #100]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d2c:	f004 fdf2 	bl	8005914 <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d36:	f000 f973 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4619      	mov	r1, r3
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d4a:	f005 fa8f 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d54:	f000 f964 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2360      	movs	r3, #96	; 0x60
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d70:	f004 fe40 	bl	80059f4 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d7a:	f000 f951 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_TIM2_Init+0xc8>)
 8000d80:	f000 fb44 	bl	800140c <HAL_TIM_MspPostInit>

}
 8000d84:	bf00      	nop
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	000dbba0 	.word	0x000dbba0
 8000d90:	20000658 	.word	0x20000658

08000d94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <MX_USART3_UART_Init+0x5c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART3_UART_Init+0x58>)
 8000dd8:	f005 fad6 	bl	8006388 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000de2:	f000 f91d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000124 	.word	0x20000124
 8000df0:	40004800 	.word	0x40004800

08000df4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dfe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e02:	2206      	movs	r2, #6
 8000e04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e38:	f003 faf7 	bl	800442a <HAL_PCD_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e42:	f000 f8ed 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001a4 	.word	0x200001a4

08000e50 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_DMA_Init+0x38>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <MX_DMA_Init+0x38>)
 8000e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_DMA_Init+0x38>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2039      	movs	r0, #57	; 0x39
 8000e74:	f000 fd71 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e78:	2039      	movs	r0, #57	; 0x39
 8000e7a:	f000 fd8a 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4b5a      	ldr	r3, [pc, #360]	; (800100c <MX_GPIO_Init+0x180>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a59      	ldr	r2, [pc, #356]	; (800100c <MX_GPIO_Init+0x180>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b57      	ldr	r3, [pc, #348]	; (800100c <MX_GPIO_Init+0x180>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <MX_GPIO_Init+0x180>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a53      	ldr	r2, [pc, #332]	; (800100c <MX_GPIO_Init+0x180>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b51      	ldr	r3, [pc, #324]	; (800100c <MX_GPIO_Init+0x180>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <MX_GPIO_Init+0x180>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	; (800100c <MX_GPIO_Init+0x180>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <MX_GPIO_Init+0x180>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b48      	ldr	r3, [pc, #288]	; (800100c <MX_GPIO_Init+0x180>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a47      	ldr	r2, [pc, #284]	; (800100c <MX_GPIO_Init+0x180>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <MX_GPIO_Init+0x180>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <MX_GPIO_Init+0x180>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a41      	ldr	r2, [pc, #260]	; (800100c <MX_GPIO_Init+0x180>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <MX_GPIO_Init+0x180>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	4b3c      	ldr	r3, [pc, #240]	; (800100c <MX_GPIO_Init+0x180>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a3b      	ldr	r2, [pc, #236]	; (800100c <MX_GPIO_Init+0x180>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <MX_GPIO_Init+0x180>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <MX_GPIO_Init+0x180>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a35      	ldr	r2, [pc, #212]	; (800100c <MX_GPIO_Init+0x180>)
 8000f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <MX_GPIO_Init+0x180>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SCCB_SIC_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000f50:	482f      	ldr	r0, [pc, #188]	; (8001010 <MX_GPIO_Init+0x184>)
 8000f52:	f003 fa37 	bl	80043c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2140      	movs	r1, #64	; 0x40
 8000f5a:	482e      	ldr	r0, [pc, #184]	; (8001014 <MX_GPIO_Init+0x188>)
 8000f5c:	f003 fa32 	bl	80043c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_GPIO_Init+0x18c>)
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4829      	ldr	r0, [pc, #164]	; (800101c <MX_GPIO_Init+0x190>)
 8000f76:	f003 f863 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f7a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <MX_GPIO_Init+0x184>)
 8000f94:	f003 f854 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f98:	2340      	movs	r3, #64	; 0x40
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4819      	ldr	r0, [pc, #100]	; (8001014 <MX_GPIO_Init+0x188>)
 8000fb0:	f003 f846 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <MX_GPIO_Init+0x188>)
 8000fc8:	f003 f83a 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCCB_SIC_Pin */
  GPIO_InitStruct.Pin = SCCB_SIC_Pin;
 8000fcc:	2340      	movs	r3, #64	; 0x40
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SCCB_SIC_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <MX_GPIO_Init+0x184>)
 8000fe4:	f003 f82c 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCCB_SID_Pin */
  GPIO_InitStruct.Pin = SCCB_SID_Pin;
 8000fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SCCB_SID_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_GPIO_Init+0x184>)
 8000ffe:	f003 f81f 	bl	8004040 <HAL_GPIO_Init>

}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	; 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400
 8001014:	40021800 	.word	0x40021800
 8001018:	10110000 	.word	0x10110000
 800101c:	40020800 	.word	0x40020800

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x44>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_MspInit+0x44>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x44>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_MspInit+0x44>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x44>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x44>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a69      	ldr	r2, [pc, #420]	; (800123c <HAL_DCMI_MspInit+0x1c4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	f040 80cb 	bne.w	8001232 <HAL_DCMI_MspInit+0x1ba>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800109c:	4b68      	ldr	r3, [pc, #416]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	4a67      	ldr	r2, [pc, #412]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6353      	str	r3, [r2, #52]	; 0x34
 80010a8:	4b65      	ldr	r3, [pc, #404]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b4:	4b62      	ldr	r3, [pc, #392]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a61      	ldr	r2, [pc, #388]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a5b      	ldr	r2, [pc, #364]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	4b56      	ldr	r3, [pc, #344]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a55      	ldr	r2, [pc, #340]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fc:	4b50      	ldr	r3, [pc, #320]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001114:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a49      	ldr	r2, [pc, #292]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 800111a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b47      	ldr	r3, [pc, #284]	; (8001240 <HAL_DCMI_MspInit+0x1c8>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> DCMI_D8
    PC12     ------> DCMI_D9
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800112c:	2370      	movs	r3, #112	; 0x70
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800113c:	230d      	movs	r3, #13
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	483f      	ldr	r0, [pc, #252]	; (8001244 <HAL_DCMI_MspInit+0x1cc>)
 8001148:	f002 ff7a 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800114c:	2350      	movs	r3, #80	; 0x50
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800115c:	230d      	movs	r3, #13
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <HAL_DCMI_MspInit+0x1d0>)
 8001168:	f002 ff6a 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800116c:	f44f 53be 	mov.w	r3, #6080	; 0x17c0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800117e:	230d      	movs	r3, #13
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	4619      	mov	r1, r3
 8001188:	4830      	ldr	r0, [pc, #192]	; (800124c <HAL_DCMI_MspInit+0x1d4>)
 800118a:	f002 ff59 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800118e:	2308      	movs	r3, #8
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800119e:	230d      	movs	r3, #13
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4829      	ldr	r0, [pc, #164]	; (8001250 <HAL_DCMI_MspInit+0x1d8>)
 80011aa:	f002 ff49 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011c0:	230d      	movs	r3, #13
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4822      	ldr	r0, [pc, #136]	; (8001254 <HAL_DCMI_MspInit+0x1dc>)
 80011cc:	f002 ff38 	bl	8004040 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <HAL_DCMI_MspInit+0x1e4>)
 80011d4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 80011d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011dc:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 80011ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f0:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 80011f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f8:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 80011fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001200:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 800120a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800120e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 8001218:	f000 fdba 	bl	8001d90 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_DCMI_MspInit+0x1ae>
    {
      Error_Handler();
 8001222:	f7ff fefd 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 800122a:	649a      	str	r2, [r3, #72]	; 0x48
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_DCMI_MspInit+0x1e0>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3738      	adds	r7, #56	; 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	50050000 	.word	0x50050000
 8001240:	40023800 	.word	0x40023800
 8001244:	40021000 	.word	0x40021000
 8001248:	40020000 	.word	0x40020000
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021800 	.word	0x40021800
 8001258:	200005a8 	.word	0x200005a8
 800125c:	40026428 	.word	0x40026428

08001260 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	; 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_ETH_MspInit+0x158>)
 800127e:	4293      	cmp	r3, r2
 8001280:	f040 8096 	bne.w	80013b0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001284:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 800128a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	623b      	str	r3, [r7, #32]
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4a46      	ldr	r2, [pc, #280]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a6:	6313      	str	r3, [r2, #48]	; 0x30
 80012a8:	4b44      	ldr	r3, [pc, #272]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4b41      	ldr	r3, [pc, #260]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a40      	ldr	r2, [pc, #256]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a3a      	ldr	r2, [pc, #232]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a34      	ldr	r2, [pc, #208]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 800131a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_ETH_MspInit+0x15c>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800132c:	2332      	movs	r3, #50	; 0x32
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133c:	230b      	movs	r3, #11
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <HAL_ETH_MspInit+0x160>)
 8001348:	f002 fe7a 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800134c:	2386      	movs	r3, #134	; 0x86
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135c:	230b      	movs	r3, #11
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	4817      	ldr	r0, [pc, #92]	; (80013c4 <HAL_ETH_MspInit+0x164>)
 8001368:	f002 fe6a 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137e:	230b      	movs	r3, #11
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	480f      	ldr	r0, [pc, #60]	; (80013c8 <HAL_ETH_MspInit+0x168>)
 800138a:	f002 fe59 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800138e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a0:	230b      	movs	r3, #11
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a8:	4619      	mov	r1, r3
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <HAL_ETH_MspInit+0x16c>)
 80013ac:	f002 fe48 	bl	8004040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3738      	adds	r7, #56	; 0x38
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40028000 	.word	0x40028000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40021800 	.word	0x40021800

080013d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_TIM_PWM_MspInit+0x38>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_TIM_PWM_MspInit+0x38>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_TIM_PWM_MspInit+0x38>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d11b      	bne.n	8001466 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001446:	2301      	movs	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <HAL_TIM_MspPostInit+0x68>)
 8001462:	f002 fded 	bl	8004040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000

08001478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_UART_MspInit+0x7c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d128      	bne.n	80014ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_UART_MspInit+0x80>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_UART_MspInit+0x80>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_UART_MspInit+0x80>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_UART_MspInit+0x80>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_UART_MspInit+0x80>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_UART_MspInit+0x80>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014dc:	2307      	movs	r3, #7
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_UART_MspInit+0x84>)
 80014e8:	f002 fdaa 	bl	8004040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40004800 	.word	0x40004800
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020c00 	.word	0x40020c00

08001500 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001520:	d141      	bne.n	80015a6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800153a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800154c:	230a      	movs	r3, #10
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <HAL_PCD_MspInit+0xb4>)
 8001558:	f002 fd72 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800155c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <HAL_PCD_MspInit+0xb4>)
 8001572:	f002 fd65 	bl	8004040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	6353      	str	r3, [r2, #52]	; 0x34
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_PCD_MspInit+0xb0>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f888 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA2_Stream1_IRQHandler+0x10>)
 800161a:	f000 fcc7 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200005a8 	.word	0x200005a8

08001628 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <SystemInit+0x28>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <SystemInit+0x28>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SystemInit+0x28>)
 800163e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001642:	609a      	str	r2, [r3, #8]
#endif
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001658:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800165a:	e003      	b.n	8001664 <LoopCopyDataInit>

0800165c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800165e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001660:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001662:	3104      	adds	r1, #4

08001664 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001668:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800166a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800166c:	d3f6      	bcc.n	800165c <CopyDataInit>
  ldr  r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001670:	e002      	b.n	8001678 <LoopFillZerobss>

08001672 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001672:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001674:	f842 3b04 	str.w	r3, [r2], #4

08001678 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800167a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800167c:	d3f9      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd3 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f005 fd8b 	bl	800719c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff f9db 	bl	8000a40 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001690:	0800723c 	.word	0x0800723c
  ldr  r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001698:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800169c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80016a0:	200006e4 	.word	0x200006e4

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>

080016a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 f94a 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 f805 	bl	80016c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016b6:	f7ff fcbb 	bl	8001030 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f965 	bl	80019ae <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f92d 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	20000008 	.word	0x20000008
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	200006e0 	.word	0x200006e0

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200006e0 	.word	0x200006e0

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_Delay+0x40>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000008 	.word	0x20000008

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <__NVIC_SetPriorityGrouping+0x40>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x40>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00
 80017e8:	05fa0000 	.word	0x05fa0000

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e069      	b.n	8001aae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fb46 	bl	8001078 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_DCMI_Init+0xf0>)
 8001a0e:	400b      	ands	r3, r1
 8001a10:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a26:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a32:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a3e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a4a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a56:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d112      	bne.n	8001a8e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7f1b      	ldrb	r3, [r3, #28]
 8001a6c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7f5b      	ldrb	r3, [r3, #29]
 8001a72:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a74:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7f9b      	ldrb	r3, [r3, #30]
 8001a7a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a7c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7fdb      	ldrb	r3, [r3, #31]
 8001a84:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a8a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a8c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 021e 	orr.w	r2, r2, #30
 8001a9c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	ffe0f007 	.word	0xffe0f007

08001abc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_DCMI_Start_DMA+0x20>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e095      	b.n	8001c08 <HAL_DCMI_Start_DMA+0x14c>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001afa:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0202 	bic.w	r2, r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b20:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <HAL_DCMI_Start_DMA+0x154>)
 8001b22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b28:	4a3a      	ldr	r2, [pc, #232]	; (8001c14 <HAL_DCMI_Start_DMA+0x158>)
 8001b2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	2200      	movs	r2, #0
 8001b32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d20e      	bcs.n	8001b72 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3328      	adds	r3, #40	; 0x28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	f000 f9c2 	bl	8001eec <HAL_DMA_Start_IT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03f      	beq.n	8001bee <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e04a      	b.n	8001c08 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <HAL_DCMI_Start_DMA+0x154>)
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001b8c:	e009      	b.n	8001ba2 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	085a      	lsrs	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9c:	005a      	lsls	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001baa:	d2f0      	bcs.n	8001b8e <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	1e9a      	subs	r2, r3, #2
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3328      	adds	r3, #40	; 0x28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	f000 fc4c 	bl	800247c <HAL_DMAEx_MultiBufferStart_IT>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00c      	b.n	8001c08 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	08001c2d 	.word	0x08001c2d
 8001c14:	08001d57 	.word	0x08001d57

08001c18 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d043      	beq.n	8001cce <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c52:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d118      	bne.n	8001c92 <DCMI_DMAXferCplt+0x66>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d015      	beq.n	8001c92 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	00da      	lsls	r2, r3, #3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4619      	mov	r1, r3
 8001c82:	f001 fd31 	bl	80036e8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	639a      	str	r2, [r3, #56]	; 0x38
 8001c90:	e044      	b.n	8001d1c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d13c      	bne.n	8001d1c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	00da      	lsls	r2, r3, #3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4413      	add	r3, r2
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f001 fd13 	bl	80036e8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	1e5a      	subs	r2, r3, #1
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
 8001ccc:	e026      	b.n	8001d1c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	e017      	b.n	8001d1c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10f      	bne.n	8001d1c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	0099      	lsls	r1, r3, #2
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	440a      	add	r2, r1
 8001d12:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d112      	bne.n	8001d4e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d103      	bne.n	8001d4e <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d009      	beq.n	8001d82 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff ff48 	bl	8001c18 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff fcd4 	bl	8001748 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e099      	b.n	8001ee0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dcc:	e00f      	b.n	8001dee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dce:	f7ff fcbb 	bl	8001748 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d908      	bls.n	8001dee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e078      	b.n	8001ee0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e8      	bne.n	8001dce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_DMA_Init+0x158>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4313      	orrs	r3, r2
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f023 0307 	bic.w	r3, r3, #7
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d117      	bne.n	8001eb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fa77 	bl	8002388 <DMA_CheckFifoParam>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e016      	b.n	8001ee0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fa2e 	bl	800231c <DMA_CalcBaseAndBitshift>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	223f      	movs	r2, #63	; 0x3f
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	e010803f 	.word	0xe010803f

08001eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Start_IT+0x26>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e048      	b.n	8001fa4 <HAL_DMA_Start_IT+0xb8>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d137      	bne.n	8001f96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f9c0 	bl	80022c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0216 	orr.w	r2, r2, #22
 8001f5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e005      	b.n	8001fa2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001fb8:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_DMA_IRQHandler+0x258>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a92      	ldr	r2, [pc, #584]	; (8002208 <HAL_DMA_IRQHandler+0x25c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808e 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8086 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07d      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e078      	b.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01c      	beq.n	800220c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d030      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02b      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d027      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
 8002202:	e022      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
 8002204:	20000000 	.word	0x20000000
 8002208:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0210 	bic.w	r2, r2, #16
 8002228:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	2b00      	cmp	r3, #0
 8002250:	d032      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2205      	movs	r2, #5
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d307      	bcc.n	8002292 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f2      	bne.n	8002276 <HAL_DMA_IRQHandler+0x2ca>
 8002290:	e000      	b.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002292:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022b6:	bf00      	nop
    }
  }
}
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop

080022c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b10      	subs	r3, #16
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <DMA_CalcBaseAndBitshift+0x60>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <DMA_CalcBaseAndBitshift+0x64>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d908      	bls.n	800235c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <DMA_CalcBaseAndBitshift+0x68>)
 8002352:	4013      	ands	r3, r2
 8002354:	1d1a      	adds	r2, r3, #4
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	; 0x58
 800235a:	e006      	b.n	800236a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <DMA_CalcBaseAndBitshift+0x68>)
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	aaaaaaab 	.word	0xaaaaaaab
 8002380:	08007224 	.word	0x08007224
 8002384:	fffffc00 	.word	0xfffffc00

08002388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d855      	bhi.n	8002454 <DMA_CheckFifoParam+0xcc>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <DMA_CheckFifoParam+0x28>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d3 	.word	0x080023d3
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	08002455 	.word	0x08002455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d045      	beq.n	8002458 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e042      	b.n	8002458 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023da:	d13f      	bne.n	800245c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e03c      	b.n	800245c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ea:	d121      	bne.n	8002430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d836      	bhi.n	8002460 <DMA_CheckFifoParam+0xd8>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <DMA_CheckFifoParam+0x70>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800240f 	.word	0x0800240f
 8002400:	08002409 	.word	0x08002409
 8002404:	08002421 	.word	0x08002421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e02f      	b.n	800246e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d024      	beq.n	8002464 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241e:	e021      	b.n	8002464 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002428:	d11e      	bne.n	8002468 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800242e:	e01b      	b.n	8002468 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d902      	bls.n	800243c <DMA_CheckFifoParam+0xb4>
 8002436:	2b03      	cmp	r3, #3
 8002438:	d003      	beq.n	8002442 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800243a:	e018      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e015      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00e      	beq.n	800246c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      break;
 8002452:	e00b      	b.n	800246c <DMA_CheckFifoParam+0xe4>
      break;
 8002454:	bf00      	nop
 8002456:	e00a      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002458:	bf00      	nop
 800245a:	e008      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 800245c:	bf00      	nop
 800245e:	e006      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002460:	bf00      	nop
 8002462:	e004      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002464:	bf00      	nop
 8002466:	e002      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;   
 8002468:	bf00      	nop
 800246a:	e000      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 800246c:	bf00      	nop
    }
  } 
  
  return status; 
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d106      	bne.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f001 b901 	b.w	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d102      	bne.n	80024b4 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 80024ae:	2302      	movs	r3, #2
 80024b0:	f001 b8f9 	b.w	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f041 80e7 	bne.w	8003698 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024e6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f001 f910 	bl	800371c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b99      	ldr	r3, [pc, #612]	; (8002768 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002504:	429a      	cmp	r2, r3
 8002506:	d960      	bls.n	80025ca <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a97      	ldr	r2, [pc, #604]	; (800276c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d057      	beq.n	80025c2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a96      	ldr	r2, [pc, #600]	; (8002770 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d050      	beq.n	80025be <HAL_DMAEx_MultiBufferStart_IT+0x142>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a94      	ldr	r2, [pc, #592]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d049      	beq.n	80025ba <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a93      	ldr	r2, [pc, #588]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d042      	beq.n	80025b6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a91      	ldr	r2, [pc, #580]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03a      	beq.n	80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a90      	ldr	r2, [pc, #576]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d032      	beq.n	80025aa <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a8e      	ldr	r2, [pc, #568]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02a      	beq.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a8d      	ldr	r2, [pc, #564]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d022      	beq.n	800259e <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a8b      	ldr	r2, [pc, #556]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01a      	beq.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a8a      	ldr	r2, [pc, #552]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d012      	beq.n	8002592 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a88      	ldr	r2, [pc, #544]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00a      	beq.n	800258c <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8002580:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002584:	e01e      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002586:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800258a:	e01b      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800258c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002590:	e018      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002592:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002596:	e015      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800259c:	e012      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800259e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a2:	e00f      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80025a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a8:	e00c      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80025aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ae:	e009      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80025b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b4:	e006      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80025b6:	2320      	movs	r3, #32
 80025b8:	e004      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80025ba:	2320      	movs	r3, #32
 80025bc:	e002      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80025be:	2320      	movs	r3, #32
 80025c0:	e000      	b.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80025c2:	2320      	movs	r3, #32
 80025c4:	4a75      	ldr	r2, [pc, #468]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80025c6:	60d3      	str	r3, [r2, #12]
 80025c8:	e150      	b.n	800286c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b73      	ldr	r3, [pc, #460]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d960      	bls.n	8002698 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a64      	ldr	r2, [pc, #400]	; (800276c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d057      	beq.n	8002690 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a62      	ldr	r2, [pc, #392]	; (8002770 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d050      	beq.n	800268c <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a61      	ldr	r2, [pc, #388]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d049      	beq.n	8002688 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a5f      	ldr	r2, [pc, #380]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d042      	beq.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a5e      	ldr	r2, [pc, #376]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d03a      	beq.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5c      	ldr	r2, [pc, #368]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d032      	beq.n	8002678 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a5b      	ldr	r2, [pc, #364]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d02a      	beq.n	8002672 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a59      	ldr	r2, [pc, #356]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d022      	beq.n	800266c <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d01a      	beq.n	8002666 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a56      	ldr	r2, [pc, #344]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d012      	beq.n	8002660 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a55      	ldr	r2, [pc, #340]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00a      	beq.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a53      	ldr	r2, [pc, #332]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d102      	bne.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800264e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002652:	e01e      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002658:	e01b      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800265a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800265e:	e018      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002664:	e015      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002666:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800266a:	e012      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800266c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002670:	e00f      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002676:	e00c      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002678:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800267c:	e009      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800267e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002682:	e006      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002684:	2320      	movs	r3, #32
 8002686:	e004      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002688:	2320      	movs	r3, #32
 800268a:	e002      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800268c:	2320      	movs	r3, #32
 800268e:	e000      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002690:	2320      	movs	r3, #32
 8002692:	4a42      	ldr	r2, [pc, #264]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002694:	6093      	str	r3, [r2, #8]
 8002696:	e0e9      	b.n	800286c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f240 8083 	bls.w	80027ac <HAL_DMAEx_MultiBufferStart_IT+0x330>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a30      	ldr	r2, [pc, #192]	; (800276c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d057      	beq.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d050      	beq.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2d      	ldr	r2, [pc, #180]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d049      	beq.n	8002758 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2b      	ldr	r2, [pc, #172]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d042      	beq.n	8002754 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2a      	ldr	r2, [pc, #168]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03a      	beq.n	800274e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d032      	beq.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a27      	ldr	r2, [pc, #156]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d02a      	beq.n	8002742 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a25      	ldr	r2, [pc, #148]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d022      	beq.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a24      	ldr	r2, [pc, #144]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d01a      	beq.n	8002736 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a22      	ldr	r2, [pc, #136]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d012      	beq.n	8002730 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a21      	ldr	r2, [pc, #132]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00a      	beq.n	800272a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d102      	bne.n	8002724 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 800271e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002722:	e01e      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002724:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002728:	e01b      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800272a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800272e:	e018      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002734:	e015      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002736:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800273a:	e012      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800273c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002740:	e00f      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002746:	e00c      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274c:	e009      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800274e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002752:	e006      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002758:	2320      	movs	r3, #32
 800275a:	e002      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800275c:	2320      	movs	r3, #32
 800275e:	e000      	b.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002760:	2320      	movs	r3, #32
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002764:	60d3      	str	r3, [r2, #12]
 8002766:	e081      	b.n	800286c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002768:	40026458 	.word	0x40026458
 800276c:	40026010 	.word	0x40026010
 8002770:	40026410 	.word	0x40026410
 8002774:	40026070 	.word	0x40026070
 8002778:	40026470 	.word	0x40026470
 800277c:	40026028 	.word	0x40026028
 8002780:	40026428 	.word	0x40026428
 8002784:	40026088 	.word	0x40026088
 8002788:	40026488 	.word	0x40026488
 800278c:	40026040 	.word	0x40026040
 8002790:	40026440 	.word	0x40026440
 8002794:	400260a0 	.word	0x400260a0
 8002798:	400264a0 	.word	0x400264a0
 800279c:	40026400 	.word	0x40026400
 80027a0:	400260b8 	.word	0x400260b8
 80027a4:	40026058 	.word	0x40026058
 80027a8:	40026000 	.word	0x40026000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a96      	ldr	r2, [pc, #600]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d057      	beq.n	8002866 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a95      	ldr	r2, [pc, #596]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d050      	beq.n	8002862 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a93      	ldr	r2, [pc, #588]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d049      	beq.n	800285e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a92      	ldr	r2, [pc, #584]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d042      	beq.n	800285a <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a90      	ldr	r2, [pc, #576]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d03a      	beq.n	8002854 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a8f      	ldr	r2, [pc, #572]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d032      	beq.n	800284e <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a8d      	ldr	r2, [pc, #564]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d02a      	beq.n	8002848 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a8c      	ldr	r2, [pc, #560]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a8a      	ldr	r2, [pc, #552]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01a      	beq.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a89      	ldr	r2, [pc, #548]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d012      	beq.n	8002836 <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a87      	ldr	r2, [pc, #540]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00a      	beq.n	8002830 <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a86      	ldr	r2, [pc, #536]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 8002824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002828:	e01e      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800282a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800282e:	e01b      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002830:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002834:	e018      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002836:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800283a:	e015      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800283c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002840:	e012      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002846:	e00f      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002848:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800284c:	e00c      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800284e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002852:	e009      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002858:	e006      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800285a:	2320      	movs	r3, #32
 800285c:	e004      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800285e:	2320      	movs	r3, #32
 8002860:	e002      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002862:	2320      	movs	r3, #32
 8002864:	e000      	b.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002866:	2320      	movs	r3, #32
 8002868:	4a74      	ldr	r2, [pc, #464]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800286a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	4b73      	ldr	r3, [pc, #460]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002874:	429a      	cmp	r2, r3
 8002876:	d960      	bls.n	800293a <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d057      	beq.n	8002932 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a62      	ldr	r2, [pc, #392]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d050      	beq.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a60      	ldr	r2, [pc, #384]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d049      	beq.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d042      	beq.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a5d      	ldr	r2, [pc, #372]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d03a      	beq.n	8002920 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a5c      	ldr	r2, [pc, #368]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d032      	beq.n	800291a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02a      	beq.n	8002914 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a59      	ldr	r2, [pc, #356]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d022      	beq.n	800290e <HAL_DMAEx_MultiBufferStart_IT+0x492>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a57      	ldr	r2, [pc, #348]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d01a      	beq.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a56      	ldr	r2, [pc, #344]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d012      	beq.n	8002902 <HAL_DMAEx_MultiBufferStart_IT+0x486>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00a      	beq.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x480>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a53      	ldr	r2, [pc, #332]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d102      	bne.n	80028f6 <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 80028f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028f4:	e01e      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80028f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028fa:	e01b      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80028fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002900:	e018      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8002902:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002906:	e015      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8002908:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800290c:	e012      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800290e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002912:	e00f      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8002914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002918:	e00c      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800291a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291e:	e009      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8002920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002924:	e006      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8002926:	2310      	movs	r3, #16
 8002928:	e004      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800292a:	2310      	movs	r3, #16
 800292c:	e002      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800292e:	2310      	movs	r3, #16
 8002930:	e000      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8002932:	2310      	movs	r3, #16
 8002934:	4a43      	ldr	r2, [pc, #268]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002936:	60d3      	str	r3, [r2, #12]
 8002938:	e14f      	b.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002942:	429a      	cmp	r2, r3
 8002944:	f240 8082 	bls.w	8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2f      	ldr	r2, [pc, #188]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d057      	beq.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d050      	beq.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x582>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d049      	beq.n	80029fa <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d042      	beq.n	80029f6 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d03a      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d032      	beq.n	80029ea <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d02a      	beq.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0x562>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01a      	beq.n	80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d012      	beq.n	80029d2 <HAL_DMAEx_MultiBufferStart_IT+0x556>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00a      	beq.n	80029cc <HAL_DMAEx_MultiBufferStart_IT+0x550>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d102      	bne.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 80029c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029c4:	e01e      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029ca:	e01b      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029d0:	e018      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029d6:	e015      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029dc:	e012      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e2:	e00f      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e8:	e00c      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ee:	e009      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f4:	e006      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029f6:	2310      	movs	r3, #16
 80029f8:	e004      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029fa:	2310      	movs	r3, #16
 80029fc:	e002      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80029fe:	2310      	movs	r3, #16
 8002a00:	e000      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8002a02:	2310      	movs	r3, #16
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002a06:	6093      	str	r3, [r2, #8]
 8002a08:	e0e7      	b.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002a0a:	bf00      	nop
 8002a0c:	40026010 	.word	0x40026010
 8002a10:	40026410 	.word	0x40026410
 8002a14:	40026070 	.word	0x40026070
 8002a18:	40026470 	.word	0x40026470
 8002a1c:	40026028 	.word	0x40026028
 8002a20:	40026428 	.word	0x40026428
 8002a24:	40026088 	.word	0x40026088
 8002a28:	40026488 	.word	0x40026488
 8002a2c:	40026040 	.word	0x40026040
 8002a30:	40026440 	.word	0x40026440
 8002a34:	400260a0 	.word	0x400260a0
 8002a38:	400264a0 	.word	0x400264a0
 8002a3c:	40026000 	.word	0x40026000
 8002a40:	40026458 	.word	0x40026458
 8002a44:	40026400 	.word	0x40026400
 8002a48:	400260b8 	.word	0x400260b8
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b96      	ldr	r3, [pc, #600]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d960      	bls.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a94      	ldr	r2, [pc, #592]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d057      	beq.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a93      	ldr	r2, [pc, #588]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d050      	beq.n	8002b0e <HAL_DMAEx_MultiBufferStart_IT+0x692>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a91      	ldr	r2, [pc, #580]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d049      	beq.n	8002b0a <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a90      	ldr	r2, [pc, #576]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d042      	beq.n	8002b06 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d03a      	beq.n	8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a8d      	ldr	r2, [pc, #564]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d032      	beq.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a8b      	ldr	r2, [pc, #556]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02a      	beq.n	8002af4 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a8a      	ldr	r2, [pc, #552]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d022      	beq.n	8002aee <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a88      	ldr	r2, [pc, #544]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01a      	beq.n	8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a87      	ldr	r2, [pc, #540]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d012      	beq.n	8002ae2 <HAL_DMAEx_MultiBufferStart_IT+0x666>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a85      	ldr	r2, [pc, #532]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00a      	beq.n	8002adc <HAL_DMAEx_MultiBufferStart_IT+0x660>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a84      	ldr	r2, [pc, #528]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d102      	bne.n	8002ad6 <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 8002ad0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ad4:	e01e      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002ad6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ada:	e01b      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002adc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ae0:	e018      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002ae2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ae6:	e015      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002ae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aec:	e012      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af2:	e00f      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af8:	e00c      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afe:	e009      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b04:	e006      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002b06:	2310      	movs	r3, #16
 8002b08:	e004      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	e002      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002b0e:	2310      	movs	r3, #16
 8002b10:	e000      	b.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002b12:	2310      	movs	r3, #16
 8002b14:	4a72      	ldr	r2, [pc, #456]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002b16:	60d3      	str	r3, [r2, #12]
 8002b18:	e05f      	b.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a64      	ldr	r2, [pc, #400]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d057      	beq.n	8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a62      	ldr	r2, [pc, #392]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d050      	beq.n	8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x754>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d049      	beq.n	8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d042      	beq.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d03a      	beq.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a5c      	ldr	r2, [pc, #368]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d032      	beq.n	8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a5b      	ldr	r2, [pc, #364]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d02a      	beq.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a59      	ldr	r2, [pc, #356]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a58      	ldr	r2, [pc, #352]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01a      	beq.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00a      	beq.n	8002b9e <HAL_DMAEx_MultiBufferStart_IT+0x722>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a53      	ldr	r2, [pc, #332]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d102      	bne.n	8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 8002b92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b96:	e01e      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002b98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b9c:	e01b      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002b9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ba2:	e018      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002ba4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ba8:	e015      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002baa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bae:	e012      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	e00f      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bba:	e00c      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc0:	e009      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc6:	e006      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bc8:	2310      	movs	r3, #16
 8002bca:	e004      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	e002      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	e000      	b.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002bd8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002be2:	429a      	cmp	r2, r3
 8002be4:	f240 8082 	bls.w	8002cec <HAL_DMAEx_MultiBufferStart_IT+0x870>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d057      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d050      	beq.n	8002c9e <HAL_DMAEx_MultiBufferStart_IT+0x822>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d049      	beq.n	8002c9a <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d042      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03a      	beq.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d032      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02a      	beq.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d022      	beq.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x802>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01a      	beq.n	8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a23      	ldr	r2, [pc, #140]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d012      	beq.n	8002c72 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00a      	beq.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d102      	bne.n	8002c66 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8002c60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c64:	e01e      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6a:	e01b      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c70:	e018      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c76:	e015      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c7c:	e012      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c82:	e00f      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c88:	e00c      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8e:	e009      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c94:	e006      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c96:	2308      	movs	r3, #8
 8002c98:	e004      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	e002      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	e000      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002ca6:	60d3      	str	r3, [r2, #12]
 8002ca8:	e16f      	b.n	8002f8a <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8002caa:	bf00      	nop
 8002cac:	40026058 	.word	0x40026058
 8002cb0:	40026010 	.word	0x40026010
 8002cb4:	40026410 	.word	0x40026410
 8002cb8:	40026070 	.word	0x40026070
 8002cbc:	40026470 	.word	0x40026470
 8002cc0:	40026028 	.word	0x40026028
 8002cc4:	40026428 	.word	0x40026428
 8002cc8:	40026088 	.word	0x40026088
 8002ccc:	40026488 	.word	0x40026488
 8002cd0:	40026040 	.word	0x40026040
 8002cd4:	40026440 	.word	0x40026440
 8002cd8:	400260a0 	.word	0x400260a0
 8002cdc:	400264a0 	.word	0x400264a0
 8002ce0:	40026000 	.word	0x40026000
 8002ce4:	40026458 	.word	0x40026458
 8002ce8:	40026400 	.word	0x40026400
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b94      	ldr	r3, [pc, #592]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d960      	bls.n	8002dba <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a92      	ldr	r2, [pc, #584]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d057      	beq.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a91      	ldr	r2, [pc, #580]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d050      	beq.n	8002dae <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a8f      	ldr	r2, [pc, #572]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d049      	beq.n	8002daa <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a8e      	ldr	r2, [pc, #568]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d042      	beq.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a8c      	ldr	r2, [pc, #560]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d03a      	beq.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a8b      	ldr	r2, [pc, #556]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d032      	beq.n	8002d9a <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a89      	ldr	r2, [pc, #548]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02a      	beq.n	8002d94 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a88      	ldr	r2, [pc, #544]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_DMAEx_MultiBufferStart_IT+0x912>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a86      	ldr	r2, [pc, #536]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01a      	beq.n	8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a85      	ldr	r2, [pc, #532]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d012      	beq.n	8002d82 <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a83      	ldr	r2, [pc, #524]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00a      	beq.n	8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x900>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a82      	ldr	r2, [pc, #520]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8002d70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d74:	e01e      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	e01b      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002d7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d80:	e018      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002d82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d86:	e015      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002d88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d8c:	e012      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d92:	e00f      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d98:	e00c      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d9e:	e009      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da4:	e006      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002da6:	2308      	movs	r3, #8
 8002da8:	e004      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002daa:	2308      	movs	r3, #8
 8002dac:	e002      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002dae:	2308      	movs	r3, #8
 8002db0:	e000      	b.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002db2:	2308      	movs	r3, #8
 8002db4:	4a70      	ldr	r2, [pc, #448]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002db6:	6093      	str	r3, [r2, #8]
 8002db8:	e0e7      	b.n	8002f8a <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b6e      	ldr	r3, [pc, #440]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d960      	bls.n	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a5f      	ldr	r2, [pc, #380]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d057      	beq.n	8002e80 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5d      	ldr	r2, [pc, #372]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d050      	beq.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5c      	ldr	r2, [pc, #368]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d049      	beq.n	8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5a      	ldr	r2, [pc, #360]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d042      	beq.n	8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a59      	ldr	r2, [pc, #356]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d03a      	beq.n	8002e6e <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a57      	ldr	r2, [pc, #348]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d032      	beq.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d02a      	beq.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a54      	ldr	r2, [pc, #336]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d022      	beq.n	8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a53      	ldr	r2, [pc, #332]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d01a      	beq.n	8002e56 <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d012      	beq.n	8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00a      	beq.n	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d102      	bne.n	8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 8002e3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e42:	e01e      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e48:	e01b      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e4e:	e018      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e54:	e015      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e5a:	e012      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e60:	e00f      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e66:	e00c      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6c:	e009      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e72:	e006      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e74:	2308      	movs	r3, #8
 8002e76:	e004      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e78:	2308      	movs	r3, #8
 8002e7a:	e002      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	e000      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002e80:	2308      	movs	r3, #8
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002e84:	60d3      	str	r3, [r2, #12]
 8002e86:	e080      	b.n	8002f8a <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d078      	beq.n	8002f84 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2d      	ldr	r2, [pc, #180]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d050      	beq.n	8002f3e <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d049      	beq.n	8002f3a <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d042      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a28      	ldr	r2, [pc, #160]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d03a      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d032      	beq.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02a      	beq.n	8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01a      	beq.n	8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d012      	beq.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00a      	beq.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d102      	bne.n	8002f06 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 8002f00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f04:	e03f      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0a:	e03c      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f10:	e039      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f16:	e036      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f1c:	e033      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f22:	e030      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f28:	e02d      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2e:	e02a      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f34:	e027      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f36:	2308      	movs	r3, #8
 8002f38:	e025      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	e023      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	e021      	b.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8002f42:	bf00      	nop
 8002f44:	400260b8 	.word	0x400260b8
 8002f48:	40026010 	.word	0x40026010
 8002f4c:	40026410 	.word	0x40026410
 8002f50:	40026070 	.word	0x40026070
 8002f54:	40026470 	.word	0x40026470
 8002f58:	40026028 	.word	0x40026028
 8002f5c:	40026428 	.word	0x40026428
 8002f60:	40026088 	.word	0x40026088
 8002f64:	40026488 	.word	0x40026488
 8002f68:	40026040 	.word	0x40026040
 8002f6c:	40026440 	.word	0x40026440
 8002f70:	400260a0 	.word	0x400260a0
 8002f74:	400264a0 	.word	0x400264a0
 8002f78:	40026400 	.word	0x40026400
 8002f7c:	40026058 	.word	0x40026058
 8002f80:	40026000 	.word	0x40026000
 8002f84:	2308      	movs	r3, #8
 8002f86:	4a9a      	ldr	r2, [pc, #616]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002f88:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b98      	ldr	r3, [pc, #608]	; (80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d960      	bls.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a97      	ldr	r2, [pc, #604]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d057      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a95      	ldr	r2, [pc, #596]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d050      	beq.n	800304c <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a94      	ldr	r2, [pc, #592]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d049      	beq.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a92      	ldr	r2, [pc, #584]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d042      	beq.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a91      	ldr	r2, [pc, #580]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d03a      	beq.n	800303e <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a8f      	ldr	r2, [pc, #572]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d032      	beq.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a8e      	ldr	r2, [pc, #568]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d02a      	beq.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a8c      	ldr	r2, [pc, #560]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d022      	beq.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a8b      	ldr	r2, [pc, #556]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d01a      	beq.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a89      	ldr	r2, [pc, #548]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d012      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a88      	ldr	r2, [pc, #544]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00a      	beq.n	800301a <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a86      	ldr	r2, [pc, #536]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d102      	bne.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 800300e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003012:	e01e      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003018:	e01b      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800301a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800301e:	e018      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003020:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003024:	e015      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003026:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800302a:	e012      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800302c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003030:	e00f      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003036:	e00c      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800303c:	e009      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800303e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003042:	e006      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003044:	2304      	movs	r3, #4
 8003046:	e004      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003048:	2304      	movs	r3, #4
 800304a:	e002      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800304c:	2304      	movs	r3, #4
 800304e:	e000      	b.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8003050:	2304      	movs	r3, #4
 8003052:	4a75      	ldr	r2, [pc, #468]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003054:	60d3      	str	r3, [r2, #12]
 8003056:	e151      	b.n	80032fc <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b73      	ldr	r3, [pc, #460]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d960      	bls.n	8003126 <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a63      	ldr	r2, [pc, #396]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d057      	beq.n	800311e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a62      	ldr	r2, [pc, #392]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d050      	beq.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a60      	ldr	r2, [pc, #384]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d049      	beq.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5f      	ldr	r2, [pc, #380]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d042      	beq.n	8003112 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a5d      	ldr	r2, [pc, #372]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d03a      	beq.n	800310c <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a5c      	ldr	r2, [pc, #368]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d032      	beq.n	8003106 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5a      	ldr	r2, [pc, #360]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d02a      	beq.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a59      	ldr	r2, [pc, #356]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a57      	ldr	r2, [pc, #348]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01a      	beq.n	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a56      	ldr	r2, [pc, #344]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d012      	beq.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00a      	beq.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a53      	ldr	r2, [pc, #332]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 80030dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e0:	e01e      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80030e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e6:	e01b      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80030e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030ec:	e018      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80030ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030f2:	e015      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80030f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030f8:	e012      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80030fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fe:	e00f      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8003100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003104:	e00c      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8003106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310a:	e009      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800310c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003110:	e006      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8003112:	2304      	movs	r3, #4
 8003114:	e004      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8003116:	2304      	movs	r3, #4
 8003118:	e002      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800311a:	2304      	movs	r3, #4
 800311c:	e000      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800311e:	2304      	movs	r3, #4
 8003120:	4a41      	ldr	r2, [pc, #260]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003122:	6093      	str	r3, [r2, #8]
 8003124:	e0ea      	b.n	80032fc <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	4b40      	ldr	r3, [pc, #256]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800312e:	429a      	cmp	r2, r3
 8003130:	f240 8084 	bls.w	800323c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d07a      	beq.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d050      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d049      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d042      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03a      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d032      	beq.n	80031d6 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02a      	beq.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01a      	beq.n	80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d012      	beq.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00a      	beq.n	80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d102      	bne.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 80031ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031b0:	e041      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b6:	e03e      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031bc:	e03b      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031c2:	e038      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031c8:	e035      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ce:	e032      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d4:	e02f      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031da:	e02c      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e0:	e029      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e027      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031e6:	2304      	movs	r3, #4
 80031e8:	e025      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e023      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031ee:	bf00      	nop
 80031f0:	40026000 	.word	0x40026000
 80031f4:	40026458 	.word	0x40026458
 80031f8:	40026010 	.word	0x40026010
 80031fc:	40026410 	.word	0x40026410
 8003200:	40026070 	.word	0x40026070
 8003204:	40026470 	.word	0x40026470
 8003208:	40026028 	.word	0x40026028
 800320c:	40026428 	.word	0x40026428
 8003210:	40026088 	.word	0x40026088
 8003214:	40026488 	.word	0x40026488
 8003218:	40026040 	.word	0x40026040
 800321c:	40026440 	.word	0x40026440
 8003220:	400260a0 	.word	0x400260a0
 8003224:	400264a0 	.word	0x400264a0
 8003228:	40026400 	.word	0x40026400
 800322c:	400260b8 	.word	0x400260b8
 8003230:	40026058 	.word	0x40026058
 8003234:	2304      	movs	r3, #4
 8003236:	4a94      	ldr	r2, [pc, #592]	; (8003488 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003238:	60d3      	str	r3, [r2, #12]
 800323a:	e05f      	b.n	80032fc <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a92      	ldr	r2, [pc, #584]	; (800348c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d057      	beq.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a91      	ldr	r2, [pc, #580]	; (8003490 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d050      	beq.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a8f      	ldr	r2, [pc, #572]	; (8003494 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d049      	beq.n	80032ee <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a8e      	ldr	r2, [pc, #568]	; (8003498 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d042      	beq.n	80032ea <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a8c      	ldr	r2, [pc, #560]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d03a      	beq.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a8b      	ldr	r2, [pc, #556]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d032      	beq.n	80032de <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a89      	ldr	r2, [pc, #548]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02a      	beq.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a88      	ldr	r2, [pc, #544]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a86      	ldr	r2, [pc, #536]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01a      	beq.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a85      	ldr	r2, [pc, #532]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d012      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a83      	ldr	r2, [pc, #524]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00a      	beq.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a82      	ldr	r2, [pc, #520]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d102      	bne.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 80032b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032b8:	e01e      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032be:	e01b      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032c4:	e018      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032ca:	e015      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032d0:	e012      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d6:	e00f      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032dc:	e00c      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e2:	e009      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e8:	e006      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e004      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032ee:	2304      	movs	r3, #4
 80032f0:	e002      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032f2:	2304      	movs	r3, #4
 80032f4:	e000      	b.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032f6:	2304      	movs	r3, #4
 80032f8:	4a63      	ldr	r2, [pc, #396]	; (8003488 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80032fa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b6e      	ldr	r3, [pc, #440]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003304:	429a      	cmp	r2, r3
 8003306:	d95c      	bls.n	80033c2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a5f      	ldr	r2, [pc, #380]	; (800348c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d053      	beq.n	80033ba <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d04c      	beq.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d045      	beq.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a5b      	ldr	r2, [pc, #364]	; (8003498 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d03e      	beq.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a59      	ldr	r2, [pc, #356]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d037      	beq.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d030      	beq.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d029      	beq.n	80033a2 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a55      	ldr	r2, [pc, #340]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a53      	ldr	r2, [pc, #332]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01a      	beq.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d012      	beq.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a50      	ldr	r2, [pc, #320]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00a      	beq.n	800338c <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d102      	bne.n	8003386 <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 8003380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003384:	e01a      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800338a:	e017      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800338c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003390:	e014      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003396:	e011      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339c:	e00e      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	e00c      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80033a2:	2340      	movs	r3, #64	; 0x40
 80033a4:	e00a      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	e008      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	e006      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e004      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e002      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80033ba:	2301      	movs	r3, #1
 80033bc:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80033be:	60d3      	str	r3, [r2, #12]
 80033c0:	e141      	b.n	8003646 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b3e      	ldr	r3, [pc, #248]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d97c      	bls.n	80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2e      	ldr	r2, [pc, #184]	; (800348c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d053      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04c      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d03e      	beq.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a28      	ldr	r2, [pc, #160]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d037      	beq.n	8003470 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d030      	beq.n	800346c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d029      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a23      	ldr	r2, [pc, #140]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a22      	ldr	r2, [pc, #136]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01a      	beq.n	800345e <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d012      	beq.n	8003458 <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00a      	beq.n	8003452 <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d102      	bne.n	800344c <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 8003446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800344a:	e01a      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800344c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003450:	e017      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003456:	e014      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345c:	e011      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800345e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003462:	e00e      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	e00c      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003468:	2340      	movs	r3, #64	; 0x40
 800346a:	e00a      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800346c:	2340      	movs	r3, #64	; 0x40
 800346e:	e008      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	e006      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003474:	2301      	movs	r3, #1
 8003476:	e004      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003478:	2301      	movs	r3, #1
 800347a:	e002      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003480:	2301      	movs	r3, #1
 8003482:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	e0de      	b.n	8003646 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8003488:	40026000 	.word	0x40026000
 800348c:	40026010 	.word	0x40026010
 8003490:	40026410 	.word	0x40026410
 8003494:	40026070 	.word	0x40026070
 8003498:	40026470 	.word	0x40026470
 800349c:	40026028 	.word	0x40026028
 80034a0:	40026428 	.word	0x40026428
 80034a4:	40026088 	.word	0x40026088
 80034a8:	40026488 	.word	0x40026488
 80034ac:	40026040 	.word	0x40026040
 80034b0:	40026440 	.word	0x40026440
 80034b4:	400260a0 	.word	0x400260a0
 80034b8:	400264a0 	.word	0x400264a0
 80034bc:	40026458 	.word	0x40026458
 80034c0:	40026400 	.word	0x40026400
 80034c4:	400260b8 	.word	0x400260b8
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b78      	ldr	r3, [pc, #480]	; (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d95c      	bls.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a76      	ldr	r2, [pc, #472]	; (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d053      	beq.n	8003586 <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a75      	ldr	r2, [pc, #468]	; (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d04c      	beq.n	8003582 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a73      	ldr	r2, [pc, #460]	; (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d045      	beq.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03e      	beq.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a70      	ldr	r2, [pc, #448]	; (80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d037      	beq.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6f      	ldr	r2, [pc, #444]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d030      	beq.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a6d      	ldr	r2, [pc, #436]	; (80036cc <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d029      	beq.n	800356e <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6c      	ldr	r2, [pc, #432]	; (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d022      	beq.n	800356a <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6a      	ldr	r2, [pc, #424]	; (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01a      	beq.n	8003564 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a69      	ldr	r2, [pc, #420]	; (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d012      	beq.n	800355e <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a67      	ldr	r2, [pc, #412]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00a      	beq.n	8003558 <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 800354c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003550:	e01a      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003556:	e017      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800355c:	e014      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800355e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003562:	e011      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003568:	e00e      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800356a:	2340      	movs	r3, #64	; 0x40
 800356c:	e00c      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800356e:	2340      	movs	r3, #64	; 0x40
 8003570:	e00a      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	e008      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	e006      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800357a:	2301      	movs	r3, #1
 800357c:	e004      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800357e:	2301      	movs	r3, #1
 8003580:	e002      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003586:	2301      	movs	r3, #1
 8003588:	4a56      	ldr	r2, [pc, #344]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800358a:	60d3      	str	r3, [r2, #12]
 800358c:	e05b      	b.n	8003646 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a48      	ldr	r2, [pc, #288]	; (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d053      	beq.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a46      	ldr	r2, [pc, #280]	; (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d04c      	beq.n	800363c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a45      	ldr	r2, [pc, #276]	; (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d045      	beq.n	8003638 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a43      	ldr	r2, [pc, #268]	; (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03e      	beq.n	8003634 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a42      	ldr	r2, [pc, #264]	; (80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d037      	beq.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d030      	beq.n	800362c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d029      	beq.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a3c      	ldr	r2, [pc, #240]	; (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01a      	beq.n	800361e <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3a      	ldr	r2, [pc, #232]	; (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d012      	beq.n	8003618 <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a39      	ldr	r2, [pc, #228]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00a      	beq.n	8003612 <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d102      	bne.n	800360c <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 8003606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800360a:	e01a      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800360c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003610:	e017      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003616:	e014      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800361c:	e011      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800361e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003622:	e00e      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003624:	2340      	movs	r3, #64	; 0x40
 8003626:	e00c      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003628:	2340      	movs	r3, #64	; 0x40
 800362a:	e00a      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800362c:	2340      	movs	r3, #64	; 0x40
 800362e:	e008      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003630:	2340      	movs	r3, #64	; 0x40
 8003632:	e006      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003634:	2301      	movs	r3, #1
 8003636:	e004      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003638:	2301      	movs	r3, #1
 800363a:	e002      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003640:	2301      	movs	r3, #1
 8003642:	4a28      	ldr	r2, [pc, #160]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003644:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0216 	orr.w	r2, r2, #22
 8003654:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003664:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0208 	orr.w	r2, r2, #8
 8003684:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e005      	b.n	80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40026058 	.word	0x40026058
 80036b4:	40026010 	.word	0x40026010
 80036b8:	40026410 	.word	0x40026410
 80036bc:	40026070 	.word	0x40026070
 80036c0:	40026470 	.word	0x40026470
 80036c4:	40026028 	.word	0x40026028
 80036c8:	40026428 	.word	0x40026428
 80036cc:	40026088 	.word	0x40026088
 80036d0:	40026488 	.word	0x40026488
 80036d4:	40026040 	.word	0x40026040
 80036d8:	40026440 	.word	0x40026440
 80036dc:	400260a0 	.word	0x400260a0
 80036e0:	400264a0 	.word	0x400264a0
 80036e4:	40026000 	.word	0x40026000

080036e8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	60da      	str	r2, [r3, #12]
 8003704:	e003      	b.n	800370e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d108      	bne.n	800374c <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800374a:	e007      	b.n	800375c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003778:	4ba9      	ldr	r3, [pc, #676]	; (8003a20 <HAL_ETH_Init+0x2b8>)
 800377a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e183      	b.n	8003a96 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fd5c 	bl	8001260 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a8:	4b9e      	ldr	r3, [pc, #632]	; (8003a24 <HAL_ETH_Init+0x2bc>)
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	4a9d      	ldr	r2, [pc, #628]	; (8003a24 <HAL_ETH_Init+0x2bc>)
 80037ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b2:	6453      	str	r3, [r2, #68]	; 0x44
 80037b4:	4b9b      	ldr	r3, [pc, #620]	; (8003a24 <HAL_ETH_Init+0x2bc>)
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80037c0:	4b99      	ldr	r3, [pc, #612]	; (8003a28 <HAL_ETH_Init+0x2c0>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a98      	ldr	r2, [pc, #608]	; (8003a28 <HAL_ETH_Init+0x2c0>)
 80037c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037ca:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80037cc:	4b96      	ldr	r3, [pc, #600]	; (8003a28 <HAL_ETH_Init+0x2c0>)
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4994      	ldr	r1, [pc, #592]	; (8003a28 <HAL_ETH_Init+0x2c0>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80037f2:	f7fd ffa9 	bl	8001748 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80037f8:	e011      	b.n	800381e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80037fa:	f7fd ffa5 	bl	8001748 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003808:	d909      	bls.n	800381e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2203      	movs	r2, #3
 800380e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e13b      	b.n	8003a96 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e4      	bne.n	80037fa <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f023 031c 	bic.w	r3, r3, #28
 800383e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003840:	f001 fc0e 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8003844:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4a78      	ldr	r2, [pc, #480]	; (8003a2c <HAL_ETH_Init+0x2c4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d908      	bls.n	8003860 <HAL_ETH_Init+0xf8>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4a77      	ldr	r2, [pc, #476]	; (8003a30 <HAL_ETH_Init+0x2c8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d804      	bhi.n	8003860 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f043 0308 	orr.w	r3, r3, #8
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e027      	b.n	80038b0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	4a73      	ldr	r2, [pc, #460]	; (8003a30 <HAL_ETH_Init+0x2c8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d908      	bls.n	800387a <HAL_ETH_Init+0x112>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	4a72      	ldr	r2, [pc, #456]	; (8003a34 <HAL_ETH_Init+0x2cc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d804      	bhi.n	800387a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f043 030c 	orr.w	r3, r3, #12
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e01a      	b.n	80038b0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	4a6d      	ldr	r2, [pc, #436]	; (8003a34 <HAL_ETH_Init+0x2cc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d903      	bls.n	800388a <HAL_ETH_Init+0x122>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <HAL_ETH_Init+0x2d0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d911      	bls.n	80038ae <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4a6a      	ldr	r2, [pc, #424]	; (8003a38 <HAL_ETH_Init+0x2d0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d908      	bls.n	80038a4 <HAL_ETH_Init+0x13c>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4a69      	ldr	r2, [pc, #420]	; (8003a3c <HAL_ETH_Init+0x2d4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d804      	bhi.n	80038a4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e005      	b.n	80038b0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f043 0310 	orr.w	r3, r3, #16
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	e000      	b.n	80038b0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80038ae:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80038b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038bc:	2100      	movs	r1, #0
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f956 	bl	8003b70 <HAL_ETH_WritePHYRegister>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80038ce:	6939      	ldr	r1, [r7, #16]
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f9b3 	bl	8003c3c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0d9      	b.n	8003a96 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80038e2:	20ff      	movs	r0, #255	; 0xff
 80038e4:	f7fd ff3c 	bl	8001760 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a7 	beq.w	8003a40 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038f2:	f7fd ff29 	bl	8001748 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	461a      	mov	r2, r3
 80038fe:	2101      	movs	r1, #1
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f8cd 	bl	8003aa0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003906:	f7fd ff1f 	bl	8001748 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d90f      	bls.n	8003938 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800391c:	6939      	ldr	r1, [r7, #16]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f98c 	bl	8003c3c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0ae      	b.n	8003a96 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0da      	beq.n	80038f8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003946:	2100      	movs	r1, #0
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f911 	bl	8003b70 <HAL_ETH_WritePHYRegister>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003958:	6939      	ldr	r1, [r7, #16]
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f96e 	bl	8003c3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003968:	2301      	movs	r3, #1
 800396a:	e094      	b.n	8003a96 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800396c:	f7fd feec 	bl	8001748 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	461a      	mov	r2, r3
 8003978:	2101      	movs	r1, #1
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f890 	bl	8003aa0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003980:	f7fd fee2 	bl	8001748 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d90f      	bls.n	80039b2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f94f 	bl	8003c3c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e071      	b.n	8003a96 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0da      	beq.n	8003972 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	461a      	mov	r2, r3
 80039c2:	211f      	movs	r1, #31
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f86b 	bl	8003aa0 <HAL_ETH_ReadPHYRegister>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80039d4:	6939      	ldr	r1, [r7, #16]
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f930 	bl	8003c3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80039e4:	2301      	movs	r3, #1
 80039e6:	e056      	b.n	8003a96 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e002      	b.n	8003a02 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e037      	b.n	8003a84 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	e032      	b.n	8003a84 <HAL_ETH_Init+0x31c>
 8003a1e:	bf00      	nop
 8003a20:	03938700 	.word	0x03938700
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	01312cff 	.word	0x01312cff
 8003a30:	02160ebf 	.word	0x02160ebf
 8003a34:	039386ff 	.word	0x039386ff
 8003a38:	05f5e0ff 	.word	0x05f5e0ff
 8003a3c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	2100      	movs	r1, #0
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f889 	bl	8003b70 <HAL_ETH_WritePHYRegister>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003a68:	6939      	ldr	r1, [r7, #16]
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f8e6 	bl	8003c3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e00c      	b.n	8003a96 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003a7c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003a80:	f7fd fe6e 	bl	8001760 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003a84:	6939      	ldr	r1, [r7, #16]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8d8 	bl	8003c3c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop

08003aa0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b82      	cmp	r3, #130	; 0x82
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e050      	b.n	8003b68 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2282      	movs	r2, #130	; 0x82
 8003aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 031c 	and.w	r3, r3, #28
 8003adc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8a1b      	ldrh	r3, [r3, #16]
 8003ae2:	02db      	lsls	r3, r3, #11
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003aec:	897b      	ldrh	r3, [r7, #10]
 8003aee:	019b      	lsls	r3, r3, #6
 8003af0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 0302 	bic.w	r3, r3, #2
 8003b00:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b12:	f7fd fe19 	bl	8001748 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b18:	e015      	b.n	8003b46 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003b1a:	f7fd fe15 	bl	8001748 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d309      	bcc.n	8003b3e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e014      	b.n	8003b68 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e4      	bne.n	8003b1a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b42      	cmp	r3, #66	; 0x42
 8003b90:	d101      	bne.n	8003b96 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	e04e      	b.n	8003c34 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2242      	movs	r2, #66	; 0x42
 8003b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 031c 	and.w	r3, r3, #28
 8003bac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8a1b      	ldrh	r3, [r3, #16]
 8003bb2:	02db      	lsls	r3, r3, #11
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bec:	f7fd fdac 	bl	8001748 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bf2:	e015      	b.n	8003c20 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003bf4:	f7fd fda8 	bl	8001748 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d309      	bcc.n	8003c18 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e00d      	b.n	8003c34 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e4      	bne.n	8003bf4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b0b0      	sub	sp, #192	; 0xc0
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c58:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c86:	663b      	str	r3, [r7, #96]	; 0x60
 8003c88:	e001      	b.n	8003c8e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c92:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d14:	4bab      	ldr	r3, [pc, #684]	; (8003fc4 <ETH_MACDMAConfig+0x388>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003d20:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003d24:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003d28:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003d2e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003d32:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003d36:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003d3c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003d40:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003d44:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003d48:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003d4c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003d50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003d52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d64:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7fd fcf5 	bl	8001760 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d7e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d84:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003d88:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003d8e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003d94:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003d9a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003da0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003da4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003dac:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003dae:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f7fd fcd0 	bl	8001760 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dc8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dd2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003ddc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003de8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dec:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003df0:	4013      	ands	r3, r2
 8003df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dfa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003dfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003e00:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003e06:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003e08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003e0c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003e12:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003e18:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003e1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e2c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e38:	2001      	movs	r0, #1
 8003e3a:	f7fd fc91 	bl	8001760 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e46:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003e48:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003e4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7fd fc7c 	bl	8001760 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e70:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003e80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e84:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003e96:	2304      	movs	r3, #4
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	f241 0318 	movw	r3, #4120	; 0x1018
 8003ec6:	4413      	add	r3, r2
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <ETH_MACDMAConfig+0x38c>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003eda:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003edc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003ede:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003ee0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003ee2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003ee4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003ee6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003ee8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003eea:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003eec:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003eee:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003ef2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003ef6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003efa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003efc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f0e:	4413      	add	r3, r2
 8003f10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f14:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f1e:	4413      	add	r3, r2
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f26:	2001      	movs	r0, #1
 8003f28:	f7fd fc1a 	bl	8001760 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f34:	4413      	add	r3, r2
 8003f36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f3a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003f40:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003f44:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003f48:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003f4c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f50:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003f52:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003f56:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f64:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7fd fbf3 	bl	8001760 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f86:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d10d      	bne.n	8003fac <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	f241 031c 	movw	r3, #4124	; 0x101c
 8003f98:	4413      	add	r3, r2
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6811      	ldr	r1, [r2, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <ETH_MACDMAConfig+0x390>)
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	f241 031c 	movw	r3, #4124	; 0x101c
 8003fa8:	440b      	add	r3, r1
 8003faa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f80b 	bl	8003fd0 <ETH_MACAddressConfig>
}
 8003fba:	bf00      	nop
 8003fbc:	37c0      	adds	r7, #192	; 0xc0
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	ff20810f 	.word	0xff20810f
 8003fc8:	f8de3f23 	.word	0xf8de3f23
 8003fcc:	00010040 	.word	0x00010040

08003fd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3305      	adds	r3, #5
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	3204      	adds	r2, #4
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <ETH_MACAddressConfig+0x68>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3303      	adds	r3, #3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	061a      	lsls	r2, r3, #24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3302      	adds	r3, #2
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3301      	adds	r3, #1
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	4313      	orrs	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <ETH_MACAddressConfig+0x6c>)
 8004022:	4413      	add	r3, r2
 8004024:	461a      	mov	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40028040 	.word	0x40028040
 800403c:	40028044 	.word	0x40028044

08004040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e175      	b.n	800434c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	f040 8164 	bne.w	8004346 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d00b      	beq.n	800409e <HAL_GPIO_Init+0x5e>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d007      	beq.n	800409e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004092:	2b11      	cmp	r3, #17
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b12      	cmp	r3, #18
 800409c:	d130      	bne.n	8004100 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	2203      	movs	r2, #3
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040d4:	2201      	movs	r2, #1
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 0201 	and.w	r2, r3, #1
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x100>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b12      	cmp	r3, #18
 800413e:	d123      	bne.n	8004188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	08da      	lsrs	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3208      	adds	r2, #8
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	220f      	movs	r2, #15
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	08da      	lsrs	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3208      	adds	r2, #8
 8004182:	69b9      	ldr	r1, [r7, #24]
 8004184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0203 	and.w	r2, r3, #3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80be 	beq.w	8004346 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ca:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_GPIO_Init+0x320>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	4a64      	ldr	r2, [pc, #400]	; (8004360 <HAL_GPIO_Init+0x320>)
 80041d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d4:	6453      	str	r3, [r2, #68]	; 0x44
 80041d6:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_GPIO_Init+0x320>)
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041e2:	4a60      	ldr	r2, [pc, #384]	; (8004364 <HAL_GPIO_Init+0x324>)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	3302      	adds	r3, #2
 80041ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a57      	ldr	r2, [pc, #348]	; (8004368 <HAL_GPIO_Init+0x328>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d037      	beq.n	800427e <HAL_GPIO_Init+0x23e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a56      	ldr	r2, [pc, #344]	; (800436c <HAL_GPIO_Init+0x32c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d031      	beq.n	800427a <HAL_GPIO_Init+0x23a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a55      	ldr	r2, [pc, #340]	; (8004370 <HAL_GPIO_Init+0x330>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d02b      	beq.n	8004276 <HAL_GPIO_Init+0x236>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a54      	ldr	r2, [pc, #336]	; (8004374 <HAL_GPIO_Init+0x334>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d025      	beq.n	8004272 <HAL_GPIO_Init+0x232>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a53      	ldr	r2, [pc, #332]	; (8004378 <HAL_GPIO_Init+0x338>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01f      	beq.n	800426e <HAL_GPIO_Init+0x22e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_GPIO_Init+0x33c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d019      	beq.n	800426a <HAL_GPIO_Init+0x22a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a51      	ldr	r2, [pc, #324]	; (8004380 <HAL_GPIO_Init+0x340>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_GPIO_Init+0x226>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a50      	ldr	r2, [pc, #320]	; (8004384 <HAL_GPIO_Init+0x344>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00d      	beq.n	8004262 <HAL_GPIO_Init+0x222>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4f      	ldr	r2, [pc, #316]	; (8004388 <HAL_GPIO_Init+0x348>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <HAL_GPIO_Init+0x21e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4e      	ldr	r2, [pc, #312]	; (800438c <HAL_GPIO_Init+0x34c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_GPIO_Init+0x21a>
 8004256:	2309      	movs	r3, #9
 8004258:	e012      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800425a:	230a      	movs	r3, #10
 800425c:	e010      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800425e:	2308      	movs	r3, #8
 8004260:	e00e      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004262:	2307      	movs	r3, #7
 8004264:	e00c      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004266:	2306      	movs	r3, #6
 8004268:	e00a      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800426a:	2305      	movs	r3, #5
 800426c:	e008      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800426e:	2304      	movs	r3, #4
 8004270:	e006      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004272:	2303      	movs	r3, #3
 8004274:	e004      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004276:	2302      	movs	r3, #2
 8004278:	e002      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800427e:	2300      	movs	r3, #0
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f002 0203 	and.w	r2, r2, #3
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	4093      	lsls	r3, r2
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004290:	4934      	ldr	r1, [pc, #208]	; (8004364 <HAL_GPIO_Init+0x324>)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429e:	4b3c      	ldr	r3, [pc, #240]	; (8004390 <HAL_GPIO_Init+0x350>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042c2:	4a33      	ldr	r2, [pc, #204]	; (8004390 <HAL_GPIO_Init+0x350>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042c8:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_GPIO_Init+0x350>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ec:	4a28      	ldr	r2, [pc, #160]	; (8004390 <HAL_GPIO_Init+0x350>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042f2:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_GPIO_Init+0x350>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004316:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_GPIO_Init+0x350>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <HAL_GPIO_Init+0x350>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004340:	4a13      	ldr	r2, [pc, #76]	; (8004390 <HAL_GPIO_Init+0x350>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	f67f ae86 	bls.w	8004060 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004354:	bf00      	nop
 8004356:	3724      	adds	r7, #36	; 0x24
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40023800 	.word	0x40023800
 8004364:	40013800 	.word	0x40013800
 8004368:	40020000 	.word	0x40020000
 800436c:	40020400 	.word	0x40020400
 8004370:	40020800 	.word	0x40020800
 8004374:	40020c00 	.word	0x40020c00
 8004378:	40021000 	.word	0x40021000
 800437c:	40021400 	.word	0x40021400
 8004380:	40021800 	.word	0x40021800
 8004384:	40021c00 	.word	0x40021c00
 8004388:	40022000 	.word	0x40022000
 800438c:	40022400 	.word	0x40022400
 8004390:	40013c00 	.word	0x40013c00

08004394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e001      	b.n	80043b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	807b      	strh	r3, [r7, #2]
 80043d0:	4613      	mov	r3, r2
 80043d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d4:	787b      	ldrb	r3, [r7, #1]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043e0:	e003      	b.n	80043ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	041a      	lsls	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	619a      	str	r2, [r3, #24]
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800440e:	887b      	ldrh	r3, [r7, #2]
 8004410:	041a      	lsls	r2, r3, #16
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004416:	e002      	b.n	800441e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004418:	887a      	ldrh	r2, [r7, #2]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	619a      	str	r2, [r3, #24]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800442a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442c:	b08f      	sub	sp, #60	; 0x3c
 800442e:	af0a      	add	r7, sp, #40	; 0x28
 8004430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e116      	b.n	800466a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd f852 	bl	8001500 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2203      	movs	r2, #3
 8004460:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f002 fc36 	bl	8006cec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	687e      	ldr	r6, [r7, #4]
 8004488:	466d      	mov	r5, sp
 800448a:	f106 0410 	add.w	r4, r6, #16
 800448e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004496:	e894 0003 	ldmia.w	r4, {r0, r1}
 800449a:	e885 0003 	stmia.w	r5, {r0, r1}
 800449e:	1d33      	adds	r3, r6, #4
 80044a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a2:	6838      	ldr	r0, [r7, #0]
 80044a4:	f002 fbca 	bl	8006c3c <USB_CoreInit>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0d7      	b.n	800466a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f002 fc24 	bl	8006d0e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	e04a      	b.n	8004562 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	333d      	adds	r3, #61	; 0x3d
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044e0:	7bfa      	ldrb	r2, [r7, #15]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	333c      	adds	r3, #60	; 0x3c
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044f4:	7bfa      	ldrb	r2, [r7, #15]
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	b298      	uxth	r0, r3
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	3342      	adds	r3, #66	; 0x42
 8004508:	4602      	mov	r2, r0
 800450a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	333f      	adds	r3, #63	; 0x3f
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3344      	adds	r3, #68	; 0x44
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	3348      	adds	r3, #72	; 0x48
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	3350      	adds	r3, #80	; 0x50
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	3301      	adds	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
 8004562:	7bfa      	ldrb	r2, [r7, #15]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	429a      	cmp	r2, r3
 800456a:	d3af      	bcc.n	80044cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800456c:	2300      	movs	r3, #0
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	e044      	b.n	80045fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800459e:	7bfa      	ldrb	r2, [r7, #15]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	3301      	adds	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d3b5      	bcc.n	8004572 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	687e      	ldr	r6, [r7, #4]
 800460e:	466d      	mov	r5, sp
 8004610:	f106 0410 	add.w	r4, r6, #16
 8004614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800461a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004620:	e885 0003 	stmia.w	r5, {r0, r1}
 8004624:	1d33      	adds	r3, r6, #4
 8004626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004628:	6838      	ldr	r0, [r7, #0]
 800462a:	f002 fb9b 	bl	8006d64 <USB_DevInit>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e014      	b.n	800466a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b01      	cmp	r3, #1
 8004656:	d102      	bne.n	800465e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f80b 	bl	8004674 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f002 fd4d 	bl	8007102 <USB_DevDisconnect>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004674 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	10000003 	.word	0x10000003

080046bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40007000 	.word	0x40007000

080046dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <HAL_PWREx_EnableOverDrive+0x98>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_PWREx_EnableOverDrive+0x98>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_PWREx_EnableOverDrive+0x98>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046fe:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800470a:	f7fd f81d 	bl	8001748 <HAL_GetTick>
 800470e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004710:	e009      	b.n	8004726 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004712:	f7fd f819 	bl	8001748 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004720:	d901      	bls.n	8004726 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e022      	b.n	800476c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004732:	d1ee      	bne.n	8004712 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004740:	f7fd f802 	bl	8001748 <HAL_GetTick>
 8004744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004746:	e009      	b.n	800475c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004748:	f7fc fffe 	bl	8001748 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004756:	d901      	bls.n	800475c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e007      	b.n	800476c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004768:	d1ee      	bne.n	8004748 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	40007000 	.word	0x40007000

0800477c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e29b      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8087 	beq.w	80048ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047a0:	4b96      	ldr	r3, [pc, #600]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d00c      	beq.n	80047c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ac:	4b93      	ldr	r3, [pc, #588]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 030c 	and.w	r3, r3, #12
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d112      	bne.n	80047de <HAL_RCC_OscConfig+0x62>
 80047b8:	4b90      	ldr	r3, [pc, #576]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c4:	d10b      	bne.n	80047de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c6:	4b8d      	ldr	r3, [pc, #564]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d06c      	beq.n	80048ac <HAL_RCC_OscConfig+0x130>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d168      	bne.n	80048ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e275      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e6:	d106      	bne.n	80047f6 <HAL_RCC_OscConfig+0x7a>
 80047e8:	4b84      	ldr	r3, [pc, #528]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a83      	ldr	r2, [pc, #524]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80047ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	e02e      	b.n	8004854 <HAL_RCC_OscConfig+0xd8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x9c>
 80047fe:	4b7f      	ldr	r3, [pc, #508]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a7e      	ldr	r2, [pc, #504]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b7c      	ldr	r3, [pc, #496]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a7b      	ldr	r2, [pc, #492]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e01d      	b.n	8004854 <HAL_RCC_OscConfig+0xd8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0xc0>
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a75      	ldr	r2, [pc, #468]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	4b73      	ldr	r3, [pc, #460]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a72      	ldr	r2, [pc, #456]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0xd8>
 800483c:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6e      	ldr	r2, [pc, #440]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	4b6c      	ldr	r3, [pc, #432]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a6b      	ldr	r2, [pc, #428]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 800484e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d013      	beq.n	8004884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fc ff74 	bl	8001748 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004864:	f7fc ff70 	bl	8001748 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e229      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004876:	4b61      	ldr	r3, [pc, #388]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0xe8>
 8004882:	e014      	b.n	80048ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fc ff60 	bl	8001748 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800488c:	f7fc ff5c 	bl	8001748 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b64      	cmp	r3, #100	; 0x64
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e215      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489e:	4b57      	ldr	r3, [pc, #348]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x110>
 80048aa:	e000      	b.n	80048ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d069      	beq.n	800498e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ba:	4b50      	ldr	r3, [pc, #320]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c6:	4b4d      	ldr	r3, [pc, #308]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d11c      	bne.n	800490c <HAL_RCC_OscConfig+0x190>
 80048d2:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d116      	bne.n	800490c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048de:	4b47      	ldr	r3, [pc, #284]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_RCC_OscConfig+0x17a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d001      	beq.n	80048f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e1e9      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f6:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	493d      	ldr	r1, [pc, #244]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490a:	e040      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d023      	beq.n	800495c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a38      	ldr	r2, [pc, #224]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fc ff12 	bl	8001748 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004928:	f7fc ff0e 	bl	8001748 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e1c7      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4929      	ldr	r1, [pc, #164]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
 800495a:	e018      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495c:	4b27      	ldr	r3, [pc, #156]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fc feee 	bl	8001748 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004970:	f7fc feea 	bl	8001748 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e1a3      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d038      	beq.n	8004a0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d019      	beq.n	80049d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	4a15      	ldr	r2, [pc, #84]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fc fecb 	bl	8001748 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fc fec7 	bl	8001748 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e180      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x23a>
 80049d4:	e01a      	b.n	8004a0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	4a08      	ldr	r2, [pc, #32]	; (80049fc <HAL_RCC_OscConfig+0x280>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e2:	f7fc feb1 	bl	8001748 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fc fead 	bl	8001748 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d903      	bls.n	8004a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e166      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
 80049fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	4b92      	ldr	r3, [pc, #584]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ee      	bne.n	80049ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80a4 	beq.w	8004b62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1a:	4b8c      	ldr	r3, [pc, #560]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10d      	bne.n	8004a42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	4b89      	ldr	r3, [pc, #548]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	4a88      	ldr	r2, [pc, #544]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6413      	str	r3, [r2, #64]	; 0x40
 8004a32:	4b86      	ldr	r3, [pc, #536]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a42:	4b83      	ldr	r3, [pc, #524]	; (8004c50 <HAL_RCC_OscConfig+0x4d4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d118      	bne.n	8004a80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a4e:	4b80      	ldr	r3, [pc, #512]	; (8004c50 <HAL_RCC_OscConfig+0x4d4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7f      	ldr	r2, [pc, #508]	; (8004c50 <HAL_RCC_OscConfig+0x4d4>)
 8004a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5a:	f7fc fe75 	bl	8001748 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a62:	f7fc fe71 	bl	8001748 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b64      	cmp	r3, #100	; 0x64
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e12a      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a74:	4b76      	ldr	r3, [pc, #472]	; (8004c50 <HAL_RCC_OscConfig+0x4d4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d106      	bne.n	8004a96 <HAL_RCC_OscConfig+0x31a>
 8004a88:	4b70      	ldr	r3, [pc, #448]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a6f      	ldr	r2, [pc, #444]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
 8004a94:	e02d      	b.n	8004af2 <HAL_RCC_OscConfig+0x376>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x33c>
 8004a9e:	4b6b      	ldr	r3, [pc, #428]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a6a      	ldr	r2, [pc, #424]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aaa:	4b68      	ldr	r3, [pc, #416]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4a67      	ldr	r2, [pc, #412]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ab0:	f023 0304 	bic.w	r3, r3, #4
 8004ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab6:	e01c      	b.n	8004af2 <HAL_RCC_OscConfig+0x376>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	d10c      	bne.n	8004ada <HAL_RCC_OscConfig+0x35e>
 8004ac0:	4b62      	ldr	r3, [pc, #392]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a61      	ldr	r2, [pc, #388]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ac6:	f043 0304 	orr.w	r3, r3, #4
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	4b5f      	ldr	r3, [pc, #380]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	4a5e      	ldr	r2, [pc, #376]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad8:	e00b      	b.n	8004af2 <HAL_RCC_OscConfig+0x376>
 8004ada:	4b5c      	ldr	r3, [pc, #368]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae6:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a58      	ldr	r2, [pc, #352]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d015      	beq.n	8004b26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fc fe25 	bl	8001748 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fc fe21 	bl	8001748 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e0d8      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ee      	beq.n	8004b02 <HAL_RCC_OscConfig+0x386>
 8004b24:	e014      	b.n	8004b50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fc fe0f 	bl	8001748 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fc fe0b 	bl	8001748 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0c2      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b44:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ee      	bne.n	8004b2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b56:	4b3d      	ldr	r3, [pc, #244]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4a3c      	ldr	r2, [pc, #240]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 80ae 	beq.w	8004cc8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b6c:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d06d      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d14b      	bne.n	8004c18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b80:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fc fddc 	bl	8001748 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fc fdd8 	bl	8001748 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e091      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba6:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	071b      	lsls	r3, r3, #28
 8004bde:	491b      	ldr	r1, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fdaa 	bl	8001748 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fc fda6 	bl	8001748 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e05f      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x47c>
 8004c16:	e057      	b.n	8004cc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fc fd90 	bl	8001748 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fc fd8c 	bl	8001748 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e045      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <HAL_RCC_OscConfig+0x4d0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4b0>
 8004c4a:	e03d      	b.n	8004cc8 <HAL_RCC_OscConfig+0x54c>
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c54:	4b1f      	ldr	r3, [pc, #124]	; (8004cd4 <HAL_RCC_OscConfig+0x558>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d030      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d129      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d122      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d119      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800

08004cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0d0      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b6a      	ldr	r3, [pc, #424]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d910      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b67      	ldr	r3, [pc, #412]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 020f 	bic.w	r2, r3, #15
 8004d06:	4965      	ldr	r1, [pc, #404]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0b8      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b50      	ldr	r3, [pc, #320]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	494d      	ldr	r1, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d040      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d115      	bne.n	8004dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9a:	4b41      	ldr	r3, [pc, #260]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e073      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004daa:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e06b      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 0203 	bic.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4936      	ldr	r1, [pc, #216]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dcc:	f7fc fcbc 	bl	8001748 <HAL_GetTick>
 8004dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd4:	f7fc fcb8 	bl	8001748 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e053      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	4b2d      	ldr	r3, [pc, #180]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 020c 	and.w	r2, r3, #12
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d1eb      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d210      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 020f 	bic.w	r2, r3, #15
 8004e12:	4922      	ldr	r1, [pc, #136]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e032      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4916      	ldr	r1, [pc, #88]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e6a:	f000 f821 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8004e6e:	4601      	mov	r1, r0
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8004e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1d4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fc fc18 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	0800720c 	.word	0x0800720c
 8004ea8:	20000000 	.word	0x20000000
 8004eac:	20000004 	.word	0x20000004

08004eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec6:	4b63      	ldr	r3, [pc, #396]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d007      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x32>
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d008      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 80b4 	bne.w	8005044 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004edc:	4b5e      	ldr	r3, [pc, #376]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ede:	60bb      	str	r3, [r7, #8]
      break;
 8004ee0:	e0b3      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ee2:	4b5e      	ldr	r3, [pc, #376]	; (800505c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ee4:	60bb      	str	r3, [r7, #8]
      break;
 8004ee6:	e0b0      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee8:	4b5a      	ldr	r3, [pc, #360]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ef2:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d04a      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efe:	4b55      	ldr	r3, [pc, #340]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	099b      	lsrs	r3, r3, #6
 8004f04:	f04f 0400 	mov.w	r4, #0
 8004f08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	ea03 0501 	and.w	r5, r3, r1
 8004f14:	ea04 0602 	and.w	r6, r4, r2
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	f04f 0400 	mov.w	r4, #0
 8004f24:	0154      	lsls	r4, r2, #5
 8004f26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f2a:	014b      	lsls	r3, r1, #5
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4622      	mov	r2, r4
 8004f30:	1b49      	subs	r1, r1, r5
 8004f32:	eb62 0206 	sbc.w	r2, r2, r6
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	f04f 0400 	mov.w	r4, #0
 8004f3e:	0194      	lsls	r4, r2, #6
 8004f40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f44:	018b      	lsls	r3, r1, #6
 8004f46:	1a5b      	subs	r3, r3, r1
 8004f48:	eb64 0402 	sbc.w	r4, r4, r2
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	00e2      	lsls	r2, r4, #3
 8004f56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f5a:	00d9      	lsls	r1, r3, #3
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4614      	mov	r4, r2
 8004f60:	195b      	adds	r3, r3, r5
 8004f62:	eb44 0406 	adc.w	r4, r4, r6
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	0262      	lsls	r2, r4, #9
 8004f70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f74:	0259      	lsls	r1, r3, #9
 8004f76:	460b      	mov	r3, r1
 8004f78:	4614      	mov	r4, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f04f 0400 	mov.w	r4, #0
 8004f84:	461a      	mov	r2, r3
 8004f86:	4623      	mov	r3, r4
 8004f88:	f7fb f956 	bl	8000238 <__aeabi_uldivmod>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e049      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f94:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	f04f 0400 	mov.w	r4, #0
 8004f9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	ea03 0501 	and.w	r5, r3, r1
 8004faa:	ea04 0602 	and.w	r6, r4, r2
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	f04f 0400 	mov.w	r4, #0
 8004fba:	0154      	lsls	r4, r2, #5
 8004fbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fc0:	014b      	lsls	r3, r1, #5
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	1b49      	subs	r1, r1, r5
 8004fc8:	eb62 0206 	sbc.w	r2, r2, r6
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	f04f 0400 	mov.w	r4, #0
 8004fd4:	0194      	lsls	r4, r2, #6
 8004fd6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fda:	018b      	lsls	r3, r1, #6
 8004fdc:	1a5b      	subs	r3, r3, r1
 8004fde:	eb64 0402 	sbc.w	r4, r4, r2
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	00e2      	lsls	r2, r4, #3
 8004fec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ff0:	00d9      	lsls	r1, r3, #3
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	195b      	adds	r3, r3, r5
 8004ff8:	eb44 0406 	adc.w	r4, r4, r6
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	02a2      	lsls	r2, r4, #10
 8005006:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800500a:	0299      	lsls	r1, r3, #10
 800500c:	460b      	mov	r3, r1
 800500e:	4614      	mov	r4, r2
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f04f 0400 	mov.w	r4, #0
 800501a:	461a      	mov	r2, r3
 800501c:	4623      	mov	r3, r4
 800501e:	f7fb f90b 	bl	8000238 <__aeabi_uldivmod>
 8005022:	4603      	mov	r3, r0
 8005024:	460c      	mov	r4, r1
 8005026:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	60bb      	str	r3, [r7, #8]
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005046:	60bb      	str	r3, [r7, #8]
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	68bb      	ldr	r3, [r7, #8]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	00f42400 	.word	0x00f42400
 800505c:	007a1200 	.word	0x007a1200

08005060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_RCC_GetHCLKFreq+0x14>)
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000000 	.word	0x20000000

08005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800507c:	f7ff fff0 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8005080:	4601      	mov	r1, r0
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	0a9b      	lsrs	r3, r3, #10
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4a03      	ldr	r2, [pc, #12]	; (800509c <HAL_RCC_GetPCLK1Freq+0x24>)
 800508e:	5cd3      	ldrb	r3, [r2, r3]
 8005090:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40023800 	.word	0x40023800
 800509c:	0800721c 	.word	0x0800721c

080050a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a4:	f7ff ffdc 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 80050a8:	4601      	mov	r1, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0b5b      	lsrs	r3, r3, #13
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4a03      	ldr	r2, [pc, #12]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b6:	5cd3      	ldrb	r3, [r2, r3]
 80050b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0800721c 	.word	0x0800721c

080050c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d012      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050f0:	4b69      	ldr	r3, [pc, #420]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a68      	ldr	r2, [pc, #416]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	4b66      	ldr	r3, [pc, #408]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005104:	4964      	ldr	r1, [pc, #400]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005112:	2301      	movs	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005122:	4b5d      	ldr	r3, [pc, #372]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	4959      	ldr	r1, [pc, #356]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005140:	d101      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005142:	2301      	movs	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800515e:	4b4e      	ldr	r3, [pc, #312]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	494a      	ldr	r1, [pc, #296]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800517c:	d101      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800517e:	2301      	movs	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800519a:	2301      	movs	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 808b 	beq.w	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ac:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	4a39      	ldr	r2, [pc, #228]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b6:	6413      	str	r3, [r2, #64]	; 0x40
 80051b8:	4b37      	ldr	r3, [pc, #220]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051c4:	4b35      	ldr	r3, [pc, #212]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a34      	ldr	r2, [pc, #208]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d0:	f7fc faba 	bl	8001748 <HAL_GetTick>
 80051d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d8:	f7fc fab6 	bl	8001748 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	d901      	bls.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e38d      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051ea:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f6:	4b28      	ldr	r3, [pc, #160]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d035      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d02e      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005214:	4b20      	ldr	r3, [pc, #128]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800521e:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005228:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005234:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005236:	4a18      	ldr	r2, [pc, #96]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800523c:	4b16      	ldr	r3, [pc, #88]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d114      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fc fa7e 	bl	8001748 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524e:	e00a      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f7fc fa7a 	bl	8001748 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	; 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e34f      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0ee      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527e:	d111      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800528e:	400b      	ands	r3, r1
 8005290:	4901      	ldr	r1, [pc, #4]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
 8005296:	e00b      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005298:	40023800 	.word	0x40023800
 800529c:	40007000 	.word	0x40007000
 80052a0:	0ffffcff 	.word	0x0ffffcff
 80052a4:	4bb3      	ldr	r3, [pc, #716]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4ab2      	ldr	r2, [pc, #712]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052ae:	6093      	str	r3, [r2, #8]
 80052b0:	4bb0      	ldr	r3, [pc, #704]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052bc:	49ad      	ldr	r1, [pc, #692]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d010      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ce:	4ba9      	ldr	r3, [pc, #676]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d4:	4aa7      	ldr	r2, [pc, #668]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052de:	4ba5      	ldr	r3, [pc, #660]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	49a2      	ldr	r1, [pc, #648]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052fc:	4b9d      	ldr	r3, [pc, #628]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530a:	499a      	ldr	r1, [pc, #616]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800531e:	4b95      	ldr	r3, [pc, #596]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800532c:	4991      	ldr	r1, [pc, #580]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005340:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534e:	4989      	ldr	r1, [pc, #548]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005362:	4b84      	ldr	r3, [pc, #528]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	4980      	ldr	r1, [pc, #512]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005384:	4b7b      	ldr	r3, [pc, #492]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f023 0203 	bic.w	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	4978      	ldr	r1, [pc, #480]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a6:	4b73      	ldr	r3, [pc, #460]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ac:	f023 020c 	bic.w	r2, r3, #12
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b4:	496f      	ldr	r1, [pc, #444]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c8:	4b6a      	ldr	r3, [pc, #424]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	4967      	ldr	r1, [pc, #412]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053ea:	4b62      	ldr	r3, [pc, #392]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	495e      	ldr	r1, [pc, #376]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800540c:	4b59      	ldr	r3, [pc, #356]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	4956      	ldr	r1, [pc, #344]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800542e:	4b51      	ldr	r3, [pc, #324]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	494d      	ldr	r1, [pc, #308]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005450:	4b48      	ldr	r3, [pc, #288]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	4945      	ldr	r1, [pc, #276]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005472:	4b40      	ldr	r3, [pc, #256]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005480:	493c      	ldr	r1, [pc, #240]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005494:	4b37      	ldr	r3, [pc, #220]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a2:	4934      	ldr	r1, [pc, #208]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d011      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054b6:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c4:	492b      	ldr	r1, [pc, #172]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d4:	d101      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f6:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005504:	491b      	ldr	r1, [pc, #108]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005518:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005528:	4912      	ldr	r1, [pc, #72]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554c:	4909      	ldr	r1, [pc, #36]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00f      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005560:	4b04      	ldr	r3, [pc, #16]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005566:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	e002      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005572:	bf00      	nop
 8005574:	40023800 	.word	0x40023800
 8005578:	4985      	ldr	r1, [pc, #532]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800558c:	4b80      	ldr	r3, [pc, #512]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800558e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005592:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559c:	497c      	ldr	r1, [pc, #496]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d005      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b2:	f040 80d6 	bne.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055b6:	4b76      	ldr	r3, [pc, #472]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a75      	ldr	r2, [pc, #468]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c2:	f7fc f8c1 	bl	8001748 <HAL_GetTick>
 80055c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055ca:	f7fc f8bd 	bl	8001748 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b64      	cmp	r3, #100	; 0x64
 80055d6:	d901      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e194      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055dc:	4b6c      	ldr	r3, [pc, #432]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f0      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d021      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d11d      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800560a:	4b61      	ldr	r3, [pc, #388]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800560c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005610:	0e1b      	lsrs	r3, r3, #24
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	019a      	lsls	r2, r3, #6
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	431a      	orrs	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	061b      	lsls	r3, r3, #24
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	071b      	lsls	r3, r3, #28
 8005630:	4957      	ldr	r1, [pc, #348]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005656:	2b00      	cmp	r3, #0
 8005658:	d02e      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005662:	d129      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005664:	4b4a      	ldr	r3, [pc, #296]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566a:	0c1b      	lsrs	r3, r3, #16
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005672:	4b47      	ldr	r3, [pc, #284]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005678:	0f1b      	lsrs	r3, r3, #28
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	019a      	lsls	r2, r3, #6
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	431a      	orrs	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	071b      	lsls	r3, r3, #28
 8005698:	493d      	ldr	r1, [pc, #244]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056a0:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a6:	f023 021f 	bic.w	r2, r3, #31
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	3b01      	subs	r3, #1
 80056b0:	4937      	ldr	r1, [pc, #220]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01d      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056c4:	4b32      	ldr	r3, [pc, #200]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ca:	0e1b      	lsrs	r3, r3, #24
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056d2:	4b2f      	ldr	r3, [pc, #188]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d8:	0f1b      	lsrs	r3, r3, #28
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	019a      	lsls	r2, r3, #6
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	431a      	orrs	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	431a      	orrs	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	071b      	lsls	r3, r3, #28
 80056f8:	4925      	ldr	r1, [pc, #148]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d011      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	019a      	lsls	r2, r3, #6
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	061b      	lsls	r3, r3, #24
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	071b      	lsls	r3, r3, #28
 8005728:	4919      	ldr	r1, [pc, #100]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005730:	4b17      	ldr	r3, [pc, #92]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a16      	ldr	r2, [pc, #88]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800573a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fc f804 	bl	8001748 <HAL_GetTick>
 8005740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005744:	f7fc f800 	bl	8001748 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e0d7      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005756:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b01      	cmp	r3, #1
 8005766:	f040 80cd 	bne.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800576a:	4b09      	ldr	r3, [pc, #36]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a08      	ldr	r2, [pc, #32]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005776:	f7fb ffe7 	bl	8001748 <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800577c:	e00a      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800577e:	f7fb ffe3 	bl	8001748 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b64      	cmp	r3, #100	; 0x64
 800578a:	d903      	bls.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e0ba      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005790:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005794:	4b5e      	ldr	r3, [pc, #376]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800579c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a0:	d0ed      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d02e      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d12a      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057ca:	4b51      	ldr	r3, [pc, #324]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057d8:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	0f1b      	lsrs	r3, r3, #28
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	019a      	lsls	r2, r3, #6
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	061b      	lsls	r3, r3, #24
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	071b      	lsls	r3, r3, #28
 80057fe:	4944      	ldr	r1, [pc, #272]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005806:	4b42      	ldr	r3, [pc, #264]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	3b01      	subs	r3, #1
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	493d      	ldr	r1, [pc, #244]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d022      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005834:	d11d      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005836:	4b36      	ldr	r3, [pc, #216]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	0e1b      	lsrs	r3, r3, #24
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005844:	4b32      	ldr	r3, [pc, #200]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	0f1b      	lsrs	r3, r3, #28
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	019a      	lsls	r2, r3, #6
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	431a      	orrs	r2, r3
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	061b      	lsls	r3, r3, #24
 8005864:	431a      	orrs	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	071b      	lsls	r3, r3, #28
 800586a:	4929      	ldr	r1, [pc, #164]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d028      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800587e:	4b24      	ldr	r3, [pc, #144]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	0e1b      	lsrs	r3, r3, #24
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800588c:	4b20      	ldr	r3, [pc, #128]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	0c1b      	lsrs	r3, r3, #16
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	019a      	lsls	r2, r3, #6
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	431a      	orrs	r2, r3
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	061b      	lsls	r3, r3, #24
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	071b      	lsls	r3, r3, #28
 80058b2:	4917      	ldr	r1, [pc, #92]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	4911      	ldr	r1, [pc, #68]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a0e      	ldr	r2, [pc, #56]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058dc:	f7fb ff34 	bl	8001748 <HAL_GetTick>
 80058e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058e4:	f7fb ff30 	bl	8001748 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	; 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e007      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005902:	d1ef      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e01d      	b.n	8005962 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fb fd48 	bl	80013d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 f966 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2201      	movs	r2, #1
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fc4e 	bl	8006220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <HAL_TIM_PWM_Start+0x7c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_TIM_PWM_Start+0x2c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a16      	ldr	r2, [pc, #88]	; (80059ec <HAL_TIM_PWM_Start+0x80>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_TIM_PWM_Start+0x30>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_TIM_PWM_Start+0x32>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <HAL_TIM_PWM_Start+0x84>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d00b      	beq.n	80059dc <HAL_TIM_PWM_Start+0x70>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d007      	beq.n	80059dc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400
 80059f0:	00010007 	.word	0x00010007

080059f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e105      	b.n	8005c1a <HAL_TIM_PWM_ConfigChannel+0x226>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b14      	cmp	r3, #20
 8005a22:	f200 80f0 	bhi.w	8005c06 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	08005c07 	.word	0x08005c07
 8005a34:	08005c07 	.word	0x08005c07
 8005a38:	08005c07 	.word	0x08005c07
 8005a3c:	08005ac1 	.word	0x08005ac1
 8005a40:	08005c07 	.word	0x08005c07
 8005a44:	08005c07 	.word	0x08005c07
 8005a48:	08005c07 	.word	0x08005c07
 8005a4c:	08005b03 	.word	0x08005b03
 8005a50:	08005c07 	.word	0x08005c07
 8005a54:	08005c07 	.word	0x08005c07
 8005a58:	08005c07 	.word	0x08005c07
 8005a5c:	08005b43 	.word	0x08005b43
 8005a60:	08005c07 	.word	0x08005c07
 8005a64:	08005c07 	.word	0x08005c07
 8005a68:	08005c07 	.word	0x08005c07
 8005a6c:	08005b85 	.word	0x08005b85
 8005a70:	08005c07 	.word	0x08005c07
 8005a74:	08005c07 	.word	0x08005c07
 8005a78:	08005c07 	.word	0x08005c07
 8005a7c:	08005bc5 	.word	0x08005bc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f96c 	bl	8005d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0208 	orr.w	r2, r2, #8
 8005a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0204 	bic.w	r2, r2, #4
 8005aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6999      	ldr	r1, [r3, #24]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	619a      	str	r2, [r3, #24]
      break;
 8005abe:	e0a3      	b.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f9be 	bl	8005e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6999      	ldr	r1, [r3, #24]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	619a      	str	r2, [r3, #24]
      break;
 8005b00:	e082      	b.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fa15 	bl	8005f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0208 	orr.w	r2, r2, #8
 8005b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0204 	bic.w	r2, r2, #4
 8005b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69d9      	ldr	r1, [r3, #28]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	61da      	str	r2, [r3, #28]
      break;
 8005b40:	e062      	b.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fa6b 	bl	8006024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	021a      	lsls	r2, r3, #8
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	61da      	str	r2, [r3, #28]
      break;
 8005b82:	e041      	b.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 faa2 	bl	80060d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0204 	bic.w	r2, r2, #4
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bc2:	e021      	b.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fad4 	bl	8006178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	021a      	lsls	r2, r3, #8
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c04:	e000      	b.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005c06:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a40      	ldr	r2, [pc, #256]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3d      	ldr	r2, [pc, #244]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3c      	ldr	r2, [pc, #240]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3b      	ldr	r2, [pc, #236]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3a      	ldr	r2, [pc, #232]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d027      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d023      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2a      	ldr	r2, [pc, #168]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d017      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a28      	ldr	r2, [pc, #160]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a27      	ldr	r2, [pc, #156]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d007      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a24      	ldr	r2, [pc, #144]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <TIM_Base_SetConfig+0x13c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d103      	bne.n	8005d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	615a      	str	r2, [r3, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800
 8005d58:	40001800 	.word	0x40001800
 8005d5c:	40001c00 	.word	0x40001c00
 8005d60:	40002000 	.word	0x40002000

08005d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <TIM_OC1_SetConfig+0xd8>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0302 	bic.w	r3, r3, #2
 8005dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <TIM_OC1_SetConfig+0xdc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC1_SetConfig+0x64>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <TIM_OC1_SetConfig+0xe0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10c      	bne.n	8005de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0308 	bic.w	r3, r3, #8
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 0304 	bic.w	r3, r3, #4
 8005de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC1_SetConfig+0xdc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_OC1_SetConfig+0x8e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <TIM_OC1_SetConfig+0xe0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d111      	bne.n	8005e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	fffeff8f 	.word	0xfffeff8f
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40010400 	.word	0x40010400

08005e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0210 	bic.w	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4b2e      	ldr	r3, [pc, #184]	; (8005f2c <TIM_OC2_SetConfig+0xe4>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0320 	bic.w	r3, r3, #32
 8005e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a23      	ldr	r2, [pc, #140]	; (8005f30 <TIM_OC2_SetConfig+0xe8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_OC2_SetConfig+0x68>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <TIM_OC2_SetConfig+0xec>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d10d      	bne.n	8005ecc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <TIM_OC2_SetConfig+0xe8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_OC2_SetConfig+0x94>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <TIM_OC2_SetConfig+0xec>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d113      	bne.n	8005f04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	feff8fff 	.word	0xfeff8fff
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40010400 	.word	0x40010400

08005f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <TIM_OC3_SetConfig+0xe0>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a22      	ldr	r2, [pc, #136]	; (800601c <TIM_OC3_SetConfig+0xe4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_OC3_SetConfig+0x66>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a21      	ldr	r2, [pc, #132]	; (8006020 <TIM_OC3_SetConfig+0xe8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d10d      	bne.n	8005fba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a17      	ldr	r2, [pc, #92]	; (800601c <TIM_OC3_SetConfig+0xe4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_OC3_SetConfig+0x92>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a16      	ldr	r2, [pc, #88]	; (8006020 <TIM_OC3_SetConfig+0xe8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d113      	bne.n	8005ff2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	621a      	str	r2, [r3, #32]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	fffeff8f 	.word	0xfffeff8f
 800601c:	40010000 	.word	0x40010000
 8006020:	40010400 	.word	0x40010400

08006024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <TIM_OC4_SetConfig+0xa4>)
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800606e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <TIM_OC4_SetConfig+0xa8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC4_SetConfig+0x68>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a12      	ldr	r2, [pc, #72]	; (80060d0 <TIM_OC4_SetConfig+0xac>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d109      	bne.n	80060a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	019b      	lsls	r3, r3, #6
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	feff8fff 	.word	0xfeff8fff
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40010400 	.word	0x40010400

080060d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4b1b      	ldr	r3, [pc, #108]	; (800616c <TIM_OC5_SetConfig+0x98>)
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	041b      	lsls	r3, r3, #16
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a12      	ldr	r2, [pc, #72]	; (8006170 <TIM_OC5_SetConfig+0x9c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d003      	beq.n	8006132 <TIM_OC5_SetConfig+0x5e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a11      	ldr	r2, [pc, #68]	; (8006174 <TIM_OC5_SetConfig+0xa0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d109      	bne.n	8006146 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	621a      	str	r2, [r3, #32]
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	fffeff8f 	.word	0xfffeff8f
 8006170:	40010000 	.word	0x40010000
 8006174:	40010400 	.word	0x40010400

08006178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <TIM_OC6_SetConfig+0x9c>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	051b      	lsls	r3, r3, #20
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a13      	ldr	r2, [pc, #76]	; (8006218 <TIM_OC6_SetConfig+0xa0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC6_SetConfig+0x60>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a12      	ldr	r2, [pc, #72]	; (800621c <TIM_OC6_SetConfig+0xa4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d109      	bne.n	80061ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	029b      	lsls	r3, r3, #10
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	feff8fff 	.word	0xfeff8fff
 8006218:	40010000 	.word	0x40010000
 800621c:	40010400 	.word	0x40010400

08006220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2201      	movs	r2, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1a      	ldr	r2, [r3, #32]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	431a      	orrs	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e06d      	b.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a30      	ldr	r2, [pc, #192]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2f      	ldr	r2, [pc, #188]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a20      	ldr	r2, [pc, #128]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d022      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f6:	d01d      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1d      	ldr	r2, [pc, #116]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d018      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1a      	ldr	r2, [pc, #104]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00e      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d009      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a16      	ldr	r2, [pc, #88]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d10c      	bne.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40014000 	.word	0x40014000
 8006384:	40001800 	.word	0x40001800

08006388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e040      	b.n	800641c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb f864 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2224      	movs	r2, #36	; 0x24
 80063b4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f82c 	bl	8006424 <UART_SetConfig>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e022      	b.n	800641c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 faca 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb51 	bl	8006abc <UART_CheckIdleState>
 800641a:	4603      	mov	r3, r0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800642c:	2300      	movs	r3, #0
 800642e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4bb1      	ldr	r3, [pc, #708]	; (8006718 <UART_SetConfig+0x2f4>)
 8006454:	4013      	ands	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	6939      	ldr	r1, [r7, #16]
 800645c:	430b      	orrs	r3, r1
 800645e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a9f      	ldr	r2, [pc, #636]	; (800671c <UART_SetConfig+0x2f8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d121      	bne.n	80064e8 <UART_SetConfig+0xc4>
 80064a4:	4b9e      	ldr	r3, [pc, #632]	; (8006720 <UART_SetConfig+0x2fc>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d816      	bhi.n	80064e0 <UART_SetConfig+0xbc>
 80064b2:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <UART_SetConfig+0x94>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064d5 	.word	0x080064d5
 80064c0:	080064cf 	.word	0x080064cf
 80064c4:	080064db 	.word	0x080064db
 80064c8:	2301      	movs	r3, #1
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e151      	b.n	8006772 <UART_SetConfig+0x34e>
 80064ce:	2302      	movs	r3, #2
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e14e      	b.n	8006772 <UART_SetConfig+0x34e>
 80064d4:	2304      	movs	r3, #4
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e14b      	b.n	8006772 <UART_SetConfig+0x34e>
 80064da:	2308      	movs	r3, #8
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e148      	b.n	8006772 <UART_SetConfig+0x34e>
 80064e0:	2310      	movs	r3, #16
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	bf00      	nop
 80064e6:	e144      	b.n	8006772 <UART_SetConfig+0x34e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a8d      	ldr	r2, [pc, #564]	; (8006724 <UART_SetConfig+0x300>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d134      	bne.n	800655c <UART_SetConfig+0x138>
 80064f2:	4b8b      	ldr	r3, [pc, #556]	; (8006720 <UART_SetConfig+0x2fc>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f003 030c 	and.w	r3, r3, #12
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d829      	bhi.n	8006554 <UART_SetConfig+0x130>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0xe4>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800653d 	.word	0x0800653d
 800650c:	08006555 	.word	0x08006555
 8006510:	08006555 	.word	0x08006555
 8006514:	08006555 	.word	0x08006555
 8006518:	08006549 	.word	0x08006549
 800651c:	08006555 	.word	0x08006555
 8006520:	08006555 	.word	0x08006555
 8006524:	08006555 	.word	0x08006555
 8006528:	08006543 	.word	0x08006543
 800652c:	08006555 	.word	0x08006555
 8006530:	08006555 	.word	0x08006555
 8006534:	08006555 	.word	0x08006555
 8006538:	0800654f 	.word	0x0800654f
 800653c:	2300      	movs	r3, #0
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e117      	b.n	8006772 <UART_SetConfig+0x34e>
 8006542:	2302      	movs	r3, #2
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e114      	b.n	8006772 <UART_SetConfig+0x34e>
 8006548:	2304      	movs	r3, #4
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e111      	b.n	8006772 <UART_SetConfig+0x34e>
 800654e:	2308      	movs	r3, #8
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e10e      	b.n	8006772 <UART_SetConfig+0x34e>
 8006554:	2310      	movs	r3, #16
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	bf00      	nop
 800655a:	e10a      	b.n	8006772 <UART_SetConfig+0x34e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a71      	ldr	r2, [pc, #452]	; (8006728 <UART_SetConfig+0x304>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d120      	bne.n	80065a8 <UART_SetConfig+0x184>
 8006566:	4b6e      	ldr	r3, [pc, #440]	; (8006720 <UART_SetConfig+0x2fc>)
 8006568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006570:	2b10      	cmp	r3, #16
 8006572:	d00f      	beq.n	8006594 <UART_SetConfig+0x170>
 8006574:	2b10      	cmp	r3, #16
 8006576:	d802      	bhi.n	800657e <UART_SetConfig+0x15a>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <UART_SetConfig+0x164>
 800657c:	e010      	b.n	80065a0 <UART_SetConfig+0x17c>
 800657e:	2b20      	cmp	r3, #32
 8006580:	d005      	beq.n	800658e <UART_SetConfig+0x16a>
 8006582:	2b30      	cmp	r3, #48	; 0x30
 8006584:	d009      	beq.n	800659a <UART_SetConfig+0x176>
 8006586:	e00b      	b.n	80065a0 <UART_SetConfig+0x17c>
 8006588:	2300      	movs	r3, #0
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e0f1      	b.n	8006772 <UART_SetConfig+0x34e>
 800658e:	2302      	movs	r3, #2
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e0ee      	b.n	8006772 <UART_SetConfig+0x34e>
 8006594:	2304      	movs	r3, #4
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e0eb      	b.n	8006772 <UART_SetConfig+0x34e>
 800659a:	2308      	movs	r3, #8
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e0e8      	b.n	8006772 <UART_SetConfig+0x34e>
 80065a0:	2310      	movs	r3, #16
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	bf00      	nop
 80065a6:	e0e4      	b.n	8006772 <UART_SetConfig+0x34e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5f      	ldr	r2, [pc, #380]	; (800672c <UART_SetConfig+0x308>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d120      	bne.n	80065f4 <UART_SetConfig+0x1d0>
 80065b2:	4b5b      	ldr	r3, [pc, #364]	; (8006720 <UART_SetConfig+0x2fc>)
 80065b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d00f      	beq.n	80065e0 <UART_SetConfig+0x1bc>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d802      	bhi.n	80065ca <UART_SetConfig+0x1a6>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <UART_SetConfig+0x1b0>
 80065c8:	e010      	b.n	80065ec <UART_SetConfig+0x1c8>
 80065ca:	2b80      	cmp	r3, #128	; 0x80
 80065cc:	d005      	beq.n	80065da <UART_SetConfig+0x1b6>
 80065ce:	2bc0      	cmp	r3, #192	; 0xc0
 80065d0:	d009      	beq.n	80065e6 <UART_SetConfig+0x1c2>
 80065d2:	e00b      	b.n	80065ec <UART_SetConfig+0x1c8>
 80065d4:	2300      	movs	r3, #0
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e0cb      	b.n	8006772 <UART_SetConfig+0x34e>
 80065da:	2302      	movs	r3, #2
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e0c8      	b.n	8006772 <UART_SetConfig+0x34e>
 80065e0:	2304      	movs	r3, #4
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e0c5      	b.n	8006772 <UART_SetConfig+0x34e>
 80065e6:	2308      	movs	r3, #8
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e0c2      	b.n	8006772 <UART_SetConfig+0x34e>
 80065ec:	2310      	movs	r3, #16
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	bf00      	nop
 80065f2:	e0be      	b.n	8006772 <UART_SetConfig+0x34e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a4d      	ldr	r2, [pc, #308]	; (8006730 <UART_SetConfig+0x30c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d124      	bne.n	8006648 <UART_SetConfig+0x224>
 80065fe:	4b48      	ldr	r3, [pc, #288]	; (8006720 <UART_SetConfig+0x2fc>)
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660c:	d012      	beq.n	8006634 <UART_SetConfig+0x210>
 800660e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006612:	d802      	bhi.n	800661a <UART_SetConfig+0x1f6>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <UART_SetConfig+0x204>
 8006618:	e012      	b.n	8006640 <UART_SetConfig+0x21c>
 800661a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661e:	d006      	beq.n	800662e <UART_SetConfig+0x20a>
 8006620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006624:	d009      	beq.n	800663a <UART_SetConfig+0x216>
 8006626:	e00b      	b.n	8006640 <UART_SetConfig+0x21c>
 8006628:	2300      	movs	r3, #0
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e0a1      	b.n	8006772 <UART_SetConfig+0x34e>
 800662e:	2302      	movs	r3, #2
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e09e      	b.n	8006772 <UART_SetConfig+0x34e>
 8006634:	2304      	movs	r3, #4
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e09b      	b.n	8006772 <UART_SetConfig+0x34e>
 800663a:	2308      	movs	r3, #8
 800663c:	77fb      	strb	r3, [r7, #31]
 800663e:	e098      	b.n	8006772 <UART_SetConfig+0x34e>
 8006640:	2310      	movs	r3, #16
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	bf00      	nop
 8006646:	e094      	b.n	8006772 <UART_SetConfig+0x34e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a39      	ldr	r2, [pc, #228]	; (8006734 <UART_SetConfig+0x310>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d124      	bne.n	800669c <UART_SetConfig+0x278>
 8006652:	4b33      	ldr	r3, [pc, #204]	; (8006720 <UART_SetConfig+0x2fc>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006660:	d012      	beq.n	8006688 <UART_SetConfig+0x264>
 8006662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006666:	d802      	bhi.n	800666e <UART_SetConfig+0x24a>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <UART_SetConfig+0x258>
 800666c:	e012      	b.n	8006694 <UART_SetConfig+0x270>
 800666e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006672:	d006      	beq.n	8006682 <UART_SetConfig+0x25e>
 8006674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006678:	d009      	beq.n	800668e <UART_SetConfig+0x26a>
 800667a:	e00b      	b.n	8006694 <UART_SetConfig+0x270>
 800667c:	2301      	movs	r3, #1
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e077      	b.n	8006772 <UART_SetConfig+0x34e>
 8006682:	2302      	movs	r3, #2
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e074      	b.n	8006772 <UART_SetConfig+0x34e>
 8006688:	2304      	movs	r3, #4
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e071      	b.n	8006772 <UART_SetConfig+0x34e>
 800668e:	2308      	movs	r3, #8
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e06e      	b.n	8006772 <UART_SetConfig+0x34e>
 8006694:	2310      	movs	r3, #16
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	bf00      	nop
 800669a:	e06a      	b.n	8006772 <UART_SetConfig+0x34e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a25      	ldr	r2, [pc, #148]	; (8006738 <UART_SetConfig+0x314>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d124      	bne.n	80066f0 <UART_SetConfig+0x2cc>
 80066a6:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <UART_SetConfig+0x2fc>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b4:	d012      	beq.n	80066dc <UART_SetConfig+0x2b8>
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ba:	d802      	bhi.n	80066c2 <UART_SetConfig+0x29e>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <UART_SetConfig+0x2ac>
 80066c0:	e012      	b.n	80066e8 <UART_SetConfig+0x2c4>
 80066c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c6:	d006      	beq.n	80066d6 <UART_SetConfig+0x2b2>
 80066c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066cc:	d009      	beq.n	80066e2 <UART_SetConfig+0x2be>
 80066ce:	e00b      	b.n	80066e8 <UART_SetConfig+0x2c4>
 80066d0:	2300      	movs	r3, #0
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e04d      	b.n	8006772 <UART_SetConfig+0x34e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e04a      	b.n	8006772 <UART_SetConfig+0x34e>
 80066dc:	2304      	movs	r3, #4
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e047      	b.n	8006772 <UART_SetConfig+0x34e>
 80066e2:	2308      	movs	r3, #8
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e044      	b.n	8006772 <UART_SetConfig+0x34e>
 80066e8:	2310      	movs	r3, #16
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	bf00      	nop
 80066ee:	e040      	b.n	8006772 <UART_SetConfig+0x34e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a11      	ldr	r2, [pc, #68]	; (800673c <UART_SetConfig+0x318>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d139      	bne.n	800676e <UART_SetConfig+0x34a>
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <UART_SetConfig+0x2fc>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006708:	d027      	beq.n	800675a <UART_SetConfig+0x336>
 800670a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800670e:	d817      	bhi.n	8006740 <UART_SetConfig+0x31c>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01c      	beq.n	800674e <UART_SetConfig+0x32a>
 8006714:	e027      	b.n	8006766 <UART_SetConfig+0x342>
 8006716:	bf00      	nop
 8006718:	efff69f3 	.word	0xefff69f3
 800671c:	40011000 	.word	0x40011000
 8006720:	40023800 	.word	0x40023800
 8006724:	40004400 	.word	0x40004400
 8006728:	40004800 	.word	0x40004800
 800672c:	40004c00 	.word	0x40004c00
 8006730:	40005000 	.word	0x40005000
 8006734:	40011400 	.word	0x40011400
 8006738:	40007800 	.word	0x40007800
 800673c:	40007c00 	.word	0x40007c00
 8006740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006744:	d006      	beq.n	8006754 <UART_SetConfig+0x330>
 8006746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800674a:	d009      	beq.n	8006760 <UART_SetConfig+0x33c>
 800674c:	e00b      	b.n	8006766 <UART_SetConfig+0x342>
 800674e:	2300      	movs	r3, #0
 8006750:	77fb      	strb	r3, [r7, #31]
 8006752:	e00e      	b.n	8006772 <UART_SetConfig+0x34e>
 8006754:	2302      	movs	r3, #2
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e00b      	b.n	8006772 <UART_SetConfig+0x34e>
 800675a:	2304      	movs	r3, #4
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e008      	b.n	8006772 <UART_SetConfig+0x34e>
 8006760:	2308      	movs	r3, #8
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e005      	b.n	8006772 <UART_SetConfig+0x34e>
 8006766:	2310      	movs	r3, #16
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	bf00      	nop
 800676c:	e001      	b.n	8006772 <UART_SetConfig+0x34e>
 800676e:	2310      	movs	r3, #16
 8006770:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	d17f      	bne.n	800687c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800677c:	7ffb      	ldrb	r3, [r7, #31]
 800677e:	2b08      	cmp	r3, #8
 8006780:	d85c      	bhi.n	800683c <UART_SetConfig+0x418>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x364>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067ad 	.word	0x080067ad
 800678c:	080067cd 	.word	0x080067cd
 8006790:	080067ed 	.word	0x080067ed
 8006794:	0800683d 	.word	0x0800683d
 8006798:	08006805 	.word	0x08006805
 800679c:	0800683d 	.word	0x0800683d
 80067a0:	0800683d 	.word	0x0800683d
 80067a4:	0800683d 	.word	0x0800683d
 80067a8:	08006825 	.word	0x08006825
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fe fc64 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 80067b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	005a      	lsls	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	61bb      	str	r3, [r7, #24]
        break;
 80067ca:	e03a      	b.n	8006842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fe fc68 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 80067d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	005a      	lsls	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	61bb      	str	r3, [r7, #24]
        break;
 80067ea:	e02a      	b.n	8006842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	085a      	lsrs	r2, r3, #1
 80067f2:	4b5f      	ldr	r3, [pc, #380]	; (8006970 <UART_SetConfig+0x54c>)
 80067f4:	4413      	add	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6852      	ldr	r2, [r2, #4]
 80067fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80067fe:	b29b      	uxth	r3, r3
 8006800:	61bb      	str	r3, [r7, #24]
        break;
 8006802:	e01e      	b.n	8006842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006804:	f7fe fb54 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8006808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	005a      	lsls	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	441a      	add	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	b29b      	uxth	r3, r3
 8006820:	61bb      	str	r3, [r7, #24]
        break;
 8006822:	e00e      	b.n	8006842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	fbb2 f3f3 	udiv	r3, r2, r3
 8006836:	b29b      	uxth	r3, r3
 8006838:	61bb      	str	r3, [r7, #24]
        break;
 800683a:	e002      	b.n	8006842 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]
        break;
 8006840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b0f      	cmp	r3, #15
 8006846:	d916      	bls.n	8006876 <UART_SetConfig+0x452>
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800684e:	d212      	bcs.n	8006876 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f023 030f 	bic.w	r3, r3, #15
 8006858:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	b29a      	uxth	r2, r3
 8006866:	897b      	ldrh	r3, [r7, #10]
 8006868:	4313      	orrs	r3, r2
 800686a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	897a      	ldrh	r2, [r7, #10]
 8006872:	60da      	str	r2, [r3, #12]
 8006874:	e070      	b.n	8006958 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	75fb      	strb	r3, [r7, #23]
 800687a:	e06d      	b.n	8006958 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800687c:	7ffb      	ldrb	r3, [r7, #31]
 800687e:	2b08      	cmp	r3, #8
 8006880:	d859      	bhi.n	8006936 <UART_SetConfig+0x512>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <UART_SetConfig+0x464>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068cb 	.word	0x080068cb
 8006890:	080068e9 	.word	0x080068e9
 8006894:	08006937 	.word	0x08006937
 8006898:	08006901 	.word	0x08006901
 800689c:	08006937 	.word	0x08006937
 80068a0:	08006937 	.word	0x08006937
 80068a4:	08006937 	.word	0x08006937
 80068a8:	0800691f 	.word	0x0800691f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ac:	f7fe fbe4 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 80068b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	085a      	lsrs	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	441a      	add	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	61bb      	str	r3, [r7, #24]
        break;
 80068c8:	e038      	b.n	800693c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ca:	f7fe fbe9 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 80068ce:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	085a      	lsrs	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	61bb      	str	r3, [r7, #24]
        break;
 80068e6:	e029      	b.n	800693c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	085a      	lsrs	r2, r3, #1
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <UART_SetConfig+0x550>)
 80068f0:	4413      	add	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6852      	ldr	r2, [r2, #4]
 80068f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	61bb      	str	r3, [r7, #24]
        break;
 80068fe:	e01d      	b.n	800693c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006900:	f7fe fad6 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8006904:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	085a      	lsrs	r2, r3, #1
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	441a      	add	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	b29b      	uxth	r3, r3
 800691a:	61bb      	str	r3, [r7, #24]
        break;
 800691c:	e00e      	b.n	800693c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	085b      	lsrs	r3, r3, #1
 8006924:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	61bb      	str	r3, [r7, #24]
        break;
 8006934:	e002      	b.n	800693c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
        break;
 800693a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b0f      	cmp	r3, #15
 8006940:	d908      	bls.n	8006954 <UART_SetConfig+0x530>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006948:	d204      	bcs.n	8006954 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	e001      	b.n	8006958 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	01e84800 	.word	0x01e84800
 8006974:	00f42400 	.word	0x00f42400

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a76:	d10a      	bne.n	8006a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006aca:	f7fa fe3d 	bl	8001748 <HAL_GetTick>
 8006ace:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d10e      	bne.n	8006afc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f82a 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e020      	b.n	8006b3e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d10e      	bne.n	8006b28 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f814 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e00a      	b.n	8006b3e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b56:	e05d      	b.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d059      	beq.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b60:	f7fa fdf2 	bl	8001748 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d302      	bcc.n	8006b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d11b      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0201 	bic.w	r2, r2, #1
 8006b94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e042      	b.n	8006c34 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02b      	beq.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bca:	d123      	bne.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006be4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e00f      	b.n	8006c34 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	bf0c      	ite	eq
 8006c24:	2301      	moveq	r3, #1
 8006c26:	2300      	movne	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d092      	beq.n	8006b58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	f107 001c 	add.w	r0, r7, #28
 8006c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d120      	bne.n	8006c96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	4b20      	ldr	r3, [pc, #128]	; (8006ce8 <USB_CoreInit+0xac>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d105      	bne.n	8006c8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa52 	bl	8007134 <USB_CoreReset>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e010      	b.n	8006cb8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa46 	bl	8007134 <USB_CoreReset>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d10b      	bne.n	8006cd6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f043 0206 	orr.w	r2, r3, #6
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f043 0220 	orr.w	r2, r3, #32
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ce2:	b004      	add	sp, #16
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	ffbdffbf 	.word	0xffbdffbf

08006cec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f023 0201 	bic.w	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d106      	bne.n	8006d3a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	e00b      	b.n	8006d52 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60da      	str	r2, [r3, #12]
 8006d4c:	e001      	b.n	8006d52 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e003      	b.n	8006d5a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d52:	2032      	movs	r0, #50	; 0x32
 8006d54:	f7fa fd04 	bl	8001760 <HAL_Delay>

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d64:	b084      	sub	sp, #16
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e009      	b.n	8006d98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3340      	adds	r3, #64	; 0x40
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	3301      	adds	r3, #1
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b0e      	cmp	r3, #14
 8006d9c:	d9f2      	bls.n	8006d84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d11c      	bne.n	8006dde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db2:	f043 0302 	orr.w	r3, r3, #2
 8006db6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e005      	b.n	8006dea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006df0:	461a      	mov	r2, r3
 8006df2:	2300      	movs	r3, #0
 8006df4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e04:	461a      	mov	r2, r3
 8006e06:	680b      	ldr	r3, [r1, #0]
 8006e08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10c      	bne.n	8006e2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e16:	2100      	movs	r1, #0
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f959 	bl	80070d0 <USB_SetDevSpeed>
 8006e1e:	e018      	b.n	8006e52 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e20:	2101      	movs	r1, #1
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f954 	bl	80070d0 <USB_SetDevSpeed>
 8006e28:	e013      	b.n	8006e52 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d10c      	bne.n	8006e4a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f949 	bl	80070d0 <USB_SetDevSpeed>
 8006e3e:	e008      	b.n	8006e52 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e40:	2101      	movs	r1, #1
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f944 	bl	80070d0 <USB_SetDevSpeed>
 8006e48:	e003      	b.n	8006e52 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f93f 	bl	80070d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e52:	2110      	movs	r1, #16
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8f3 	bl	8007040 <USB_FlushTxFifo>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f911 	bl	800708c <USB_FlushRxFifo>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	461a      	mov	r2, r3
 8006e88:	2300      	movs	r3, #0
 8006e8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e92:	461a      	mov	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	e043      	b.n	8006f26 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb4:	d118      	bne.n	8006ee8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	e013      	b.n	8006efa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e008      	b.n	8006efa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	461a      	mov	r2, r3
 8006f08:	2300      	movs	r3, #0
 8006f0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3301      	adds	r3, #1
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d3b7      	bcc.n	8006e9e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e043      	b.n	8006fbc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f4a:	d118      	bne.n	8006f7e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e013      	b.n	8006f90 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	461a      	mov	r2, r3
 8006f76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	e008      	b.n	8006f90 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d3b7      	bcc.n	8006f34 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fe4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d105      	bne.n	8006ff8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f043 0210 	orr.w	r2, r3, #16
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <USB_DevInit+0x2d4>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f043 0208 	orr.w	r2, r3, #8
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d105      	bne.n	8007028 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699a      	ldr	r2, [r3, #24]
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <USB_DevInit+0x2d8>)
 8007022:	4313      	orrs	r3, r2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007034:	b004      	add	sp, #16
 8007036:	4770      	bx	lr
 8007038:	803c3800 	.word	0x803c3800
 800703c:	40000004 	.word	0x40000004

08007040 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	019b      	lsls	r3, r3, #6
 8007052:	f043 0220 	orr.w	r2, r3, #32
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <USB_FlushTxFifo+0x48>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e006      	b.n	800707a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b20      	cmp	r3, #32
 8007076:	d0f0      	beq.n	800705a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	00030d40 	.word	0x00030d40

0800708c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2210      	movs	r2, #16
 800709c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4a09      	ldr	r2, [pc, #36]	; (80070cc <USB_FlushRxFifo+0x40>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d901      	bls.n	80070b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e006      	b.n	80070be <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d0f0      	beq.n	800709e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	00030d40 	.word	0x00030d40

080070d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800711c:	f043 0302 	orr.w	r3, r3, #2
 8007120:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007122:	2003      	movs	r0, #3
 8007124:	f7fa fb1c 	bl	8001760 <HAL_Delay>

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a13      	ldr	r2, [pc, #76]	; (8007198 <USB_CoreReset+0x64>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e01b      	b.n	800718a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	daf2      	bge.n	8007140 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f043 0201 	orr.w	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3301      	adds	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a09      	ldr	r2, [pc, #36]	; (8007198 <USB_CoreReset+0x64>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e006      	b.n	800718a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b01      	cmp	r3, #1
 8007186:	d0f0      	beq.n	800716a <USB_CoreReset+0x36>

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	00030d40 	.word	0x00030d40

0800719c <__libc_init_array>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0d      	ldr	r6, [pc, #52]	; (80071d4 <__libc_init_array+0x38>)
 80071a0:	4c0d      	ldr	r4, [pc, #52]	; (80071d8 <__libc_init_array+0x3c>)
 80071a2:	1ba4      	subs	r4, r4, r6
 80071a4:	10a4      	asrs	r4, r4, #2
 80071a6:	2500      	movs	r5, #0
 80071a8:	42a5      	cmp	r5, r4
 80071aa:	d109      	bne.n	80071c0 <__libc_init_array+0x24>
 80071ac:	4e0b      	ldr	r6, [pc, #44]	; (80071dc <__libc_init_array+0x40>)
 80071ae:	4c0c      	ldr	r4, [pc, #48]	; (80071e0 <__libc_init_array+0x44>)
 80071b0:	f000 f820 	bl	80071f4 <_init>
 80071b4:	1ba4      	subs	r4, r4, r6
 80071b6:	10a4      	asrs	r4, r4, #2
 80071b8:	2500      	movs	r5, #0
 80071ba:	42a5      	cmp	r5, r4
 80071bc:	d105      	bne.n	80071ca <__libc_init_array+0x2e>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071c4:	4798      	blx	r3
 80071c6:	3501      	adds	r5, #1
 80071c8:	e7ee      	b.n	80071a8 <__libc_init_array+0xc>
 80071ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071ce:	4798      	blx	r3
 80071d0:	3501      	adds	r5, #1
 80071d2:	e7f2      	b.n	80071ba <__libc_init_array+0x1e>
 80071d4:	08007234 	.word	0x08007234
 80071d8:	08007234 	.word	0x08007234
 80071dc:	08007234 	.word	0x08007234
 80071e0:	08007238 	.word	0x08007238

080071e4 <memset>:
 80071e4:	4402      	add	r2, r0
 80071e6:	4603      	mov	r3, r0
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d100      	bne.n	80071ee <memset+0xa>
 80071ec:	4770      	bx	lr
 80071ee:	f803 1b01 	strb.w	r1, [r3], #1
 80071f2:	e7f9      	b.n	80071e8 <memset+0x4>

080071f4 <_init>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr

08007200 <_fini>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr
