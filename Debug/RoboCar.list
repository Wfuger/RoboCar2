
RoboCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c6c  08006c6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c74  08006c74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000000c  08006c88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08006c88  00020778  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014530  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a29  00000000  00000000  0003456a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  00036f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  00038288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029215  00000000  00000000  00039420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f9bb  00000000  00000000  00062635  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001032b9  00000000  00000000  00071ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001752a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005030  00000000  00000000  00175324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006c34 	.word	0x08006c34

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006c34 	.word	0x08006c34

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fe05 	bl	800114a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f820 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 fa10 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 f9f0 	bl	800092c <MX_DMA_Init>
  MX_ETH_Init();
 800054c:	f000 f8e6 	bl	800071c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f98e 	bl	8000870 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f9bc 	bl	80008d0 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8000558:	f000 f8aa 	bl	80006b0 <MX_DCMI_Init>
  MX_TIM2_Init();
 800055c:	f000 f91e 	bl	800079c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000560:	2100      	movs	r1, #0
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <main+0x40>)
 8000564:	f004 ff22 	bl	80053ac <HAL_TIM_PWM_Start>
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, img, 100);
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <main+0x44>)
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	2100      	movs	r1, #0
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <main+0x48>)
 8000570:	f000 fff6 	bl	8001560 <HAL_DCMI_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x3c>
 8000576:	bf00      	nop
 8000578:	200006ec 	.word	0x200006ec
 800057c:	20000028 	.word	0x20000028
 8000580:	2000069c 	.word	0x2000069c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0b8      	sub	sp, #224	; 0xe0
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800058e:	2234      	movs	r2, #52	; 0x34
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f006 fb46 	bl	8006c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2290      	movs	r2, #144	; 0x90
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f006 fb37 	bl	8006c24 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005b6:	f003 fda1 	bl	80040fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b3a      	ldr	r3, [pc, #232]	; (80006a4 <SystemClock_Config+0x120>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a39      	ldr	r2, [pc, #228]	; (80006a4 <SystemClock_Config+0x120>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
 80005c6:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <SystemClock_Config+0x120>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d2:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <SystemClock_Config+0x124>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005da:	4a33      	ldr	r2, [pc, #204]	; (80006a8 <SystemClock_Config+0x124>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <SystemClock_Config+0x124>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060a:	2304      	movs	r3, #4
 800060c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fdc8 	bl	80041bc <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000632:	f000 fa47 	bl	8000ac4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000636:	f003 fd71 	bl	800411c <HAL_PWREx_EnableOverDrive>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000640:	f000 fa40 	bl	8000ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000664:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000668:	2103      	movs	r1, #3
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f854 	bl	8004718 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000676:	f000 fa25 	bl	8000ac4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <SystemClock_Config+0x128>)
 800067c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800067e:	2300      	movs	r3, #0
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fa3b 	bl	8004b08 <HAL_RCCEx_PeriphCLKConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000698:	f000 fa14 	bl	8000ac4 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	37e0      	adds	r7, #224	; 0xe0
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000
 80006ac:	00200100 	.word	0x00200100

080006b0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_DCMI_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_DCMI_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_DCMI_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_DCMI_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_DCMI_Init+0x64>)
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_DCMI_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_DCMI_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_DCMI_Init+0x64>)
 80006da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006de:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_DCMI_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_DCMI_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_DCMI_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_DCMI_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_DCMI_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_DCMI_Init+0x64>)
 8000700:	f000 feb4 	bl	800146c <HAL_DCMI_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 800070a:	f000 f9db 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000069c 	.word	0x2000069c
 8000718:	50050000 	.word	0x50050000

0800071c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ETH_Init+0x78>)
 8000722:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <MX_ETH_Init+0x7c>)
 8000724:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ETH_Init+0x78>)
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ETH_Init+0x78>)
 800072e:	2200      	movs	r2, #0
 8000730:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_ETH_Init+0x78>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ETH_Init+0x78>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	3301      	adds	r3, #1
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ETH_Init+0x78>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	3302      	adds	r3, #2
 800074a:	22e1      	movs	r2, #225	; 0xe1
 800074c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ETH_Init+0x78>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	3303      	adds	r3, #3
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_ETH_Init+0x78>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	3304      	adds	r3, #4
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_ETH_Init+0x78>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	3305      	adds	r3, #5
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_ETH_Init+0x78>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_ETH_Init+0x78>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_ETH_Init+0x78>)
 800077a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800077e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_ETH_Init+0x78>)
 8000782:	f002 fd43 	bl	800320c <HAL_ETH_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800078c:	f000 f99a 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000072c 	.word	0x2000072c
 8000798:	40028000 	.word	0x40028000

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08e      	sub	sp, #56	; 0x38
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  int frequency = 900000;
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <MX_TIM2_Init+0xcc>)
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  int pclk = HAL_RCC_GetPCLK2Freq();
 80007a6:	f004 f99b 	bl	8004ae0 <HAL_RCC_GetPCLK2Freq>
 80007aa:	4603      	mov	r3, r0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  int period = (pclk / frequency) - 1;
 80007ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80007b6:	3b01      	subs	r3, #1
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_TIM2_Init+0xd0>)
 80007da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_TIM2_Init+0xd0>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_TIM2_Init+0xd0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = period;
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <MX_TIM2_Init+0xd0>)
 80007f0:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_TIM2_Init+0xd0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_TIM2_Init+0xd0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007fe:	481b      	ldr	r0, [pc, #108]	; (800086c <MX_TIM2_Init+0xd0>)
 8000800:	f004 fda8 	bl	8005354 <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800080a:	f000 f95b 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4619      	mov	r1, r3
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_TIM2_Init+0xd0>)
 800081e:	f005 fa45 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000828:	f000 f94c 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = period / 2;
 8000830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <MX_TIM2_Init+0x9c>
 8000836:	3301      	adds	r3, #1
 8000838:	105b      	asrs	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <MX_TIM2_Init+0xd0>)
 800084c:	f004 fdf2 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000856:	f000 f935 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_TIM2_Init+0xd0>)
 800085c:	f000 fb28 	bl	8000eb0 <HAL_TIM_MspPostInit>

}
 8000860:	bf00      	nop
 8000862:	3738      	adds	r7, #56	; 0x38
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	000dbba0 	.word	0x000dbba0
 800086c:	200006ec 	.word	0x200006ec

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART3_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008b4:	f005 fa88 	bl	8005dc8 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f901 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001b8 	.word	0x200001b8
 80008cc:	40004800 	.word	0x40004800

080008d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2206      	movs	r2, #6
 80008e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2201      	movs	r2, #1
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	f003 faa9 	bl	8003e6a <HAL_PCD_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f8d1 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000238 	.word	0x20000238

0800092c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_DMA_Init+0x38>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <MX_DMA_Init+0x38>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_DMA_Init+0x38>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2039      	movs	r0, #57	; 0x39
 8000950:	f000 fd55 	bl	80013fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000954:	2039      	movs	r0, #57	; 0x39
 8000956:	f000 fd6e 	bl	8001436 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <MX_GPIO_Init+0x148>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a4b      	ldr	r2, [pc, #300]	; (8000ab0 <MX_GPIO_Init+0x148>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <MX_GPIO_Init+0x148>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <MX_GPIO_Init+0x148>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <MX_GPIO_Init+0x148>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a39      	ldr	r2, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b34      	ldr	r3, [pc, #208]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x148>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_GPIO_Init+0x148>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_GPIO_Init+0x148>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x148>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0x148>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SIOC_Pin|LD2_Pin 
 8000a26:	2200      	movs	r2, #0
 8000a28:	f244 21c1 	movw	r1, #17089	; 0x42c1
 8000a2c:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000a2e:	f003 fa03 	bl	8003e38 <HAL_GPIO_WritePin>
                          |SIOD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0x150>)
 8000a38:	f003 f9fe 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_GPIO_Init+0x154>)
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0x158>)
 8000a52:	f003 f847 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SIOC_Pin LD2_Pin 
                           SIOD_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SIOC_Pin|LD2_Pin 
 8000a56:	f244 23c1 	movw	r3, #17089	; 0x42c1
 8000a5a:	61fb      	str	r3, [r7, #28]
                          |SIOD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000a70:	f003 f838 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_GPIO_Init+0x150>)
 8000a8c:	f003 f82a 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_GPIO_Init+0x150>)
 8000aa4:	f003 f81e 	bl	8003ae4 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40021800 	.word	0x40021800
 8000abc:	10110000 	.word	0x10110000
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a69      	ldr	r2, [pc, #420]	; (8000ce0 <HAL_DCMI_MspInit+0x1c4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	f040 80cb 	bne.w	8000cd6 <HAL_DCMI_MspInit+0x1ba>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000b40:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b44:	4a67      	ldr	r2, [pc, #412]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b4c:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
 8000b56:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b58:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a61      	ldr	r2, [pc, #388]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a5b      	ldr	r2, [pc, #364]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b59      	ldr	r3, [pc, #356]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a55      	ldr	r2, [pc, #340]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a49      	ldr	r2, [pc, #292]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <HAL_DCMI_MspInit+0x1c8>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> DCMI_D8
    PC12     ------> DCMI_D9
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bd0:	2370      	movs	r3, #112	; 0x70
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000be0:	230d      	movs	r3, #13
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	483f      	ldr	r0, [pc, #252]	; (8000ce8 <HAL_DCMI_MspInit+0x1cc>)
 8000bec:	f002 ff7a 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000bf0:	2350      	movs	r3, #80	; 0x50
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c00:	230d      	movs	r3, #13
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4838      	ldr	r0, [pc, #224]	; (8000cec <HAL_DCMI_MspInit+0x1d0>)
 8000c0c:	f002 ff6a 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8000c10:	f44f 53be 	mov.w	r3, #6080	; 0x17c0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c22:	230d      	movs	r3, #13
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <HAL_DCMI_MspInit+0x1d4>)
 8000c2e:	f002 ff59 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c32:	2308      	movs	r3, #8
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c42:	230d      	movs	r3, #13
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <HAL_DCMI_MspInit+0x1d8>)
 8000c4e:	f002 ff49 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c64:	230d      	movs	r3, #13
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4822      	ldr	r0, [pc, #136]	; (8000cf8 <HAL_DCMI_MspInit+0x1dc>)
 8000c70:	f002 ff38 	bl	8003ae4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000c76:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <HAL_DCMI_MspInit+0x1e4>)
 8000c78:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c80:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c94:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c9c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000ca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ca4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb2:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000cbc:	f000 fdba 	bl	8001834 <HAL_DMA_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_DCMI_MspInit+0x1ae>
    {
      Error_Handler();
 8000cc6:	f7ff fefd 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000cce:	649a      	str	r2, [r3, #72]	; 0x48
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_DCMI_MspInit+0x1e0>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	; 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	50050000 	.word	0x50050000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	40021800 	.word	0x40021800
 8000cfc:	2000063c 	.word	0x2000063c
 8000d00:	40026428 	.word	0x40026428

08000d04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a4e      	ldr	r2, [pc, #312]	; (8000e5c <HAL_ETH_MspInit+0x158>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	f040 8096 	bne.w	8000e54 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d28:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
 8000d34:	4b4a      	ldr	r3, [pc, #296]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a40      	ldr	r2, [pc, #256]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d70:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a3a      	ldr	r2, [pc, #232]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <HAL_ETH_MspInit+0x15c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dd0:	2332      	movs	r3, #50	; 0x32
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de0:	230b      	movs	r3, #11
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <HAL_ETH_MspInit+0x160>)
 8000dec:	f002 fe7a 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000df0:	2386      	movs	r3, #134	; 0x86
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e00:	230b      	movs	r3, #11
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4817      	ldr	r0, [pc, #92]	; (8000e68 <HAL_ETH_MspInit+0x164>)
 8000e0c:	f002 fe6a 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e22:	230b      	movs	r3, #11
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <HAL_ETH_MspInit+0x168>)
 8000e2e:	f002 fe59 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e44:	230b      	movs	r3, #11
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <HAL_ETH_MspInit+0x16c>)
 8000e50:	f002 fe48 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3738      	adds	r7, #56	; 0x38
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40028000 	.word	0x40028000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40021800 	.word	0x40021800

08000e74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d10b      	bne.n	8000e9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_TIM_PWM_MspInit+0x38>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_TIM_PWM_MspInit+0x38>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_TIM_PWM_MspInit+0x38>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed0:	d11b      	bne.n	8000f0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_TIM_MspPostInit+0x64>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_TIM_MspPostInit+0x64>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_TIM_MspPostInit+0x64>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <HAL_TIM_MspPostInit+0x68>)
 8000f06:	f002 fded 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_UART_MspInit+0x7c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d128      	bne.n	8000f90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0x80>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <HAL_UART_MspInit+0x80>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_MspInit+0x80>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0x80>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_UART_MspInit+0x80>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_UART_MspInit+0x80>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f80:	2307      	movs	r3, #7
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0x84>)
 8000f8c:	f002 fdaa 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc4:	d141      	bne.n	800104a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4817      	ldr	r0, [pc, #92]	; (8001058 <HAL_PCD_MspInit+0xb4>)
 8000ffc:	f002 fd72 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_PCD_MspInit+0xb4>)
 8001016:	f002 fd65 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 800101c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	6353      	str	r3, [r2, #52]	; 0x34
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_PCD_MspInit+0xb0>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f888 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA2_Stream1_IRQHandler+0x10>)
 80010be:	f000 fcc7 	bl	8001a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000063c 	.word	0x2000063c

080010cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <SystemInit+0x28>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <SystemInit+0x28>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SystemInit+0x28>)
 80010e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e6:	609a      	str	r2, [r3, #8]
#endif
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010fe:	e003      	b.n	8001108 <LoopCopyDataInit>

08001100 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001102:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001104:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001106:	3104      	adds	r1, #4

08001108 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800110c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800110e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001110:	d3f6      	bcc.n	8001100 <CopyDataInit>
  ldr  r2, =_sbss
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001114:	e002      	b.n	800111c <LoopFillZerobss>

08001116 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001116:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001118:	f842 3b04 	str.w	r3, [r2], #4

0800111c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800111e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001120:	d3f9      	bcc.n	8001116 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001122:	f7ff ffd3 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f005 fd59 	bl	8006bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fa05 	bl	8000538 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001134:	08006c7c 	.word	0x08006c7c
  ldr  r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800113c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001140:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001144:	20000778 	.word	0x20000778

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>

0800114a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114e:	2003      	movs	r0, #3
 8001150:	f000 f94a 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001154:	2000      	movs	r0, #0
 8001156:	f000 f805 	bl	8001164 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800115a:	f7ff fcbb 	bl	8000ad4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f965 	bl	8001452 <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f92d 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000774 	.word	0x20000774

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000774 	.word	0x20000774

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_Delay+0x40>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <__NVIC_SetPriorityGrouping+0x40>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	4313      	orrs	r3, r2
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x40>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	05fa0000 	.word	0x05fa0000

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff8e 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff29 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff3e 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff8e 	bl	800133c <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff31 	bl	80012ac <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa2 	bl	80013a4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e069      	b.n	8001552 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fb46 	bl	8000b1c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6819      	ldr	r1, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_DCMI_Init+0xf0>)
 80014b2:	400b      	ands	r3, r1
 80014b4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80014ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80014d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80014e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80014ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80014fa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d112      	bne.n	8001532 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7f1b      	ldrb	r3, [r3, #28]
 8001510:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7f5b      	ldrb	r3, [r3, #29]
 8001516:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001518:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7f9b      	ldrb	r3, [r3, #30]
 800151e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001520:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7fdb      	ldrb	r3, [r3, #31]
 8001528:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800152e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001530:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 021e 	orr.w	r2, r2, #30
 8001540:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	ffe0f007 	.word	0xffe0f007

08001560 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af02      	add	r7, sp, #8
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_DCMI_Start_DMA+0x20>
 800157c:	2302      	movs	r3, #2
 800157e:	e095      	b.n	80016ac <HAL_DCMI_Start_DMA+0x14c>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800159e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0202 	bic.w	r2, r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <HAL_DCMI_Start_DMA+0x154>)
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <HAL_DCMI_Start_DMA+0x158>)
 80015ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d4:	2200      	movs	r2, #0
 80015d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d20e      	bcs.n	8001616 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3328      	adds	r3, #40	; 0x28
 8001602:	4619      	mov	r1, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	f000 f9c2 	bl	8001990 <HAL_DMA_Start_IT>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d03f      	beq.n	8001692 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e04a      	b.n	80016ac <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <HAL_DCMI_Start_DMA+0x154>)
 800161c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001630:	e009      	b.n	8001646 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001636:	085a      	lsrs	r2, r3, #1
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	005a      	lsls	r2, r3, #1
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164e:	d2f0      	bcs.n	8001632 <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001654:	1e9a      	subs	r2, r3, #2
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3328      	adds	r3, #40	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	f000 fc4c 	bl	8001f20 <HAL_DMAEx_MultiBufferStart_IT>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00c      	b.n	80016ac <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	080016d1 	.word	0x080016d1
 80016b8:	080017fb 	.word	0x080017fb

080016bc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d043      	beq.n	8001772 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f6:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d118      	bne.n	8001736 <DCMI_DMAXferCplt+0x66>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d015      	beq.n	8001736 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	00da      	lsls	r2, r3, #3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4413      	add	r3, r2
 8001722:	2200      	movs	r2, #0
 8001724:	4619      	mov	r1, r3
 8001726:	f001 fd31 	bl	800318c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	1e5a      	subs	r2, r3, #1
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	639a      	str	r2, [r3, #56]	; 0x38
 8001734:	e044      	b.n	80017c0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d13c      	bne.n	80017c0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001758:	00da      	lsls	r2, r3, #3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	2201      	movs	r2, #1
 8001760:	4619      	mov	r1, r3
 8001762:	f001 fd13 	bl	800318c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	639a      	str	r2, [r3, #56]	; 0x38
 8001770:	e026      	b.n	80017c0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	e017      	b.n	80017c0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10f      	bne.n	80017c0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	440a      	add	r2, r1
 80017b6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d112      	bne.n	80017f2 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d103      	bne.n	80017f2 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	2b02      	cmp	r3, #2
 8001810:	d009      	beq.n	8001826 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff ff48 	bl	80016bc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff fcd4 	bl	80011ec <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e099      	b.n	8001984 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001870:	e00f      	b.n	8001892 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001872:	f7ff fcbb 	bl	80011ec <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b05      	cmp	r3, #5
 800187e:	d908      	bls.n	8001892 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2220      	movs	r2, #32
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2203      	movs	r2, #3
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e078      	b.n	8001984 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1e8      	bne.n	8001872 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_DMA_Init+0x158>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4313      	orrs	r3, r2
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f023 0307 	bic.w	r3, r3, #7
 8001912:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	2b04      	cmp	r3, #4
 8001924:	d117      	bne.n	8001956 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00e      	beq.n	8001956 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fa77 	bl	8001e2c <DMA_CheckFifoParam>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001952:	2301      	movs	r3, #1
 8001954:	e016      	b.n	8001984 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fa2e 	bl	8001dc0 <DMA_CalcBaseAndBitshift>
 8001964:	4603      	mov	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	223f      	movs	r2, #63	; 0x3f
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	e010803f 	.word	0xe010803f

08001990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_DMA_Start_IT+0x26>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e048      	b.n	8001a48 <HAL_DMA_Start_IT+0xb8>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d137      	bne.n	8001a3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2202      	movs	r2, #2
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f9c0 	bl	8001d64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	223f      	movs	r2, #63	; 0x3f
 80019ea:	409a      	lsls	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0216 	orr.w	r2, r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a0e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0208 	orr.w	r2, r2, #8
 8001a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e005      	b.n	8001a46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
 8001a44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a5c:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <HAL_DMA_IRQHandler+0x258>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a92      	ldr	r2, [pc, #584]	; (8001cac <HAL_DMA_IRQHandler+0x25c>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0a9b      	lsrs	r3, r3, #10
 8001a68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0204 	bic.w	r2, r2, #4
 8001aa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d012      	beq.n	8001af2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2201      	movs	r2, #1
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	2204      	movs	r2, #4
 8001af8:	409a      	lsls	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2204      	movs	r2, #4
 8001b16:	409a      	lsls	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d043      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03c      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d024      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4798      	blx	r3
 8001b7e:	e01f      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
 8001b90:	e016      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0208 	bic.w	r2, r2, #8
 8001bae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 808e 	beq.w	8001cee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8086 	beq.w	8001cee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2220      	movs	r2, #32
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d136      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0216 	bic.w	r2, r2, #22
 8001c08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x1da>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0208 	bic.w	r2, r2, #8
 8001c38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	223f      	movs	r2, #63	; 0x3f
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d07d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
        }
        return;
 8001c66:	e078      	b.n	8001d5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01c      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d108      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d030      	beq.n	8001cee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
 8001c94:	e02b      	b.n	8001cee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d027      	beq.n	8001cee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
 8001ca6:	e022      	b.n	8001cee <HAL_DMA_IRQHandler+0x29e>
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0210 	bic.w	r2, r2, #16
 8001ccc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d032      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2205      	movs	r2, #5
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d307      	bcc.n	8001d36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f2      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x2ca>
 8001d34:	e000      	b.n	8001d38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e000      	b.n	8001d5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d5a:	bf00      	nop
    }
  }
}
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop

08001d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d108      	bne.n	8001da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001da2:	e007      	b.n	8001db4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3b10      	subs	r3, #16
 8001dd0:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <DMA_CalcBaseAndBitshift+0x60>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <DMA_CalcBaseAndBitshift+0x64>)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d908      	bls.n	8001e00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <DMA_CalcBaseAndBitshift+0x68>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	1d1a      	adds	r2, r3, #4
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58
 8001dfe:	e006      	b.n	8001e0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <DMA_CalcBaseAndBitshift+0x68>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	aaaaaaab 	.word	0xaaaaaaab
 8001e24:	08006c64 	.word	0x08006c64
 8001e28:	fffffc00 	.word	0xfffffc00

08001e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11f      	bne.n	8001e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d855      	bhi.n	8001ef8 <DMA_CheckFifoParam+0xcc>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <DMA_CheckFifoParam+0x28>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e77 	.word	0x08001e77
 8001e5c:	08001e65 	.word	0x08001e65
 8001e60:	08001ef9 	.word	0x08001ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d045      	beq.n	8001efc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e74:	e042      	b.n	8001efc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7e:	d13f      	bne.n	8001f00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e84:	e03c      	b.n	8001f00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8e:	d121      	bne.n	8001ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d836      	bhi.n	8001f04 <DMA_CheckFifoParam+0xd8>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <DMA_CheckFifoParam+0x70>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001eb3 	.word	0x08001eb3
 8001ea4:	08001ead 	.word	0x08001ead
 8001ea8:	08001ec5 	.word	0x08001ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb0:	e02f      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec2:	e021      	b.n	8001f08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ecc:	d11e      	bne.n	8001f0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed2:	e01b      	b.n	8001f0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <DMA_CheckFifoParam+0xb4>
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d003      	beq.n	8001ee6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ede:	e018      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e015      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00e      	beq.n	8001f10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef6:	e00b      	b.n	8001f10 <DMA_CheckFifoParam+0xe4>
      break;
 8001ef8:	bf00      	nop
 8001efa:	e00a      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001efc:	bf00      	nop
 8001efe:	e008      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f00:	bf00      	nop
 8001f02:	e006      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f04:	bf00      	nop
 8001f06:	e004      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f08:	bf00      	nop
 8001f0a:	e002      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001f0c:	bf00      	nop
 8001f0e:	e000      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f10:	bf00      	nop
    }
  } 
  
  return status; 
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d106      	bne.n	8001f48 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f001 b901 	b.w	800314a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8001f52:	2302      	movs	r3, #2
 8001f54:	f001 b8f9 	b.w	800314a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f041 80e7 	bne.w	800313c <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f8a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f001 f910 	bl	80031c0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b99      	ldr	r3, [pc, #612]	; (800220c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d960      	bls.n	800206e <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a97      	ldr	r2, [pc, #604]	; (8002210 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d057      	beq.n	8002066 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a96      	ldr	r2, [pc, #600]	; (8002214 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d050      	beq.n	8002062 <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a94      	ldr	r2, [pc, #592]	; (8002218 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d049      	beq.n	800205e <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a93      	ldr	r2, [pc, #588]	; (800221c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d042      	beq.n	800205a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a91      	ldr	r2, [pc, #580]	; (8002220 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d03a      	beq.n	8002054 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a90      	ldr	r2, [pc, #576]	; (8002224 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d032      	beq.n	800204e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a8e      	ldr	r2, [pc, #568]	; (8002228 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02a      	beq.n	8002048 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a8d      	ldr	r2, [pc, #564]	; (800222c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a8b      	ldr	r2, [pc, #556]	; (8002230 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01a      	beq.n	800203c <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a8a      	ldr	r2, [pc, #552]	; (8002234 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d012      	beq.n	8002036 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a88      	ldr	r2, [pc, #544]	; (8002238 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00a      	beq.n	8002030 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a87      	ldr	r2, [pc, #540]	; (800223c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d102      	bne.n	800202a <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8002024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002028:	e01e      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800202a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800202e:	e01b      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002030:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002034:	e018      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002036:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800203a:	e015      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800203c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002040:	e012      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002046:	e00f      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800204c:	e00c      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800204e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002052:	e009      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002058:	e006      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800205a:	2320      	movs	r3, #32
 800205c:	e004      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800205e:	2320      	movs	r3, #32
 8002060:	e002      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002062:	2320      	movs	r3, #32
 8002064:	e000      	b.n	8002068 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002066:	2320      	movs	r3, #32
 8002068:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800206a:	60d3      	str	r3, [r2, #12]
 800206c:	e150      	b.n	8002310 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002076:	429a      	cmp	r2, r3
 8002078:	d960      	bls.n	800213c <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a64      	ldr	r2, [pc, #400]	; (8002210 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d057      	beq.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a62      	ldr	r2, [pc, #392]	; (8002214 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d050      	beq.n	8002130 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a61      	ldr	r2, [pc, #388]	; (8002218 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d049      	beq.n	800212c <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a5f      	ldr	r2, [pc, #380]	; (800221c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d042      	beq.n	8002128 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a5e      	ldr	r2, [pc, #376]	; (8002220 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d03a      	beq.n	8002122 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5c      	ldr	r2, [pc, #368]	; (8002224 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d032      	beq.n	800211c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5b      	ldr	r2, [pc, #364]	; (8002228 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d02a      	beq.n	8002116 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a59      	ldr	r2, [pc, #356]	; (800222c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d022      	beq.n	8002110 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a58      	ldr	r2, [pc, #352]	; (8002230 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d01a      	beq.n	800210a <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d012      	beq.n	8002104 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a55      	ldr	r2, [pc, #340]	; (8002238 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00a      	beq.n	80020fe <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a53      	ldr	r2, [pc, #332]	; (800223c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d102      	bne.n	80020f8 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 80020f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020f6:	e01e      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80020f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80020fc:	e01b      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80020fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002102:	e018      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002104:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002108:	e015      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800210a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800210e:	e012      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002114:	e00f      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800211a:	e00c      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800211c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002120:	e009      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002126:	e006      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002128:	2320      	movs	r3, #32
 800212a:	e004      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800212c:	2320      	movs	r3, #32
 800212e:	e002      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002130:	2320      	movs	r3, #32
 8002132:	e000      	b.n	8002136 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002134:	2320      	movs	r3, #32
 8002136:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002138:	6093      	str	r3, [r2, #8]
 800213a:	e0e9      	b.n	8002310 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002144:	429a      	cmp	r2, r3
 8002146:	f240 8083 	bls.w	8002250 <HAL_DMAEx_MultiBufferStart_IT+0x330>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a30      	ldr	r2, [pc, #192]	; (8002210 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d057      	beq.n	8002204 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d050      	beq.n	8002200 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2d      	ldr	r2, [pc, #180]	; (8002218 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d049      	beq.n	80021fc <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2b      	ldr	r2, [pc, #172]	; (800221c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d042      	beq.n	80021f8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d03a      	beq.n	80021f2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d032      	beq.n	80021ec <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d02a      	beq.n	80021e6 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a25      	ldr	r2, [pc, #148]	; (800222c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d022      	beq.n	80021e0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a24      	ldr	r2, [pc, #144]	; (8002230 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d01a      	beq.n	80021da <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a22      	ldr	r2, [pc, #136]	; (8002234 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d012      	beq.n	80021d4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00a      	beq.n	80021ce <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d102      	bne.n	80021c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 80021c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021c6:	e01e      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021cc:	e01b      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d2:	e018      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d8:	e015      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021de:	e012      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021e4:	e00f      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021ea:	e00c      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f0:	e009      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f6:	e006      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021f8:	2320      	movs	r3, #32
 80021fa:	e004      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80021fc:	2320      	movs	r3, #32
 80021fe:	e002      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002200:	2320      	movs	r3, #32
 8002202:	e000      	b.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8002204:	2320      	movs	r3, #32
 8002206:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002208:	60d3      	str	r3, [r2, #12]
 800220a:	e081      	b.n	8002310 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800220c:	40026458 	.word	0x40026458
 8002210:	40026010 	.word	0x40026010
 8002214:	40026410 	.word	0x40026410
 8002218:	40026070 	.word	0x40026070
 800221c:	40026470 	.word	0x40026470
 8002220:	40026028 	.word	0x40026028
 8002224:	40026428 	.word	0x40026428
 8002228:	40026088 	.word	0x40026088
 800222c:	40026488 	.word	0x40026488
 8002230:	40026040 	.word	0x40026040
 8002234:	40026440 	.word	0x40026440
 8002238:	400260a0 	.word	0x400260a0
 800223c:	400264a0 	.word	0x400264a0
 8002240:	40026400 	.word	0x40026400
 8002244:	400260b8 	.word	0x400260b8
 8002248:	40026058 	.word	0x40026058
 800224c:	40026000 	.word	0x40026000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a96      	ldr	r2, [pc, #600]	; (80024b0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d057      	beq.n	800230a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a95      	ldr	r2, [pc, #596]	; (80024b4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d050      	beq.n	8002306 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a93      	ldr	r2, [pc, #588]	; (80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d049      	beq.n	8002302 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a92      	ldr	r2, [pc, #584]	; (80024bc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d042      	beq.n	80022fe <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a90      	ldr	r2, [pc, #576]	; (80024c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d03a      	beq.n	80022f8 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a8f      	ldr	r2, [pc, #572]	; (80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d032      	beq.n	80022f2 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a8d      	ldr	r2, [pc, #564]	; (80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02a      	beq.n	80022ec <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a8c      	ldr	r2, [pc, #560]	; (80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d022      	beq.n	80022e6 <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a8a      	ldr	r2, [pc, #552]	; (80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01a      	beq.n	80022e0 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a89      	ldr	r2, [pc, #548]	; (80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d012      	beq.n	80022da <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a87      	ldr	r2, [pc, #540]	; (80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00a      	beq.n	80022d4 <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a86      	ldr	r2, [pc, #536]	; (80024dc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d102      	bne.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 80022c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022cc:	e01e      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022d2:	e01b      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022d8:	e018      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022de:	e015      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022e4:	e012      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022ea:	e00f      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f0:	e00c      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f6:	e009      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022fc:	e006      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 80022fe:	2320      	movs	r3, #32
 8002300:	e004      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002302:	2320      	movs	r3, #32
 8002304:	e002      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8002306:	2320      	movs	r3, #32
 8002308:	e000      	b.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 800230a:	2320      	movs	r3, #32
 800230c:	4a74      	ldr	r2, [pc, #464]	; (80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800230e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002318:	429a      	cmp	r2, r3
 800231a:	d960      	bls.n	80023de <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a63      	ldr	r2, [pc, #396]	; (80024b0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d057      	beq.n	80023d6 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a62      	ldr	r2, [pc, #392]	; (80024b4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d050      	beq.n	80023d2 <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a60      	ldr	r2, [pc, #384]	; (80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d049      	beq.n	80023ce <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a5f      	ldr	r2, [pc, #380]	; (80024bc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d042      	beq.n	80023ca <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a5d      	ldr	r2, [pc, #372]	; (80024c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d03a      	beq.n	80023c4 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5c      	ldr	r2, [pc, #368]	; (80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d032      	beq.n	80023be <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5a      	ldr	r2, [pc, #360]	; (80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02a      	beq.n	80023b8 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a59      	ldr	r2, [pc, #356]	; (80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x492>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01a      	beq.n	80023ac <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d012      	beq.n	80023a6 <HAL_DMAEx_MultiBufferStart_IT+0x486>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00a      	beq.n	80023a0 <HAL_DMAEx_MultiBufferStart_IT+0x480>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a53      	ldr	r2, [pc, #332]	; (80024dc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 8002394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002398:	e01e      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 800239a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800239e:	e01b      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023a4:	e018      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023aa:	e015      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023b0:	e012      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b6:	e00f      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023bc:	e00c      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c2:	e009      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c8:	e006      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023ca:	2310      	movs	r3, #16
 80023cc:	e004      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023ce:	2310      	movs	r3, #16
 80023d0:	e002      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023d2:	2310      	movs	r3, #16
 80023d4:	e000      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 80023d6:	2310      	movs	r3, #16
 80023d8:	4a43      	ldr	r2, [pc, #268]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80023da:	60d3      	str	r3, [r2, #12]
 80023dc:	e14f      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80023e6:	429a      	cmp	r2, r3
 80023e8:	f240 8082 	bls.w	80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d057      	beq.n	80024a6 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d050      	beq.n	80024a2 <HAL_DMAEx_MultiBufferStart_IT+0x582>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d049      	beq.n	800249e <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d042      	beq.n	800249a <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d03a      	beq.n	8002494 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d032      	beq.n	800248e <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d02a      	beq.n	8002488 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <HAL_DMAEx_MultiBufferStart_IT+0x562>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01a      	beq.n	800247c <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d012      	beq.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0x556>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00a      	beq.n	8002470 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d102      	bne.n	800246a <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 8002464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002468:	e01e      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800246a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800246e:	e01b      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8002470:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002474:	e018      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8002476:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800247a:	e015      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800247c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002480:	e012      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8002482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002486:	e00f      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8002488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248c:	e00c      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800248e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002492:	e009      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8002494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002498:	e006      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800249a:	2310      	movs	r3, #16
 800249c:	e004      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800249e:	2310      	movs	r3, #16
 80024a0:	e002      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80024a2:	2310      	movs	r3, #16
 80024a4:	e000      	b.n	80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 80024a6:	2310      	movs	r3, #16
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	e0e7      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80024ae:	bf00      	nop
 80024b0:	40026010 	.word	0x40026010
 80024b4:	40026410 	.word	0x40026410
 80024b8:	40026070 	.word	0x40026070
 80024bc:	40026470 	.word	0x40026470
 80024c0:	40026028 	.word	0x40026028
 80024c4:	40026428 	.word	0x40026428
 80024c8:	40026088 	.word	0x40026088
 80024cc:	40026488 	.word	0x40026488
 80024d0:	40026040 	.word	0x40026040
 80024d4:	40026440 	.word	0x40026440
 80024d8:	400260a0 	.word	0x400260a0
 80024dc:	400264a0 	.word	0x400264a0
 80024e0:	40026000 	.word	0x40026000
 80024e4:	40026458 	.word	0x40026458
 80024e8:	40026400 	.word	0x40026400
 80024ec:	400260b8 	.word	0x400260b8
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b96      	ldr	r3, [pc, #600]	; (8002750 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d960      	bls.n	80025be <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a94      	ldr	r2, [pc, #592]	; (8002754 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d057      	beq.n	80025b6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a93      	ldr	r2, [pc, #588]	; (8002758 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d050      	beq.n	80025b2 <HAL_DMAEx_MultiBufferStart_IT+0x692>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a91      	ldr	r2, [pc, #580]	; (800275c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d049      	beq.n	80025ae <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a90      	ldr	r2, [pc, #576]	; (8002760 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d042      	beq.n	80025aa <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a8e      	ldr	r2, [pc, #568]	; (8002764 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d03a      	beq.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a8d      	ldr	r2, [pc, #564]	; (8002768 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d032      	beq.n	800259e <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a8b      	ldr	r2, [pc, #556]	; (800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d02a      	beq.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a8a      	ldr	r2, [pc, #552]	; (8002770 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a88      	ldr	r2, [pc, #544]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01a      	beq.n	800258c <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a87      	ldr	r2, [pc, #540]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d012      	beq.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x666>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a85      	ldr	r2, [pc, #532]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00a      	beq.n	8002580 <HAL_DMAEx_MultiBufferStart_IT+0x660>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a84      	ldr	r2, [pc, #528]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d102      	bne.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 8002574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002578:	e01e      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800257a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800257e:	e01b      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002580:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002584:	e018      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002586:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800258a:	e015      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800258c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002590:	e012      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002596:	e00f      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8002598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259c:	e00c      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 800259e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a2:	e009      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80025a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a8:	e006      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80025aa:	2310      	movs	r3, #16
 80025ac:	e004      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80025ae:	2310      	movs	r3, #16
 80025b0:	e002      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80025b2:	2310      	movs	r3, #16
 80025b4:	e000      	b.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 80025b6:	2310      	movs	r3, #16
 80025b8:	4a72      	ldr	r2, [pc, #456]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80025ba:	60d3      	str	r3, [r2, #12]
 80025bc:	e05f      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a64      	ldr	r2, [pc, #400]	; (8002754 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d057      	beq.n	8002678 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a62      	ldr	r2, [pc, #392]	; (8002758 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d050      	beq.n	8002674 <HAL_DMAEx_MultiBufferStart_IT+0x754>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a61      	ldr	r2, [pc, #388]	; (800275c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d049      	beq.n	8002670 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d042      	beq.n	800266c <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5e      	ldr	r2, [pc, #376]	; (8002764 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d03a      	beq.n	8002666 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d032      	beq.n	8002660 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d02a      	beq.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a59      	ldr	r2, [pc, #356]	; (8002770 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01a      	beq.n	800264e <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a56      	ldr	r2, [pc, #344]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d012      	beq.n	8002648 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a55      	ldr	r2, [pc, #340]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00a      	beq.n	8002642 <HAL_DMAEx_MultiBufferStart_IT+0x722>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a53      	ldr	r2, [pc, #332]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d102      	bne.n	800263c <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 8002636:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800263a:	e01e      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800263c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002640:	e01b      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002642:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002646:	e018      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002648:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800264c:	e015      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800264e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002652:	e012      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002658:	e00f      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800265a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265e:	e00c      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002664:	e009      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266a:	e006      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 800266c:	2310      	movs	r3, #16
 800266e:	e004      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002670:	2310      	movs	r3, #16
 8002672:	e002      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002674:	2310      	movs	r3, #16
 8002676:	e000      	b.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8002678:	2310      	movs	r3, #16
 800267a:	4a42      	ldr	r2, [pc, #264]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800267c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002686:	429a      	cmp	r2, r3
 8002688:	f240 8082 	bls.w	8002790 <HAL_DMAEx_MultiBufferStart_IT+0x870>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a30      	ldr	r2, [pc, #192]	; (8002754 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d057      	beq.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2f      	ldr	r2, [pc, #188]	; (8002758 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d050      	beq.n	8002742 <HAL_DMAEx_MultiBufferStart_IT+0x822>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2d      	ldr	r2, [pc, #180]	; (800275c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d049      	beq.n	800273e <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d042      	beq.n	800273a <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d03a      	beq.n	8002734 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a29      	ldr	r2, [pc, #164]	; (8002768 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d032      	beq.n	800272e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02a      	beq.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMAEx_MultiBufferStart_IT+0x802>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01a      	beq.n	800271c <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d012      	beq.n	8002716 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00a      	beq.n	8002710 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d102      	bne.n	800270a <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8002704:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002708:	e01e      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 800270a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270e:	e01b      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002710:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002714:	e018      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002716:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800271a:	e015      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 800271c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002720:	e012      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002726:	e00f      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272c:	e00c      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 800272e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002732:	e009      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002738:	e006      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 800273a:	2308      	movs	r3, #8
 800273c:	e004      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 800273e:	2308      	movs	r3, #8
 8002740:	e002      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002742:	2308      	movs	r3, #8
 8002744:	e000      	b.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8002746:	2308      	movs	r3, #8
 8002748:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800274a:	60d3      	str	r3, [r2, #12]
 800274c:	e16f      	b.n	8002a2e <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 800274e:	bf00      	nop
 8002750:	40026058 	.word	0x40026058
 8002754:	40026010 	.word	0x40026010
 8002758:	40026410 	.word	0x40026410
 800275c:	40026070 	.word	0x40026070
 8002760:	40026470 	.word	0x40026470
 8002764:	40026028 	.word	0x40026028
 8002768:	40026428 	.word	0x40026428
 800276c:	40026088 	.word	0x40026088
 8002770:	40026488 	.word	0x40026488
 8002774:	40026040 	.word	0x40026040
 8002778:	40026440 	.word	0x40026440
 800277c:	400260a0 	.word	0x400260a0
 8002780:	400264a0 	.word	0x400264a0
 8002784:	40026000 	.word	0x40026000
 8002788:	40026458 	.word	0x40026458
 800278c:	40026400 	.word	0x40026400
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b94      	ldr	r3, [pc, #592]	; (80029e8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002798:	429a      	cmp	r2, r3
 800279a:	d960      	bls.n	800285e <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a92      	ldr	r2, [pc, #584]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d057      	beq.n	8002856 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a91      	ldr	r2, [pc, #580]	; (80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d050      	beq.n	8002852 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a8f      	ldr	r2, [pc, #572]	; (80029f4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d049      	beq.n	800284e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a8e      	ldr	r2, [pc, #568]	; (80029f8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d042      	beq.n	800284a <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a8c      	ldr	r2, [pc, #560]	; (80029fc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d03a      	beq.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a8b      	ldr	r2, [pc, #556]	; (8002a00 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d032      	beq.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a89      	ldr	r2, [pc, #548]	; (8002a04 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d02a      	beq.n	8002838 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a88      	ldr	r2, [pc, #544]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x912>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a86      	ldr	r2, [pc, #536]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01a      	beq.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a85      	ldr	r2, [pc, #532]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d012      	beq.n	8002826 <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a83      	ldr	r2, [pc, #524]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00a      	beq.n	8002820 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a82      	ldr	r2, [pc, #520]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8002814:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002818:	e01e      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800281a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281e:	e01b      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002820:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002824:	e018      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002826:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800282a:	e015      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800282c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002830:	e012      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002836:	e00f      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283c:	e00c      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800283e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002842:	e009      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002848:	e006      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800284a:	2308      	movs	r3, #8
 800284c:	e004      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800284e:	2308      	movs	r3, #8
 8002850:	e002      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002852:	2308      	movs	r3, #8
 8002854:	e000      	b.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8002856:	2308      	movs	r3, #8
 8002858:	4a70      	ldr	r2, [pc, #448]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800285a:	6093      	str	r3, [r2, #8]
 800285c:	e0e7      	b.n	8002a2e <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	4b6e      	ldr	r3, [pc, #440]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002866:	429a      	cmp	r2, r3
 8002868:	d960      	bls.n	800292c <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d057      	beq.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5d      	ldr	r2, [pc, #372]	; (80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d050      	beq.n	8002920 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d049      	beq.n	800291c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5a      	ldr	r2, [pc, #360]	; (80029f8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d042      	beq.n	8002918 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a59      	ldr	r2, [pc, #356]	; (80029fc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d03a      	beq.n	8002912 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d032      	beq.n	800290c <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d02a      	beq.n	8002906 <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d022      	beq.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a53      	ldr	r2, [pc, #332]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d01a      	beq.n	80028fa <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a51      	ldr	r2, [pc, #324]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d012      	beq.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a50      	ldr	r2, [pc, #320]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00a      	beq.n	80028ee <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a4e      	ldr	r2, [pc, #312]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d102      	bne.n	80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 80028e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028e6:	e01e      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80028e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ec:	e01b      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80028ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028f2:	e018      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80028f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028f8:	e015      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80028fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028fe:	e012      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002904:	e00f      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290a:	e00c      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800290c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002910:	e009      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002916:	e006      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002918:	2308      	movs	r3, #8
 800291a:	e004      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800291c:	2308      	movs	r3, #8
 800291e:	e002      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002920:	2308      	movs	r3, #8
 8002922:	e000      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8002924:	2308      	movs	r3, #8
 8002926:	4a3f      	ldr	r2, [pc, #252]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002928:	60d3      	str	r3, [r2, #12]
 800292a:	e080      	b.n	8002a2e <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2e      	ldr	r2, [pc, #184]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d078      	beq.n	8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d050      	beq.n	80029e2 <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d049      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d042      	beq.n	80029da <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a28      	ldr	r2, [pc, #160]	; (80029fc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d03a      	beq.n	80029d4 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d032      	beq.n	80029ce <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02a      	beq.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d022      	beq.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01a      	beq.n	80029bc <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d012      	beq.n	80029b6 <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00a      	beq.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d102      	bne.n	80029aa <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 80029a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029a8:	e03f      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ae:	e03c      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029b4:	e039      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029ba:	e036      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029c0:	e033      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c6:	e030      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029cc:	e02d      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d2:	e02a      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d8:	e027      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029da:	2308      	movs	r3, #8
 80029dc:	e025      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029de:	2308      	movs	r3, #8
 80029e0:	e023      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029e2:	2308      	movs	r3, #8
 80029e4:	e021      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80029e6:	bf00      	nop
 80029e8:	400260b8 	.word	0x400260b8
 80029ec:	40026010 	.word	0x40026010
 80029f0:	40026410 	.word	0x40026410
 80029f4:	40026070 	.word	0x40026070
 80029f8:	40026470 	.word	0x40026470
 80029fc:	40026028 	.word	0x40026028
 8002a00:	40026428 	.word	0x40026428
 8002a04:	40026088 	.word	0x40026088
 8002a08:	40026488 	.word	0x40026488
 8002a0c:	40026040 	.word	0x40026040
 8002a10:	40026440 	.word	0x40026440
 8002a14:	400260a0 	.word	0x400260a0
 8002a18:	400264a0 	.word	0x400264a0
 8002a1c:	40026400 	.word	0x40026400
 8002a20:	40026058 	.word	0x40026058
 8002a24:	40026000 	.word	0x40026000
 8002a28:	2308      	movs	r3, #8
 8002a2a:	4a9a      	ldr	r2, [pc, #616]	; (8002c94 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002a2c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b98      	ldr	r3, [pc, #608]	; (8002c98 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d960      	bls.n	8002afc <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a97      	ldr	r2, [pc, #604]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d057      	beq.n	8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a95      	ldr	r2, [pc, #596]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d050      	beq.n	8002af0 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a94      	ldr	r2, [pc, #592]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d049      	beq.n	8002aec <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a92      	ldr	r2, [pc, #584]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d042      	beq.n	8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a91      	ldr	r2, [pc, #580]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d03a      	beq.n	8002ae2 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a8f      	ldr	r2, [pc, #572]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d032      	beq.n	8002adc <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d02a      	beq.n	8002ad6 <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a8c      	ldr	r2, [pc, #560]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d022      	beq.n	8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a8b      	ldr	r2, [pc, #556]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d01a      	beq.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a89      	ldr	r2, [pc, #548]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d012      	beq.n	8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a88      	ldr	r2, [pc, #544]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00a      	beq.n	8002abe <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a86      	ldr	r2, [pc, #536]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d102      	bne.n	8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 8002ab2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ab6:	e01e      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002abc:	e01b      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002abe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ac2:	e018      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ac8:	e015      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002aca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ace:	e012      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad4:	e00f      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ada:	e00c      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae0:	e009      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae6:	e006      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e004      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e002      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e000      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8002af4:	2304      	movs	r3, #4
 8002af6:	4a75      	ldr	r2, [pc, #468]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002af8:	60d3      	str	r3, [r2, #12]
 8002afa:	e151      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d960      	bls.n	8002bca <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a63      	ldr	r2, [pc, #396]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d057      	beq.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a62      	ldr	r2, [pc, #392]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d050      	beq.n	8002bbe <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a60      	ldr	r2, [pc, #384]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d049      	beq.n	8002bba <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d042      	beq.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a5d      	ldr	r2, [pc, #372]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d03a      	beq.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5c      	ldr	r2, [pc, #368]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d032      	beq.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a5a      	ldr	r2, [pc, #360]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02a      	beq.n	8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a59      	ldr	r2, [pc, #356]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01a      	beq.n	8002b98 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a56      	ldr	r2, [pc, #344]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d012      	beq.n	8002b92 <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a54      	ldr	r2, [pc, #336]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00a      	beq.n	8002b8c <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a53      	ldr	r2, [pc, #332]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8002b80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b84:	e01e      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b8a:	e01b      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b90:	e018      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002b92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b96:	e015      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002b98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b9c:	e012      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba2:	e00f      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba8:	e00c      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bae:	e009      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb4:	e006      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	e004      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e002      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	e000      	b.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	4a41      	ldr	r2, [pc, #260]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002bc6:	6093      	str	r3, [r2, #8]
 8002bc8:	e0ea      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	f240 8084 	bls.w	8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d07a      	beq.n	8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2e      	ldr	r2, [pc, #184]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d050      	beq.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d049      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d042      	beq.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03a      	beq.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d032      	beq.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d02a      	beq.n	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01a      	beq.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d012      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00a      	beq.n	8002c5c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d102      	bne.n	8002c56 <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 8002c50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c54:	e041      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c5a:	e03e      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c60:	e03b      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c66:	e038      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c6c:	e035      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c72:	e032      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c78:	e02f      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7e:	e02c      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c84:	e029      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e027      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e025      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e023      	b.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002c92:	bf00      	nop
 8002c94:	40026000 	.word	0x40026000
 8002c98:	40026458 	.word	0x40026458
 8002c9c:	40026010 	.word	0x40026010
 8002ca0:	40026410 	.word	0x40026410
 8002ca4:	40026070 	.word	0x40026070
 8002ca8:	40026470 	.word	0x40026470
 8002cac:	40026028 	.word	0x40026028
 8002cb0:	40026428 	.word	0x40026428
 8002cb4:	40026088 	.word	0x40026088
 8002cb8:	40026488 	.word	0x40026488
 8002cbc:	40026040 	.word	0x40026040
 8002cc0:	40026440 	.word	0x40026440
 8002cc4:	400260a0 	.word	0x400260a0
 8002cc8:	400264a0 	.word	0x400264a0
 8002ccc:	40026400 	.word	0x40026400
 8002cd0:	400260b8 	.word	0x400260b8
 8002cd4:	40026058 	.word	0x40026058
 8002cd8:	2304      	movs	r3, #4
 8002cda:	4a94      	ldr	r2, [pc, #592]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002cdc:	60d3      	str	r3, [r2, #12]
 8002cde:	e05f      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a92      	ldr	r2, [pc, #584]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d057      	beq.n	8002d9a <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a91      	ldr	r2, [pc, #580]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d050      	beq.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a8f      	ldr	r2, [pc, #572]	; (8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d049      	beq.n	8002d92 <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a8e      	ldr	r2, [pc, #568]	; (8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d042      	beq.n	8002d8e <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a8c      	ldr	r2, [pc, #560]	; (8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d03a      	beq.n	8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a8b      	ldr	r2, [pc, #556]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d032      	beq.n	8002d82 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a89      	ldr	r2, [pc, #548]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02a      	beq.n	8002d7c <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a88      	ldr	r2, [pc, #544]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a86      	ldr	r2, [pc, #536]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01a      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a85      	ldr	r2, [pc, #532]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d012      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a83      	ldr	r2, [pc, #524]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00a      	beq.n	8002d64 <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a82      	ldr	r2, [pc, #520]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 8002d58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d5c:	e01e      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d62:	e01b      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d68:	e018      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d6e:	e015      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d74:	e012      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7a:	e00f      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d80:	e00c      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d86:	e009      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8c:	e006      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d8e:	2304      	movs	r3, #4
 8002d90:	e004      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d92:	2304      	movs	r3, #4
 8002d94:	e002      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e000      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002d9e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b6e      	ldr	r3, [pc, #440]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d95c      	bls.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5f      	ldr	r2, [pc, #380]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d053      	beq.n	8002e5e <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5e      	ldr	r2, [pc, #376]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d04c      	beq.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5c      	ldr	r2, [pc, #368]	; (8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d045      	beq.n	8002e56 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5b      	ldr	r2, [pc, #364]	; (8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03e      	beq.n	8002e52 <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a59      	ldr	r2, [pc, #356]	; (8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d037      	beq.n	8002e4e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d030      	beq.n	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a56      	ldr	r2, [pc, #344]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d029      	beq.n	8002e46 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a55      	ldr	r2, [pc, #340]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01a      	beq.n	8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d012      	beq.n	8002e36 <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a50      	ldr	r2, [pc, #320]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00a      	beq.n	8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4f      	ldr	r2, [pc, #316]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d102      	bne.n	8002e2a <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 8002e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e28:	e01a      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e2e:	e017      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e34:	e014      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e3a:	e011      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e40:	e00e      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e42:	2340      	movs	r3, #64	; 0x40
 8002e44:	e00c      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e46:	2340      	movs	r3, #64	; 0x40
 8002e48:	e00a      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e4a:	2340      	movs	r3, #64	; 0x40
 8002e4c:	e008      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	e006      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e004      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e002      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002e62:	60d3      	str	r3, [r2, #12]
 8002e64:	e141      	b.n	80030ea <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d97c      	bls.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d053      	beq.n	8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d04c      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2b      	ldr	r2, [pc, #172]	; (8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d045      	beq.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a29      	ldr	r2, [pc, #164]	; (8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d03e      	beq.n	8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d037      	beq.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d030      	beq.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d029      	beq.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d022      	beq.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01a      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d012      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00a      	beq.n	8002ef6 <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d102      	bne.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 8002eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eee:	e01a      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002ef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ef4:	e017      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002efa:	e014      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f00:	e011      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f06:	e00e      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f08:	2340      	movs	r3, #64	; 0x40
 8002f0a:	e00c      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f0c:	2340      	movs	r3, #64	; 0x40
 8002f0e:	e00a      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f10:	2340      	movs	r3, #64	; 0x40
 8002f12:	e008      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f14:	2340      	movs	r3, #64	; 0x40
 8002f16:	e006      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e004      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e002      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f24:	2301      	movs	r3, #1
 8002f26:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002f28:	6093      	str	r3, [r2, #8]
 8002f2a:	e0de      	b.n	80030ea <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8002f2c:	40026000 	.word	0x40026000
 8002f30:	40026010 	.word	0x40026010
 8002f34:	40026410 	.word	0x40026410
 8002f38:	40026070 	.word	0x40026070
 8002f3c:	40026470 	.word	0x40026470
 8002f40:	40026028 	.word	0x40026028
 8002f44:	40026428 	.word	0x40026428
 8002f48:	40026088 	.word	0x40026088
 8002f4c:	40026488 	.word	0x40026488
 8002f50:	40026040 	.word	0x40026040
 8002f54:	40026440 	.word	0x40026440
 8002f58:	400260a0 	.word	0x400260a0
 8002f5c:	400264a0 	.word	0x400264a0
 8002f60:	40026458 	.word	0x40026458
 8002f64:	40026400 	.word	0x40026400
 8002f68:	400260b8 	.word	0x400260b8
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d95c      	bls.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a76      	ldr	r2, [pc, #472]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d053      	beq.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a75      	ldr	r2, [pc, #468]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04c      	beq.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a73      	ldr	r2, [pc, #460]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d045      	beq.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a72      	ldr	r2, [pc, #456]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03e      	beq.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a70      	ldr	r2, [pc, #448]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d037      	beq.n	800301a <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6f      	ldr	r2, [pc, #444]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d030      	beq.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6d      	ldr	r2, [pc, #436]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d029      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6c      	ldr	r2, [pc, #432]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d022      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6a      	ldr	r2, [pc, #424]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01a      	beq.n	8003008 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a69      	ldr	r2, [pc, #420]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d012      	beq.n	8003002 <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a67      	ldr	r2, [pc, #412]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00a      	beq.n	8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a66      	ldr	r2, [pc, #408]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d102      	bne.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 8002ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff4:	e01a      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8002ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ffa:	e017      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8002ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003000:	e014      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003006:	e011      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800300c:	e00e      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800300e:	2340      	movs	r3, #64	; 0x40
 8003010:	e00c      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003012:	2340      	movs	r3, #64	; 0x40
 8003014:	e00a      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003016:	2340      	movs	r3, #64	; 0x40
 8003018:	e008      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800301a:	2340      	movs	r3, #64	; 0x40
 800301c:	e006      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800301e:	2301      	movs	r3, #1
 8003020:	e004      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003022:	2301      	movs	r3, #1
 8003024:	e002      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800302a:	2301      	movs	r3, #1
 800302c:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800302e:	60d3      	str	r3, [r2, #12]
 8003030:	e05b      	b.n	80030ea <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d053      	beq.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a46      	ldr	r2, [pc, #280]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d04c      	beq.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a45      	ldr	r2, [pc, #276]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d045      	beq.n	80030dc <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a43      	ldr	r2, [pc, #268]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03e      	beq.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a42      	ldr	r2, [pc, #264]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d037      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d030      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d029      	beq.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3d      	ldr	r2, [pc, #244]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01a      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3a      	ldr	r2, [pc, #232]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d012      	beq.n	80030bc <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a39      	ldr	r2, [pc, #228]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a37      	ldr	r2, [pc, #220]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 80030aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ae:	e01a      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030b4:	e017      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ba:	e014      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	e011      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c6:	e00e      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030c8:	2340      	movs	r3, #64	; 0x40
 80030ca:	e00c      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030cc:	2340      	movs	r3, #64	; 0x40
 80030ce:	e00a      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030d0:	2340      	movs	r3, #64	; 0x40
 80030d2:	e008      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030d4:	2340      	movs	r3, #64	; 0x40
 80030d6:	e006      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030d8:	2301      	movs	r3, #1
 80030da:	e004      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030dc:	2301      	movs	r3, #1
 80030de:	e002      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4a28      	ldr	r2, [pc, #160]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80030e8:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0216 	orr.w	r2, r2, #22
 80030f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003108:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0208 	orr.w	r2, r2, #8
 8003128:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e005      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003144:	2302      	movs	r3, #2
 8003146:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40026058 	.word	0x40026058
 8003158:	40026010 	.word	0x40026010
 800315c:	40026410 	.word	0x40026410
 8003160:	40026070 	.word	0x40026070
 8003164:	40026470 	.word	0x40026470
 8003168:	40026028 	.word	0x40026028
 800316c:	40026428 	.word	0x40026428
 8003170:	40026088 	.word	0x40026088
 8003174:	40026488 	.word	0x40026488
 8003178:	40026040 	.word	0x40026040
 800317c:	40026440 	.word	0x40026440
 8003180:	400260a0 	.word	0x400260a0
 8003184:	400264a0 	.word	0x400264a0
 8003188:	40026000 	.word	0x40026000

0800318c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	e003      	b.n	80031b2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d108      	bne.n	80031f0 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ee:	e007      	b.n	8003200 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800321c:	4ba9      	ldr	r3, [pc, #676]	; (80034c4 <HAL_ETH_Init+0x2b8>)
 800321e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e183      	b.n	800353a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fd5c 	bl	8000d04 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324c:	4b9e      	ldr	r3, [pc, #632]	; (80034c8 <HAL_ETH_Init+0x2bc>)
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	4a9d      	ldr	r2, [pc, #628]	; (80034c8 <HAL_ETH_Init+0x2bc>)
 8003252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003256:	6453      	str	r3, [r2, #68]	; 0x44
 8003258:	4b9b      	ldr	r3, [pc, #620]	; (80034c8 <HAL_ETH_Init+0x2bc>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003264:	4b99      	ldr	r3, [pc, #612]	; (80034cc <HAL_ETH_Init+0x2c0>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a98      	ldr	r2, [pc, #608]	; (80034cc <HAL_ETH_Init+0x2c0>)
 800326a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800326e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003270:	4b96      	ldr	r3, [pc, #600]	; (80034cc <HAL_ETH_Init+0x2c0>)
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4994      	ldr	r1, [pc, #592]	; (80034cc <HAL_ETH_Init+0x2c0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003294:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003296:	f7fd ffa9 	bl	80011ec <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800329c:	e011      	b.n	80032c2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800329e:	f7fd ffa5 	bl	80011ec <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032ac:	d909      	bls.n	80032c2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e13b      	b.n	800353a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e4      	bne.n	800329e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f023 031c 	bic.w	r3, r3, #28
 80032e2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032e4:	f001 fbdc 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 80032e8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4a78      	ldr	r2, [pc, #480]	; (80034d0 <HAL_ETH_Init+0x2c4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d908      	bls.n	8003304 <HAL_ETH_Init+0xf8>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4a77      	ldr	r2, [pc, #476]	; (80034d4 <HAL_ETH_Init+0x2c8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d804      	bhi.n	8003304 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f043 0308 	orr.w	r3, r3, #8
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e027      	b.n	8003354 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4a73      	ldr	r2, [pc, #460]	; (80034d4 <HAL_ETH_Init+0x2c8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d908      	bls.n	800331e <HAL_ETH_Init+0x112>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4a72      	ldr	r2, [pc, #456]	; (80034d8 <HAL_ETH_Init+0x2cc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d804      	bhi.n	800331e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f043 030c 	orr.w	r3, r3, #12
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e01a      	b.n	8003354 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4a6d      	ldr	r2, [pc, #436]	; (80034d8 <HAL_ETH_Init+0x2cc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d903      	bls.n	800332e <HAL_ETH_Init+0x122>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4a6c      	ldr	r2, [pc, #432]	; (80034dc <HAL_ETH_Init+0x2d0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d911      	bls.n	8003352 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4a6a      	ldr	r2, [pc, #424]	; (80034dc <HAL_ETH_Init+0x2d0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d908      	bls.n	8003348 <HAL_ETH_Init+0x13c>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <HAL_ETH_Init+0x2d4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d804      	bhi.n	8003348 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e005      	b.n	8003354 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f043 0310 	orr.w	r3, r3, #16
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e000      	b.n	8003354 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003352:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800335c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003360:	2100      	movs	r1, #0
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f956 	bl	8003614 <HAL_ETH_WritePHYRegister>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003372:	6939      	ldr	r1, [r7, #16]
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f9b3 	bl	80036e0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0d9      	b.n	800353a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003386:	20ff      	movs	r0, #255	; 0xff
 8003388:	f7fd ff3c 	bl	8001204 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80a7 	beq.w	80034e4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003396:	f7fd ff29 	bl	80011ec <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	461a      	mov	r2, r3
 80033a2:	2101      	movs	r1, #1
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8cd 	bl	8003544 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80033aa:	f7fd ff1f 	bl	80011ec <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d90f      	bls.n	80033dc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f98c 	bl	80036e0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0ae      	b.n	800353a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0da      	beq.n	800339c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80033e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033ea:	2100      	movs	r1, #0
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f911 	bl	8003614 <HAL_ETH_WritePHYRegister>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80033fc:	6939      	ldr	r1, [r7, #16]
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f96e 	bl	80036e0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800340c:	2301      	movs	r3, #1
 800340e:	e094      	b.n	800353a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003410:	f7fd feec 	bl	80011ec <HAL_GetTick>
 8003414:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	461a      	mov	r2, r3
 800341c:	2101      	movs	r1, #1
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f890 	bl	8003544 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003424:	f7fd fee2 	bl	80011ec <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d90f      	bls.n	8003456 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800343a:	6939      	ldr	r1, [r7, #16]
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f94f 	bl	80036e0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e071      	b.n	800353a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0da      	beq.n	8003416 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	461a      	mov	r2, r3
 8003466:	211f      	movs	r1, #31
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f86b 	bl	8003544 <HAL_ETH_ReadPHYRegister>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003478:	6939      	ldr	r1, [r7, #16]
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f930 	bl	80036e0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003488:	2301      	movs	r3, #1
 800348a:	e056      	b.n	800353a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	e002      	b.n	80034a6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	e037      	b.n	8003528 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	e032      	b.n	8003528 <HAL_ETH_Init+0x31c>
 80034c2:	bf00      	nop
 80034c4:	03938700 	.word	0x03938700
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40013800 	.word	0x40013800
 80034d0:	01312cff 	.word	0x01312cff
 80034d4:	02160ebf 	.word	0x02160ebf
 80034d8:	039386ff 	.word	0x039386ff
 80034dc:	05f5e0ff 	.word	0x05f5e0ff
 80034e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	08db      	lsrs	r3, r3, #3
 80034ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f889 	bl	8003614 <HAL_ETH_WritePHYRegister>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800350c:	6939      	ldr	r1, [r7, #16]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8e6 	bl	80036e0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e00c      	b.n	800353a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003520:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003524:	f7fd fe6e 	bl	8001204 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003528:	6939      	ldr	r1, [r7, #16]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8d8 	bl	80036e0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop

08003544 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	460b      	mov	r3, r1
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b82      	cmp	r3, #130	; 0x82
 8003564:	d101      	bne.n	800356a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
 8003568:	e050      	b.n	800360c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2282      	movs	r2, #130	; 0x82
 800356e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 031c 	and.w	r3, r3, #28
 8003580:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8a1b      	ldrh	r3, [r3, #16]
 8003586:	02db      	lsls	r3, r3, #11
 8003588:	b29b      	uxth	r3, r3
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003590:	897b      	ldrh	r3, [r7, #10]
 8003592:	019b      	lsls	r3, r3, #6
 8003594:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0302 	bic.w	r3, r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80035b6:	f7fd fe19 	bl	80011ec <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035bc:	e015      	b.n	80035ea <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80035be:	f7fd fe15 	bl	80011ec <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d309      	bcc.n	80035e2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e014      	b.n	800360c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e4      	bne.n	80035be <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	460b      	mov	r3, r1
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b42      	cmp	r3, #66	; 0x42
 8003634:	d101      	bne.n	800363a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
 8003638:	e04e      	b.n	80036d8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2242      	movs	r2, #66	; 0x42
 800363e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 031c 	and.w	r3, r3, #28
 8003650:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8a1b      	ldrh	r3, [r3, #16]
 8003656:	02db      	lsls	r3, r3, #11
 8003658:	b29b      	uxth	r3, r3
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	019b      	lsls	r3, r3, #6
 8003664:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7fd fdac 	bl	80011ec <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003696:	e015      	b.n	80036c4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003698:	f7fd fda8 	bl	80011ec <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a6:	d309      	bcc.n	80036bc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e00d      	b.n	80036d8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e4      	bne.n	8003698 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0b0      	sub	sp, #192	; 0xc0
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003704:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003706:	2300      	movs	r3, #0
 8003708:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800370a:	2300      	movs	r3, #0
 800370c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800370e:	2300      	movs	r3, #0
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003712:	2300      	movs	r3, #0
 8003714:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372a:	663b      	str	r3, [r7, #96]	; 0x60
 800372c:	e001      	b.n	8003732 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800372e:	2300      	movs	r3, #0
 8003730:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003736:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800373c:	2300      	movs	r3, #0
 800373e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800374c:	2340      	movs	r3, #64	; 0x40
 800374e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80037b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037b8:	4bab      	ldr	r3, [pc, #684]	; (8003a68 <ETH_MACDMAConfig+0x388>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80037c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80037c4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80037c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80037c8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80037ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80037cc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80037d2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80037d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80037d6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80037d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80037da:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80037e0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80037e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80037e4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80037e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80037e8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80037ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80037ec:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80037ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80037f0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80037f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80037f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80037f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003808:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003814:	2001      	movs	r0, #1
 8003816:	f7fd fcf5 	bl	8001204 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003822:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003828:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800382a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800382c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800382e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003832:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003838:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800383a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800383e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003844:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003848:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003850:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003852:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800385e:	2001      	movs	r0, #1
 8003860:	f7fd fcd0 	bl	8001204 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800386c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003876:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003880:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800388c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003890:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003894:	4013      	ands	r3, r2
 8003896:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800389a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800389e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80038a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80038a4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80038a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80038aa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80038ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80038b0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80038b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80038b6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80038b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80038bc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80038be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038d0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80038dc:	2001      	movs	r0, #1
 80038de:	f7fd fc91 	bl	8001204 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038ea:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80038ec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80038f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003906:	2001      	movs	r0, #1
 8003908:	f7fd fc7c 	bl	8001204 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003914:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800391a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003928:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800393a:	2304      	movs	r3, #4
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800393e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800394a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800395a:	2300      	movs	r3, #0
 800395c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800395e:	2300      	movs	r3, #0
 8003960:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f241 0318 	movw	r3, #4120	; 0x1018
 800396a:	4413      	add	r3, r2
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003976:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <ETH_MACDMAConfig+0x38c>)
 8003978:	4013      	ands	r3, r2
 800397a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800397e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003980:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003982:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003984:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003986:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003988:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800398a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800398c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800398e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003990:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003992:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003994:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003996:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800399a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800399e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80039a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80039b2:	4413      	add	r3, r2
 80039b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039b8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f241 0318 	movw	r3, #4120	; 0x1018
 80039c2:	4413      	add	r3, r2
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7fd fc1a 	bl	8001204 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80039d8:	4413      	add	r3, r2
 80039da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039de:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039e4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80039e8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039ec:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80039f0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80039f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80039f6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80039f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80039fa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a08:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f7fd fbf3 	bl	8001204 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a2a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10d      	bne.n	8003a50 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	f241 031c 	movw	r3, #4124	; 0x101c
 8003a3c:	4413      	add	r3, r2
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6811      	ldr	r1, [r2, #0]
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <ETH_MACDMAConfig+0x390>)
 8003a46:	431a      	orrs	r2, r3
 8003a48:	f241 031c 	movw	r3, #4124	; 0x101c
 8003a4c:	440b      	add	r3, r1
 8003a4e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	461a      	mov	r2, r3
 8003a56:	2100      	movs	r1, #0
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f80b 	bl	8003a74 <ETH_MACAddressConfig>
}
 8003a5e:	bf00      	nop
 8003a60:	37c0      	adds	r7, #192	; 0xc0
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	ff20810f 	.word	0xff20810f
 8003a6c:	f8de3f23 	.word	0xf8de3f23
 8003a70:	00010040 	.word	0x00010040

08003a74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3305      	adds	r3, #5
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	3204      	adds	r2, #4
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <ETH_MACAddressConfig+0x68>)
 8003a96:	4413      	add	r3, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3303      	adds	r3, #3
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	061a      	lsls	r2, r3, #24
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	041b      	lsls	r3, r3, #16
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <ETH_MACAddressConfig+0x6c>)
 8003ac6:	4413      	add	r3, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	6013      	str	r3, [r2, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40028040 	.word	0x40028040
 8003ae0:	40028044 	.word	0x40028044

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	; 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e175      	b.n	8003df0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b04:	2201      	movs	r2, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	f040 8164 	bne.w	8003dea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d00b      	beq.n	8003b42 <HAL_GPIO_Init+0x5e>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d007      	beq.n	8003b42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b36:	2b11      	cmp	r3, #17
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d130      	bne.n	8003ba4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 0201 	and.w	r2, r3, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x100>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b12      	cmp	r3, #18
 8003be2:	d123      	bne.n	8003c2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	08da      	lsrs	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3208      	adds	r2, #8
 8003bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	69b9      	ldr	r1, [r7, #24]
 8003c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0203 	and.w	r2, r3, #3
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80be 	beq.w	8003dea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	4b65      	ldr	r3, [pc, #404]	; (8003e04 <HAL_GPIO_Init+0x320>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	4a64      	ldr	r2, [pc, #400]	; (8003e04 <HAL_GPIO_Init+0x320>)
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c78:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7a:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <HAL_GPIO_Init+0x320>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c86:	4a60      	ldr	r2, [pc, #384]	; (8003e08 <HAL_GPIO_Init+0x324>)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <HAL_GPIO_Init+0x328>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d037      	beq.n	8003d22 <HAL_GPIO_Init+0x23e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a56      	ldr	r2, [pc, #344]	; (8003e10 <HAL_GPIO_Init+0x32c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_GPIO_Init+0x23a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a55      	ldr	r2, [pc, #340]	; (8003e14 <HAL_GPIO_Init+0x330>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d02b      	beq.n	8003d1a <HAL_GPIO_Init+0x236>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a54      	ldr	r2, [pc, #336]	; (8003e18 <HAL_GPIO_Init+0x334>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d025      	beq.n	8003d16 <HAL_GPIO_Init+0x232>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a53      	ldr	r2, [pc, #332]	; (8003e1c <HAL_GPIO_Init+0x338>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01f      	beq.n	8003d12 <HAL_GPIO_Init+0x22e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <HAL_GPIO_Init+0x33c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d019      	beq.n	8003d0e <HAL_GPIO_Init+0x22a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a51      	ldr	r2, [pc, #324]	; (8003e24 <HAL_GPIO_Init+0x340>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_GPIO_Init+0x226>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a50      	ldr	r2, [pc, #320]	; (8003e28 <HAL_GPIO_Init+0x344>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00d      	beq.n	8003d06 <HAL_GPIO_Init+0x222>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4f      	ldr	r2, [pc, #316]	; (8003e2c <HAL_GPIO_Init+0x348>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <HAL_GPIO_Init+0x21e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <HAL_GPIO_Init+0x34c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_GPIO_Init+0x21a>
 8003cfa:	2309      	movs	r3, #9
 8003cfc:	e012      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003cfe:	230a      	movs	r3, #10
 8003d00:	e010      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d02:	2308      	movs	r3, #8
 8003d04:	e00e      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d06:	2307      	movs	r3, #7
 8003d08:	e00c      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d0a:	2306      	movs	r3, #6
 8003d0c:	e00a      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e008      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d12:	2304      	movs	r3, #4
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d16:	2303      	movs	r3, #3
 8003d18:	e004      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d22:	2300      	movs	r3, #0
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f002 0203 	and.w	r2, r2, #3
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d34:	4934      	ldr	r1, [pc, #208]	; (8003e08 <HAL_GPIO_Init+0x324>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d42:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d66:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d6c:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003de4:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	f67f ae86 	bls.w	8003b04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	3724      	adds	r7, #36	; 0x24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	40020400 	.word	0x40020400
 8003e14:	40020800 	.word	0x40020800
 8003e18:	40020c00 	.word	0x40020c00
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40021400 	.word	0x40021400
 8003e24:	40021800 	.word	0x40021800
 8003e28:	40021c00 	.word	0x40021c00
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40022400 	.word	0x40022400
 8003e34:	40013c00 	.word	0x40013c00

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e54:	e003      	b.n	8003e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	041a      	lsls	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	619a      	str	r2, [r3, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6c:	b08f      	sub	sp, #60	; 0x3c
 8003e6e:	af0a      	add	r7, sp, #40	; 0x28
 8003e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e116      	b.n	80040aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd f884 	bl	8000fa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f002 fc36 	bl	800672c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	687e      	ldr	r6, [r7, #4]
 8003ec8:	466d      	mov	r5, sp
 8003eca:	f106 0410 	add.w	r4, r6, #16
 8003ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ede:	1d33      	adds	r3, r6, #4
 8003ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee2:	6838      	ldr	r0, [r7, #0]
 8003ee4:	f002 fbca 	bl	800667c <USB_CoreInit>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0d7      	b.n	80040aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 fc24 	bl	800674e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
 8003f0a:	e04a      	b.n	8003fa2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	333d      	adds	r3, #61	; 0x3d
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	333c      	adds	r3, #60	; 0x3c
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	b298      	uxth	r0, r3
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3342      	adds	r3, #66	; 0x42
 8003f48:	4602      	mov	r2, r0
 8003f4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	333f      	adds	r3, #63	; 0x3f
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3344      	adds	r3, #68	; 0x44
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3348      	adds	r3, #72	; 0x48
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3350      	adds	r3, #80	; 0x50
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d3af      	bcc.n	8003f0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e044      	b.n	800403c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	3301      	adds	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d3b5      	bcc.n	8003fb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	687e      	ldr	r6, [r7, #4]
 800404e:	466d      	mov	r5, sp
 8004050:	f106 0410 	add.w	r4, r6, #16
 8004054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800405a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004060:	e885 0003 	stmia.w	r5, {r0, r1}
 8004064:	1d33      	adds	r3, r6, #4
 8004066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004068:	6838      	ldr	r0, [r7, #0]
 800406a:	f002 fb9b 	bl	80067a4 <USB_DevInit>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e014      	b.n	80040aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2b01      	cmp	r3, #1
 8004096:	d102      	bne.n	800409e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f80b 	bl	80040b4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 fd4d 	bl	8006b42 <USB_DevDisconnect>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	10000003 	.word	0x10000003

080040fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40007000 	.word	0x40007000

0800411c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800414a:	f7fd f84f 	bl	80011ec <HAL_GetTick>
 800414e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004150:	e009      	b.n	8004166 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004152:	f7fd f84b 	bl	80011ec <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004160:	d901      	bls.n	8004166 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e022      	b.n	80041ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d1ee      	bne.n	8004152 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800417a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004180:	f7fd f834 	bl	80011ec <HAL_GetTick>
 8004184:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004186:	e009      	b.n	800419c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004188:	f7fd f830 	bl	80011ec <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004196:	d901      	bls.n	800419c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e007      	b.n	80041ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041a8:	d1ee      	bne.n	8004188 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000

080041bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e29b      	b.n	800470a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8087 	beq.w	80042ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041e0:	4b96      	ldr	r3, [pc, #600]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d00c      	beq.n	8004206 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ec:	4b93      	ldr	r3, [pc, #588]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d112      	bne.n	800421e <HAL_RCC_OscConfig+0x62>
 80041f8:	4b90      	ldr	r3, [pc, #576]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004204:	d10b      	bne.n	800421e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d06c      	beq.n	80042ec <HAL_RCC_OscConfig+0x130>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d168      	bne.n	80042ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e275      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x7a>
 8004228:	4b84      	ldr	r3, [pc, #528]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a83      	ldr	r2, [pc, #524]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e02e      	b.n	8004294 <HAL_RCC_OscConfig+0xd8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x9c>
 800423e:	4b7f      	ldr	r3, [pc, #508]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7e      	ldr	r2, [pc, #504]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b7c      	ldr	r3, [pc, #496]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7b      	ldr	r2, [pc, #492]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e01d      	b.n	8004294 <HAL_RCC_OscConfig+0xd8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0xc0>
 8004262:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a75      	ldr	r2, [pc, #468]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b73      	ldr	r3, [pc, #460]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a72      	ldr	r2, [pc, #456]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0xd8>
 800427c:	4b6f      	ldr	r3, [pc, #444]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6e      	ldr	r2, [pc, #440]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b6c      	ldr	r3, [pc, #432]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a6b      	ldr	r2, [pc, #428]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800428e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fc ffa6 	bl	80011ec <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fc ffa2 	bl	80011ec <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e229      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b61      	ldr	r3, [pc, #388]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0xe8>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fc ff92 	bl	80011ec <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fc ff8e 	bl	80011ec <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e215      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042de:	4b57      	ldr	r3, [pc, #348]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x110>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d069      	beq.n	80043ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042fa:	4b50      	ldr	r3, [pc, #320]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b4d      	ldr	r3, [pc, #308]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b08      	cmp	r3, #8
 8004310:	d11c      	bne.n	800434c <HAL_RCC_OscConfig+0x190>
 8004312:	4b4a      	ldr	r3, [pc, #296]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_RCC_OscConfig+0x17a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1e9      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	493d      	ldr	r1, [pc, #244]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	e040      	b.n	80043ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d023      	beq.n	800439c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a38      	ldr	r2, [pc, #224]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fc ff44 	bl	80011ec <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004368:	f7fc ff40 	bl	80011ec <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1c7      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437a:	4b30      	ldr	r3, [pc, #192]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004386:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4929      	ldr	r1, [pc, #164]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]
 800439a:	e018      	b.n	80043ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fc ff20 	bl	80011ec <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b0:	f7fc ff1c 	bl	80011ec <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1a3      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d038      	beq.n	800444c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d019      	beq.n	8004416 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e2:	4b16      	ldr	r3, [pc, #88]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_RCC_OscConfig+0x280>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ee:	f7fc fefd 	bl	80011ec <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f6:	f7fc fef9 	bl	80011ec <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e180      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x23a>
 8004414:	e01a      	b.n	800444c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_OscConfig+0x280>)
 8004418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <HAL_RCC_OscConfig+0x280>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fc fee3 	bl	80011ec <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800442a:	f7fc fedf 	bl	80011ec <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d903      	bls.n	8004440 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e166      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
 800443c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	4b92      	ldr	r3, [pc, #584]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ee      	bne.n	800442a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80a4 	beq.w	80045a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b8c      	ldr	r3, [pc, #560]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	4b89      	ldr	r3, [pc, #548]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a88      	ldr	r2, [pc, #544]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b86      	ldr	r3, [pc, #536]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004482:	4b83      	ldr	r3, [pc, #524]	; (8004690 <HAL_RCC_OscConfig+0x4d4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d118      	bne.n	80044c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800448e:	4b80      	ldr	r3, [pc, #512]	; (8004690 <HAL_RCC_OscConfig+0x4d4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a7f      	ldr	r2, [pc, #508]	; (8004690 <HAL_RCC_OscConfig+0x4d4>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449a:	f7fc fea7 	bl	80011ec <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fc fea3 	bl	80011ec <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b64      	cmp	r3, #100	; 0x64
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e12a      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b4:	4b76      	ldr	r3, [pc, #472]	; (8004690 <HAL_RCC_OscConfig+0x4d4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_OscConfig+0x31a>
 80044c8:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a6f      	ldr	r2, [pc, #444]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	e02d      	b.n	8004532 <HAL_RCC_OscConfig+0x376>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x33c>
 80044de:	4b6b      	ldr	r3, [pc, #428]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a6a      	ldr	r2, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ea:	4b68      	ldr	r3, [pc, #416]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a67      	ldr	r2, [pc, #412]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	e01c      	b.n	8004532 <HAL_RCC_OscConfig+0x376>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b05      	cmp	r3, #5
 80044fe:	d10c      	bne.n	800451a <HAL_RCC_OscConfig+0x35e>
 8004500:	4b62      	ldr	r3, [pc, #392]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a61      	ldr	r2, [pc, #388]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004506:	f043 0304 	orr.w	r3, r3, #4
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	4b5f      	ldr	r3, [pc, #380]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a5e      	ldr	r2, [pc, #376]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	e00b      	b.n	8004532 <HAL_RCC_OscConfig+0x376>
 800451a:	4b5c      	ldr	r3, [pc, #368]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a5b      	ldr	r2, [pc, #364]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
 8004526:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a58      	ldr	r2, [pc, #352]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d015      	beq.n	8004566 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fc fe57 	bl	80011ec <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004540:	e00a      	b.n	8004558 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fc fe53 	bl	80011ec <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0d8      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ee      	beq.n	8004542 <HAL_RCC_OscConfig+0x386>
 8004564:	e014      	b.n	8004590 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fc fe41 	bl	80011ec <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fc fe3d 	bl	80011ec <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	; 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e0c2      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004584:	4b41      	ldr	r3, [pc, #260]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ee      	bne.n	800456e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4b3d      	ldr	r3, [pc, #244]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	4a3c      	ldr	r2, [pc, #240]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80ae 	beq.w	8004708 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ac:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d06d      	beq.n	8004694 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d14b      	bne.n	8004658 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c0:	4b32      	ldr	r3, [pc, #200]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a31      	ldr	r2, [pc, #196]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80045c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fc fe0e 	bl	80011ec <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fc fe0a 	bl	80011ec <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e091      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	019b      	lsls	r3, r3, #6
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	3b01      	subs	r3, #1
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	491b      	ldr	r1, [pc, #108]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fc fddc 	bl	80011ec <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004638:	f7fc fdd8 	bl	80011ec <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e05f      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x47c>
 8004656:	e057      	b.n	8004708 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fc fdc2 	bl	80011ec <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466c:	f7fc fdbe 	bl	80011ec <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e045      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_OscConfig+0x4d0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x4b0>
 800468a:	e03d      	b.n	8004708 <HAL_RCC_OscConfig+0x54c>
 800468c:	40023800 	.word	0x40023800
 8004690:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004694:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <HAL_RCC_OscConfig+0x558>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d030      	beq.n	8004704 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d129      	bne.n	8004704 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d122      	bne.n	8004704 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d119      	bne.n	8004704 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	3b01      	subs	r3, #1
 80046de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d10f      	bne.n	8004704 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0d0      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d910      	bls.n	8004760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 020f 	bic.w	r2, r3, #15
 8004746:	4965      	ldr	r1, [pc, #404]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b8      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004778:	4b59      	ldr	r3, [pc, #356]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a58      	ldr	r2, [pc, #352]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 800477e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800479a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b50      	ldr	r3, [pc, #320]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494d      	ldr	r1, [pc, #308]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d040      	beq.n	800483c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d115      	bne.n	80047fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e073      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ea:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e06b      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4936      	ldr	r1, [pc, #216]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480c:	f7fc fcee 	bl	80011ec <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	e00a      	b.n	800482a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004814:	f7fc fcea 	bl	80011ec <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e053      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 020c 	and.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	429a      	cmp	r2, r3
 800483a:	d1eb      	bne.n	8004814 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d210      	bcs.n	800486c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 020f 	bic.w	r2, r3, #15
 8004852:	4922      	ldr	r1, [pc, #136]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4916      	ldr	r1, [pc, #88]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490e      	ldr	r1, [pc, #56]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4601      	mov	r1, r0
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <HAL_RCC_ClockConfig+0x1cc>)
 80048bc:	5cd3      	ldrb	r3, [r2, r3]
 80048be:	fa21 f303 	lsr.w	r3, r1, r3
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1d0>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1d4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc fc4a 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023c00 	.word	0x40023c00
 80048e0:	40023800 	.word	0x40023800
 80048e4:	08006c4c 	.word	0x08006c4c
 80048e8:	20000000 	.word	0x20000000
 80048ec:	20000004 	.word	0x20000004

080048f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	2300      	movs	r3, #0
 8004900:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004906:	4b63      	ldr	r3, [pc, #396]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b04      	cmp	r3, #4
 8004910:	d007      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x32>
 8004912:	2b08      	cmp	r3, #8
 8004914:	d008      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x38>
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 80b4 	bne.w	8004a84 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800491c:	4b5e      	ldr	r3, [pc, #376]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800491e:	60bb      	str	r3, [r7, #8]
      break;
 8004920:	e0b3      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004922:	4b5e      	ldr	r3, [pc, #376]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004924:	60bb      	str	r3, [r7, #8]
      break;
 8004926:	e0b0      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004928:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004930:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004932:	4b58      	ldr	r3, [pc, #352]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d04a      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493e:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	f04f 0400 	mov.w	r4, #0
 8004948:	f240 11ff 	movw	r1, #511	; 0x1ff
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	ea03 0501 	and.w	r5, r3, r1
 8004954:	ea04 0602 	and.w	r6, r4, r2
 8004958:	4629      	mov	r1, r5
 800495a:	4632      	mov	r2, r6
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	f04f 0400 	mov.w	r4, #0
 8004964:	0154      	lsls	r4, r2, #5
 8004966:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800496a:	014b      	lsls	r3, r1, #5
 800496c:	4619      	mov	r1, r3
 800496e:	4622      	mov	r2, r4
 8004970:	1b49      	subs	r1, r1, r5
 8004972:	eb62 0206 	sbc.w	r2, r2, r6
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	f04f 0400 	mov.w	r4, #0
 800497e:	0194      	lsls	r4, r2, #6
 8004980:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004984:	018b      	lsls	r3, r1, #6
 8004986:	1a5b      	subs	r3, r3, r1
 8004988:	eb64 0402 	sbc.w	r4, r4, r2
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	00e2      	lsls	r2, r4, #3
 8004996:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800499a:	00d9      	lsls	r1, r3, #3
 800499c:	460b      	mov	r3, r1
 800499e:	4614      	mov	r4, r2
 80049a0:	195b      	adds	r3, r3, r5
 80049a2:	eb44 0406 	adc.w	r4, r4, r6
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	0262      	lsls	r2, r4, #9
 80049b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049b4:	0259      	lsls	r1, r3, #9
 80049b6:	460b      	mov	r3, r1
 80049b8:	4614      	mov	r4, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	4621      	mov	r1, r4
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f04f 0400 	mov.w	r4, #0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	f7fb fc36 	bl	8000238 <__aeabi_uldivmod>
 80049cc:	4603      	mov	r3, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e049      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d4:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	099b      	lsrs	r3, r3, #6
 80049da:	f04f 0400 	mov.w	r4, #0
 80049de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	ea03 0501 	and.w	r5, r3, r1
 80049ea:	ea04 0602 	and.w	r6, r4, r2
 80049ee:	4629      	mov	r1, r5
 80049f0:	4632      	mov	r2, r6
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	f04f 0400 	mov.w	r4, #0
 80049fa:	0154      	lsls	r4, r2, #5
 80049fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a00:	014b      	lsls	r3, r1, #5
 8004a02:	4619      	mov	r1, r3
 8004a04:	4622      	mov	r2, r4
 8004a06:	1b49      	subs	r1, r1, r5
 8004a08:	eb62 0206 	sbc.w	r2, r2, r6
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	f04f 0400 	mov.w	r4, #0
 8004a14:	0194      	lsls	r4, r2, #6
 8004a16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a1a:	018b      	lsls	r3, r1, #6
 8004a1c:	1a5b      	subs	r3, r3, r1
 8004a1e:	eb64 0402 	sbc.w	r4, r4, r2
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a30:	00d9      	lsls	r1, r3, #3
 8004a32:	460b      	mov	r3, r1
 8004a34:	4614      	mov	r4, r2
 8004a36:	195b      	adds	r3, r3, r5
 8004a38:	eb44 0406 	adc.w	r4, r4, r6
 8004a3c:	f04f 0100 	mov.w	r1, #0
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	02a2      	lsls	r2, r4, #10
 8004a46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a4a:	0299      	lsls	r1, r3, #10
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4614      	mov	r4, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	4621      	mov	r1, r4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f04f 0400 	mov.w	r4, #0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	f7fb fbeb 	bl	8000238 <__aeabi_uldivmod>
 8004a62:	4603      	mov	r3, r0
 8004a64:	460c      	mov	r4, r1
 8004a66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	3301      	adds	r3, #1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	60bb      	str	r3, [r7, #8]
      break;
 8004a82:	e002      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a86:	60bb      	str	r3, [r7, #8]
      break;
 8004a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	00f42400 	.word	0x00f42400
 8004a9c:	007a1200 	.word	0x007a1200

08004aa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000000 	.word	0x20000000

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004abc:	f7ff fff0 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4601      	mov	r1, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0a9b      	lsrs	r3, r3, #10
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4a03      	ldr	r2, [pc, #12]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ace:	5cd3      	ldrb	r3, [r2, r3]
 8004ad0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	08006c5c 	.word	0x08006c5c

08004ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ae4:	f7ff ffdc 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4601      	mov	r1, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	0b5b      	lsrs	r3, r3, #13
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4a03      	ldr	r2, [pc, #12]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af6:	5cd3      	ldrb	r3, [r2, r3]
 8004af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	08006c5c 	.word	0x08006c5c

08004b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d012      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b30:	4b69      	ldr	r3, [pc, #420]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a68      	ldr	r2, [pc, #416]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b3a:	6093      	str	r3, [r2, #8]
 8004b3c:	4b66      	ldr	r3, [pc, #408]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	4964      	ldr	r1, [pc, #400]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d017      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b62:	4b5d      	ldr	r3, [pc, #372]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b70:	4959      	ldr	r1, [pc, #356]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b80:	d101      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d017      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b9e:	4b4e      	ldr	r3, [pc, #312]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	494a      	ldr	r1, [pc, #296]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 808b 	beq.w	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bec:	4b3a      	ldr	r3, [pc, #232]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	4a39      	ldr	r2, [pc, #228]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf8:	4b37      	ldr	r3, [pc, #220]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c04:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a34      	ldr	r2, [pc, #208]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c10:	f7fc faec 	bl	80011ec <HAL_GetTick>
 8004c14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c18:	f7fc fae8 	bl	80011ec <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e38d      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c2a:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c36:	4b28      	ldr	r3, [pc, #160]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d035      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d02e      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c54:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c76:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c7c:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d114      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fc fab0 	bl	80011ec <HAL_GetTick>
 8004c8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fc faac 	bl	80011ec <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e34f      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ee      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbe:	d111      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cce:	400b      	ands	r3, r1
 8004cd0:	4901      	ldr	r1, [pc, #4]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
 8004cd6:	e00b      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	0ffffcff 	.word	0x0ffffcff
 8004ce4:	4bb3      	ldr	r3, [pc, #716]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4ab2      	ldr	r2, [pc, #712]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cee:	6093      	str	r3, [r2, #8]
 8004cf0:	4bb0      	ldr	r3, [pc, #704]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	49ad      	ldr	r1, [pc, #692]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d010      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d0e:	4ba9      	ldr	r3, [pc, #676]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d14:	4aa7      	ldr	r2, [pc, #668]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d1e:	4ba5      	ldr	r3, [pc, #660]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	49a2      	ldr	r1, [pc, #648]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3c:	4b9d      	ldr	r3, [pc, #628]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4a:	499a      	ldr	r1, [pc, #616]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d5e:	4b95      	ldr	r3, [pc, #596]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6c:	4991      	ldr	r1, [pc, #580]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d80:	4b8c      	ldr	r3, [pc, #560]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8e:	4989      	ldr	r1, [pc, #548]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004da2:	4b84      	ldr	r3, [pc, #528]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4980      	ldr	r1, [pc, #512]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc4:	4b7b      	ldr	r3, [pc, #492]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f023 0203 	bic.w	r2, r3, #3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd2:	4978      	ldr	r1, [pc, #480]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de6:	4b73      	ldr	r3, [pc, #460]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dec:	f023 020c 	bic.w	r2, r3, #12
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df4:	496f      	ldr	r1, [pc, #444]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e08:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	4967      	ldr	r1, [pc, #412]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e2a:	4b62      	ldr	r3, [pc, #392]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	495e      	ldr	r1, [pc, #376]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e4c:	4b59      	ldr	r3, [pc, #356]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	4956      	ldr	r1, [pc, #344]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e6e:	4b51      	ldr	r3, [pc, #324]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7c:	494d      	ldr	r1, [pc, #308]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e90:	4b48      	ldr	r3, [pc, #288]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	4945      	ldr	r1, [pc, #276]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eb2:	4b40      	ldr	r3, [pc, #256]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	493c      	ldr	r1, [pc, #240]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ed4:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee2:	4934      	ldr	r1, [pc, #208]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d011      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ef6:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f04:	492b      	ldr	r1, [pc, #172]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f14:	d101      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f26:	2301      	movs	r3, #1
 8004f28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f36:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f44:	491b      	ldr	r1, [pc, #108]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f68:	4912      	ldr	r1, [pc, #72]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8c:	4909      	ldr	r1, [pc, #36]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	e002      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	4985      	ldr	r1, [pc, #532]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00b      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fcc:	4b80      	ldr	r3, [pc, #512]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fdc:	497c      	ldr	r1, [pc, #496]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff2:	f040 80d6 	bne.w	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ff6:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a75      	ldr	r2, [pc, #468]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ffc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fc f8f3 	bl	80011ec <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005008:	e008      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800500a:	f7fc f8ef 	bl	80011ec <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b64      	cmp	r3, #100	; 0x64
 8005016:	d901      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e194      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800501c:	4b6c      	ldr	r3, [pc, #432]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d021      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11d      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800503c:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005042:	0c1b      	lsrs	r3, r3, #16
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800504a:	4b61      	ldr	r3, [pc, #388]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005050:	0e1b      	lsrs	r3, r3, #24
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	019a      	lsls	r2, r3, #6
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	071b      	lsls	r3, r3, #28
 8005070:	4957      	ldr	r1, [pc, #348]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02e      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a2:	d129      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050a4:	4b4a      	ldr	r3, [pc, #296]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050b2:	4b47      	ldr	r3, [pc, #284]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b8:	0f1b      	lsrs	r3, r3, #28
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	019a      	lsls	r2, r3, #6
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	431a      	orrs	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	071b      	lsls	r3, r3, #28
 80050d8:	493d      	ldr	r1, [pc, #244]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e6:	f023 021f 	bic.w	r2, r3, #31
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4937      	ldr	r1, [pc, #220]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01d      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005104:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510a:	0e1b      	lsrs	r3, r3, #24
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005112:	4b2f      	ldr	r3, [pc, #188]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005118:	0f1b      	lsrs	r3, r3, #28
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	019a      	lsls	r2, r3, #6
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	431a      	orrs	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	431a      	orrs	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	071b      	lsls	r3, r3, #28
 8005138:	4925      	ldr	r1, [pc, #148]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d011      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	019a      	lsls	r2, r3, #6
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	061b      	lsls	r3, r3, #24
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	071b      	lsls	r3, r3, #28
 8005168:	4919      	ldr	r1, [pc, #100]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800517a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517c:	f7fc f836 	bl	80011ec <HAL_GetTick>
 8005180:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005184:	f7fc f832 	bl	80011ec <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0d7      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	f040 80cd 	bne.w	8005344 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b6:	f7fc f819 	bl	80011ec <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051bc:	e00a      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051be:	f7fc f815 	bl	80011ec <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b64      	cmp	r3, #100	; 0x64
 80051ca:	d903      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e0ba      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80051d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051d4:	4b5e      	ldr	r3, [pc, #376]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e0:	d0ed      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d02e      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d12a      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800520a:	4b51      	ldr	r3, [pc, #324]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005218:	4b4d      	ldr	r3, [pc, #308]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	0f1b      	lsrs	r3, r3, #28
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	019a      	lsls	r2, r3, #6
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	431a      	orrs	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	071b      	lsls	r3, r3, #28
 800523e:	4944      	ldr	r1, [pc, #272]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005246:	4b42      	ldr	r3, [pc, #264]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	493d      	ldr	r1, [pc, #244]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d022      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005274:	d11d      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005276:	4b36      	ldr	r3, [pc, #216]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	0e1b      	lsrs	r3, r3, #24
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005284:	4b32      	ldr	r3, [pc, #200]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	0f1b      	lsrs	r3, r3, #28
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	019a      	lsls	r2, r3, #6
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	061b      	lsls	r3, r3, #24
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	071b      	lsls	r3, r3, #28
 80052aa:	4929      	ldr	r1, [pc, #164]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d028      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	0e1b      	lsrs	r3, r3, #24
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052cc:	4b20      	ldr	r3, [pc, #128]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	019a      	lsls	r2, r3, #6
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	431a      	orrs	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	071b      	lsls	r3, r3, #28
 80052f2:	4917      	ldr	r1, [pc, #92]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	4911      	ldr	r1, [pc, #68]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005310:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0e      	ldr	r2, [pc, #56]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531c:	f7fb ff66 	bl	80011ec <HAL_GetTick>
 8005320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005324:	f7fb ff62 	bl	80011ec <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e007      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005342:	d1ef      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800

08005354 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e01d      	b.n	80053a2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fb fd7a 	bl	8000e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f000 f966 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2201      	movs	r2, #1
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fc4e 	bl	8005c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_TIM_PWM_Start+0x7c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x2c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a16      	ldr	r2, [pc, #88]	; (800542c <HAL_TIM_PWM_Start+0x80>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_PWM_Start+0x30>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_TIM_PWM_Start+0x32>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_TIM_PWM_Start+0x84>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b06      	cmp	r3, #6
 8005402:	d00b      	beq.n	800541c <HAL_TIM_PWM_Start+0x70>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d007      	beq.n	800541c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40010000 	.word	0x40010000
 800542c:	40010400 	.word	0x40010400
 8005430:	00010007 	.word	0x00010007

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800544a:	2302      	movs	r3, #2
 800544c:	e105      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x226>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b14      	cmp	r3, #20
 8005462:	f200 80f0 	bhi.w	8005646 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054c1 	.word	0x080054c1
 8005470:	08005647 	.word	0x08005647
 8005474:	08005647 	.word	0x08005647
 8005478:	08005647 	.word	0x08005647
 800547c:	08005501 	.word	0x08005501
 8005480:	08005647 	.word	0x08005647
 8005484:	08005647 	.word	0x08005647
 8005488:	08005647 	.word	0x08005647
 800548c:	08005543 	.word	0x08005543
 8005490:	08005647 	.word	0x08005647
 8005494:	08005647 	.word	0x08005647
 8005498:	08005647 	.word	0x08005647
 800549c:	08005583 	.word	0x08005583
 80054a0:	08005647 	.word	0x08005647
 80054a4:	08005647 	.word	0x08005647
 80054a8:	08005647 	.word	0x08005647
 80054ac:	080055c5 	.word	0x080055c5
 80054b0:	08005647 	.word	0x08005647
 80054b4:	08005647 	.word	0x08005647
 80054b8:	08005647 	.word	0x08005647
 80054bc:	08005605 	.word	0x08005605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f96c 	bl	80057a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0204 	bic.w	r2, r2, #4
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	619a      	str	r2, [r3, #24]
      break;
 80054fe:	e0a3      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f9be 	bl	8005888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6999      	ldr	r1, [r3, #24]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	619a      	str	r2, [r3, #24]
      break;
 8005540:	e082      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fa15 	bl	8005978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0208 	orr.w	r2, r2, #8
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0204 	bic.w	r2, r2, #4
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	61da      	str	r2, [r3, #28]
      break;
 8005580:	e062      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fa6b 	bl	8005a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
      break;
 80055c2:	e041      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 faa2 	bl	8005b14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005602:	e021      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fad4 	bl	8005bb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005646:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a40      	ldr	r2, [pc, #256]	; (8005778 <TIM_Base_SetConfig+0x114>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3d      	ldr	r2, [pc, #244]	; (800577c <TIM_Base_SetConfig+0x118>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <TIM_Base_SetConfig+0x11c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3b      	ldr	r2, [pc, #236]	; (8005784 <TIM_Base_SetConfig+0x120>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3a      	ldr	r2, [pc, #232]	; (8005788 <TIM_Base_SetConfig+0x124>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2f      	ldr	r2, [pc, #188]	; (8005778 <TIM_Base_SetConfig+0x114>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d027      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2c      	ldr	r2, [pc, #176]	; (800577c <TIM_Base_SetConfig+0x118>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d023      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2b      	ldr	r2, [pc, #172]	; (8005780 <TIM_Base_SetConfig+0x11c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <TIM_Base_SetConfig+0x120>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a29      	ldr	r2, [pc, #164]	; (8005788 <TIM_Base_SetConfig+0x124>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d017      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a28      	ldr	r2, [pc, #160]	; (800578c <TIM_Base_SetConfig+0x128>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a27      	ldr	r2, [pc, #156]	; (8005790 <TIM_Base_SetConfig+0x12c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a26      	ldr	r2, [pc, #152]	; (8005794 <TIM_Base_SetConfig+0x130>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a25      	ldr	r2, [pc, #148]	; (8005798 <TIM_Base_SetConfig+0x134>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <TIM_Base_SetConfig+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a23      	ldr	r2, [pc, #140]	; (80057a0 <TIM_Base_SetConfig+0x13c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <TIM_Base_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0xf8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <TIM_Base_SetConfig+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d103      	bne.n	8005764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	615a      	str	r2, [r3, #20]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40010400 	.word	0x40010400
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800
 8005798:	40001800 	.word	0x40001800
 800579c:	40001c00 	.word	0x40001c00
 80057a0:	40002000 	.word	0x40002000

080057a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4b2b      	ldr	r3, [pc, #172]	; (800587c <TIM_OC1_SetConfig+0xd8>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f023 0302 	bic.w	r3, r3, #2
 80057ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a21      	ldr	r2, [pc, #132]	; (8005880 <TIM_OC1_SetConfig+0xdc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_OC1_SetConfig+0x64>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a20      	ldr	r2, [pc, #128]	; (8005884 <TIM_OC1_SetConfig+0xe0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d10c      	bne.n	8005822 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 0308 	bic.w	r3, r3, #8
 800580e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f023 0304 	bic.w	r3, r3, #4
 8005820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <TIM_OC1_SetConfig+0xdc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_OC1_SetConfig+0x8e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <TIM_OC1_SetConfig+0xe0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d111      	bne.n	8005856 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	fffeff8f 	.word	0xfffeff8f
 8005880:	40010000 	.word	0x40010000
 8005884:	40010400 	.word	0x40010400

08005888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f023 0210 	bic.w	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4b2e      	ldr	r3, [pc, #184]	; (800596c <TIM_OC2_SetConfig+0xe4>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0320 	bic.w	r3, r3, #32
 80058d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a23      	ldr	r2, [pc, #140]	; (8005970 <TIM_OC2_SetConfig+0xe8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC2_SetConfig+0x68>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a22      	ldr	r2, [pc, #136]	; (8005974 <TIM_OC2_SetConfig+0xec>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10d      	bne.n	800590c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a18      	ldr	r2, [pc, #96]	; (8005970 <TIM_OC2_SetConfig+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <TIM_OC2_SetConfig+0x94>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a17      	ldr	r2, [pc, #92]	; (8005974 <TIM_OC2_SetConfig+0xec>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d113      	bne.n	8005944 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800592a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	feff8fff 	.word	0xfeff8fff
 8005970:	40010000 	.word	0x40010000
 8005974:	40010400 	.word	0x40010400

08005978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <TIM_OC3_SetConfig+0xe0>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <TIM_OC3_SetConfig+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC3_SetConfig+0x66>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <TIM_OC3_SetConfig+0xe8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10d      	bne.n	80059fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <TIM_OC3_SetConfig+0xe4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC3_SetConfig+0x92>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <TIM_OC3_SetConfig+0xe8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d113      	bne.n	8005a32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	fffeff8f 	.word	0xfffeff8f
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40010400 	.word	0x40010400

08005a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <TIM_OC4_SetConfig+0xa4>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <TIM_OC4_SetConfig+0xa8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC4_SetConfig+0x68>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a12      	ldr	r2, [pc, #72]	; (8005b10 <TIM_OC4_SetConfig+0xac>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d109      	bne.n	8005ae0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	feff8fff 	.word	0xfeff8fff
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010400 	.word	0x40010400

08005b14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <TIM_OC5_SetConfig+0x98>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <TIM_OC5_SetConfig+0x9c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC5_SetConfig+0x5e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <TIM_OC5_SetConfig+0xa0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d109      	bne.n	8005b86 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	621a      	str	r2, [r3, #32]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	fffeff8f 	.word	0xfffeff8f
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400

08005bb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <TIM_OC6_SetConfig+0x9c>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	051b      	lsls	r3, r3, #20
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <TIM_OC6_SetConfig+0xa0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_OC6_SetConfig+0x60>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <TIM_OC6_SetConfig+0xa4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d109      	bne.n	8005c2c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	029b      	lsls	r3, r3, #10
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	feff8fff 	.word	0xfeff8fff
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40010400 	.word	0x40010400

08005c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2201      	movs	r2, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e06d      	b.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a30      	ldr	r2, [pc, #192]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2f      	ldr	r2, [pc, #188]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d108      	bne.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a20      	ldr	r2, [pc, #128]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d36:	d01d      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40001800 	.word	0x40001800

08005dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e040      	b.n	8005e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb f896 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f82c 	bl	8005e64 <UART_SetConfig>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e022      	b.n	8005e5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 faca 	bl	80063b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fb51 	bl	80064fc <UART_CheckIdleState>
 8005e5a:	4603      	mov	r3, r0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4bb1      	ldr	r3, [pc, #708]	; (8006158 <UART_SetConfig+0x2f4>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	6939      	ldr	r1, [r7, #16]
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a9f      	ldr	r2, [pc, #636]	; (800615c <UART_SetConfig+0x2f8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d121      	bne.n	8005f28 <UART_SetConfig+0xc4>
 8005ee4:	4b9e      	ldr	r3, [pc, #632]	; (8006160 <UART_SetConfig+0x2fc>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d816      	bhi.n	8005f20 <UART_SetConfig+0xbc>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x94>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f15 	.word	0x08005f15
 8005f00:	08005f0f 	.word	0x08005f0f
 8005f04:	08005f1b 	.word	0x08005f1b
 8005f08:	2301      	movs	r3, #1
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e151      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e14e      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f14:	2304      	movs	r3, #4
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e14b      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e148      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f20:	2310      	movs	r3, #16
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	bf00      	nop
 8005f26:	e144      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a8d      	ldr	r2, [pc, #564]	; (8006164 <UART_SetConfig+0x300>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d134      	bne.n	8005f9c <UART_SetConfig+0x138>
 8005f32:	4b8b      	ldr	r3, [pc, #556]	; (8006160 <UART_SetConfig+0x2fc>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	f003 030c 	and.w	r3, r3, #12
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d829      	bhi.n	8005f94 <UART_SetConfig+0x130>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0xe4>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f95 	.word	0x08005f95
 8005f50:	08005f95 	.word	0x08005f95
 8005f54:	08005f95 	.word	0x08005f95
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f95 	.word	0x08005f95
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005f95 	.word	0x08005f95
 8005f68:	08005f83 	.word	0x08005f83
 8005f6c:	08005f95 	.word	0x08005f95
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f95 	.word	0x08005f95
 8005f78:	08005f8f 	.word	0x08005f8f
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e117      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f82:	2302      	movs	r3, #2
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e114      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e111      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e10e      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f94:	2310      	movs	r3, #16
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	bf00      	nop
 8005f9a:	e10a      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a71      	ldr	r2, [pc, #452]	; (8006168 <UART_SetConfig+0x304>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d120      	bne.n	8005fe8 <UART_SetConfig+0x184>
 8005fa6:	4b6e      	ldr	r3, [pc, #440]	; (8006160 <UART_SetConfig+0x2fc>)
 8005fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d00f      	beq.n	8005fd4 <UART_SetConfig+0x170>
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d802      	bhi.n	8005fbe <UART_SetConfig+0x15a>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <UART_SetConfig+0x164>
 8005fbc:	e010      	b.n	8005fe0 <UART_SetConfig+0x17c>
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d005      	beq.n	8005fce <UART_SetConfig+0x16a>
 8005fc2:	2b30      	cmp	r3, #48	; 0x30
 8005fc4:	d009      	beq.n	8005fda <UART_SetConfig+0x176>
 8005fc6:	e00b      	b.n	8005fe0 <UART_SetConfig+0x17c>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e0f1      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e0ee      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e0eb      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005fda:	2308      	movs	r3, #8
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e0e8      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	bf00      	nop
 8005fe6:	e0e4      	b.n	80061b2 <UART_SetConfig+0x34e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5f      	ldr	r2, [pc, #380]	; (800616c <UART_SetConfig+0x308>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d120      	bne.n	8006034 <UART_SetConfig+0x1d0>
 8005ff2:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <UART_SetConfig+0x2fc>)
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d00f      	beq.n	8006020 <UART_SetConfig+0x1bc>
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d802      	bhi.n	800600a <UART_SetConfig+0x1a6>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <UART_SetConfig+0x1b0>
 8006008:	e010      	b.n	800602c <UART_SetConfig+0x1c8>
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d005      	beq.n	800601a <UART_SetConfig+0x1b6>
 800600e:	2bc0      	cmp	r3, #192	; 0xc0
 8006010:	d009      	beq.n	8006026 <UART_SetConfig+0x1c2>
 8006012:	e00b      	b.n	800602c <UART_SetConfig+0x1c8>
 8006014:	2300      	movs	r3, #0
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e0cb      	b.n	80061b2 <UART_SetConfig+0x34e>
 800601a:	2302      	movs	r3, #2
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	e0c8      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006020:	2304      	movs	r3, #4
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e0c5      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006026:	2308      	movs	r3, #8
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e0c2      	b.n	80061b2 <UART_SetConfig+0x34e>
 800602c:	2310      	movs	r3, #16
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	bf00      	nop
 8006032:	e0be      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a4d      	ldr	r2, [pc, #308]	; (8006170 <UART_SetConfig+0x30c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d124      	bne.n	8006088 <UART_SetConfig+0x224>
 800603e:	4b48      	ldr	r3, [pc, #288]	; (8006160 <UART_SetConfig+0x2fc>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604c:	d012      	beq.n	8006074 <UART_SetConfig+0x210>
 800604e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006052:	d802      	bhi.n	800605a <UART_SetConfig+0x1f6>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <UART_SetConfig+0x204>
 8006058:	e012      	b.n	8006080 <UART_SetConfig+0x21c>
 800605a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605e:	d006      	beq.n	800606e <UART_SetConfig+0x20a>
 8006060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006064:	d009      	beq.n	800607a <UART_SetConfig+0x216>
 8006066:	e00b      	b.n	8006080 <UART_SetConfig+0x21c>
 8006068:	2300      	movs	r3, #0
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e0a1      	b.n	80061b2 <UART_SetConfig+0x34e>
 800606e:	2302      	movs	r3, #2
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e09e      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006074:	2304      	movs	r3, #4
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e09b      	b.n	80061b2 <UART_SetConfig+0x34e>
 800607a:	2308      	movs	r3, #8
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e098      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006080:	2310      	movs	r3, #16
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	bf00      	nop
 8006086:	e094      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a39      	ldr	r2, [pc, #228]	; (8006174 <UART_SetConfig+0x310>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d124      	bne.n	80060dc <UART_SetConfig+0x278>
 8006092:	4b33      	ldr	r3, [pc, #204]	; (8006160 <UART_SetConfig+0x2fc>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d012      	beq.n	80060c8 <UART_SetConfig+0x264>
 80060a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a6:	d802      	bhi.n	80060ae <UART_SetConfig+0x24a>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <UART_SetConfig+0x258>
 80060ac:	e012      	b.n	80060d4 <UART_SetConfig+0x270>
 80060ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b2:	d006      	beq.n	80060c2 <UART_SetConfig+0x25e>
 80060b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060b8:	d009      	beq.n	80060ce <UART_SetConfig+0x26a>
 80060ba:	e00b      	b.n	80060d4 <UART_SetConfig+0x270>
 80060bc:	2301      	movs	r3, #1
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e077      	b.n	80061b2 <UART_SetConfig+0x34e>
 80060c2:	2302      	movs	r3, #2
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e074      	b.n	80061b2 <UART_SetConfig+0x34e>
 80060c8:	2304      	movs	r3, #4
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e071      	b.n	80061b2 <UART_SetConfig+0x34e>
 80060ce:	2308      	movs	r3, #8
 80060d0:	77fb      	strb	r3, [r7, #31]
 80060d2:	e06e      	b.n	80061b2 <UART_SetConfig+0x34e>
 80060d4:	2310      	movs	r3, #16
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	bf00      	nop
 80060da:	e06a      	b.n	80061b2 <UART_SetConfig+0x34e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a25      	ldr	r2, [pc, #148]	; (8006178 <UART_SetConfig+0x314>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d124      	bne.n	8006130 <UART_SetConfig+0x2cc>
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <UART_SetConfig+0x2fc>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f4:	d012      	beq.n	800611c <UART_SetConfig+0x2b8>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	d802      	bhi.n	8006102 <UART_SetConfig+0x29e>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <UART_SetConfig+0x2ac>
 8006100:	e012      	b.n	8006128 <UART_SetConfig+0x2c4>
 8006102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006106:	d006      	beq.n	8006116 <UART_SetConfig+0x2b2>
 8006108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800610c:	d009      	beq.n	8006122 <UART_SetConfig+0x2be>
 800610e:	e00b      	b.n	8006128 <UART_SetConfig+0x2c4>
 8006110:	2300      	movs	r3, #0
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e04d      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006116:	2302      	movs	r3, #2
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e04a      	b.n	80061b2 <UART_SetConfig+0x34e>
 800611c:	2304      	movs	r3, #4
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e047      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006122:	2308      	movs	r3, #8
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e044      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006128:	2310      	movs	r3, #16
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	bf00      	nop
 800612e:	e040      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a11      	ldr	r2, [pc, #68]	; (800617c <UART_SetConfig+0x318>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d139      	bne.n	80061ae <UART_SetConfig+0x34a>
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <UART_SetConfig+0x2fc>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006148:	d027      	beq.n	800619a <UART_SetConfig+0x336>
 800614a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800614e:	d817      	bhi.n	8006180 <UART_SetConfig+0x31c>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01c      	beq.n	800618e <UART_SetConfig+0x32a>
 8006154:	e027      	b.n	80061a6 <UART_SetConfig+0x342>
 8006156:	bf00      	nop
 8006158:	efff69f3 	.word	0xefff69f3
 800615c:	40011000 	.word	0x40011000
 8006160:	40023800 	.word	0x40023800
 8006164:	40004400 	.word	0x40004400
 8006168:	40004800 	.word	0x40004800
 800616c:	40004c00 	.word	0x40004c00
 8006170:	40005000 	.word	0x40005000
 8006174:	40011400 	.word	0x40011400
 8006178:	40007800 	.word	0x40007800
 800617c:	40007c00 	.word	0x40007c00
 8006180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006184:	d006      	beq.n	8006194 <UART_SetConfig+0x330>
 8006186:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800618a:	d009      	beq.n	80061a0 <UART_SetConfig+0x33c>
 800618c:	e00b      	b.n	80061a6 <UART_SetConfig+0x342>
 800618e:	2300      	movs	r3, #0
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e00e      	b.n	80061b2 <UART_SetConfig+0x34e>
 8006194:	2302      	movs	r3, #2
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e00b      	b.n	80061b2 <UART_SetConfig+0x34e>
 800619a:	2304      	movs	r3, #4
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e008      	b.n	80061b2 <UART_SetConfig+0x34e>
 80061a0:	2308      	movs	r3, #8
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e005      	b.n	80061b2 <UART_SetConfig+0x34e>
 80061a6:	2310      	movs	r3, #16
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	bf00      	nop
 80061ac:	e001      	b.n	80061b2 <UART_SetConfig+0x34e>
 80061ae:	2310      	movs	r3, #16
 80061b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ba:	d17f      	bne.n	80062bc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80061bc:	7ffb      	ldrb	r3, [r7, #31]
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d85c      	bhi.n	800627c <UART_SetConfig+0x418>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x364>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	0800620d 	.word	0x0800620d
 80061d0:	0800622d 	.word	0x0800622d
 80061d4:	0800627d 	.word	0x0800627d
 80061d8:	08006245 	.word	0x08006245
 80061dc:	0800627d 	.word	0x0800627d
 80061e0:	0800627d 	.word	0x0800627d
 80061e4:	0800627d 	.word	0x0800627d
 80061e8:	08006265 	.word	0x08006265
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe fc64 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 80061f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	005a      	lsls	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	61bb      	str	r3, [r7, #24]
        break;
 800620a:	e03a      	b.n	8006282 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800620c:	f7fe fc68 	bl	8004ae0 <HAL_RCC_GetPCLK2Freq>
 8006210:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	005a      	lsls	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	441a      	add	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	fbb2 f3f3 	udiv	r3, r2, r3
 8006226:	b29b      	uxth	r3, r3
 8006228:	61bb      	str	r3, [r7, #24]
        break;
 800622a:	e02a      	b.n	8006282 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	085a      	lsrs	r2, r3, #1
 8006232:	4b5f      	ldr	r3, [pc, #380]	; (80063b0 <UART_SetConfig+0x54c>)
 8006234:	4413      	add	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6852      	ldr	r2, [r2, #4]
 800623a:	fbb3 f3f2 	udiv	r3, r3, r2
 800623e:	b29b      	uxth	r3, r3
 8006240:	61bb      	str	r3, [r7, #24]
        break;
 8006242:	e01e      	b.n	8006282 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006244:	f7fe fb54 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006248:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	005a      	lsls	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	fbb2 f3f3 	udiv	r3, r2, r3
 800625e:	b29b      	uxth	r3, r3
 8006260:	61bb      	str	r3, [r7, #24]
        break;
 8006262:	e00e      	b.n	8006282 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	085b      	lsrs	r3, r3, #1
 800626a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	b29b      	uxth	r3, r3
 8006278:	61bb      	str	r3, [r7, #24]
        break;
 800627a:	e002      	b.n	8006282 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
        break;
 8006280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b0f      	cmp	r3, #15
 8006286:	d916      	bls.n	80062b6 <UART_SetConfig+0x452>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628e:	d212      	bcs.n	80062b6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f023 030f 	bic.w	r3, r3, #15
 8006298:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	897b      	ldrh	r3, [r7, #10]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	897a      	ldrh	r2, [r7, #10]
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	e070      	b.n	8006398 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
 80062ba:	e06d      	b.n	8006398 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80062bc:	7ffb      	ldrb	r3, [r7, #31]
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d859      	bhi.n	8006376 <UART_SetConfig+0x512>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0x464>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	0800630b 	.word	0x0800630b
 80062d0:	08006329 	.word	0x08006329
 80062d4:	08006377 	.word	0x08006377
 80062d8:	08006341 	.word	0x08006341
 80062dc:	08006377 	.word	0x08006377
 80062e0:	08006377 	.word	0x08006377
 80062e4:	08006377 	.word	0x08006377
 80062e8:	0800635f 	.word	0x0800635f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ec:	f7fe fbe4 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 80062f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	085a      	lsrs	r2, r3, #1
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	441a      	add	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	b29b      	uxth	r3, r3
 8006306:	61bb      	str	r3, [r7, #24]
        break;
 8006308:	e038      	b.n	800637c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800630a:	f7fe fbe9 	bl	8004ae0 <HAL_RCC_GetPCLK2Freq>
 800630e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	085a      	lsrs	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	441a      	add	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006322:	b29b      	uxth	r3, r3
 8006324:	61bb      	str	r3, [r7, #24]
        break;
 8006326:	e029      	b.n	800637c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	085a      	lsrs	r2, r3, #1
 800632e:	4b21      	ldr	r3, [pc, #132]	; (80063b4 <UART_SetConfig+0x550>)
 8006330:	4413      	add	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6852      	ldr	r2, [r2, #4]
 8006336:	fbb3 f3f2 	udiv	r3, r3, r2
 800633a:	b29b      	uxth	r3, r3
 800633c:	61bb      	str	r3, [r7, #24]
        break;
 800633e:	e01d      	b.n	800637c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006340:	f7fe fad6 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006344:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	085a      	lsrs	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	441a      	add	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	b29b      	uxth	r3, r3
 800635a:	61bb      	str	r3, [r7, #24]
        break;
 800635c:	e00e      	b.n	800637c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	b29b      	uxth	r3, r3
 8006372:	61bb      	str	r3, [r7, #24]
        break;
 8006374:	e002      	b.n	800637c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
        break;
 800637a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d908      	bls.n	8006394 <UART_SetConfig+0x530>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006388:	d204      	bcs.n	8006394 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	e001      	b.n	8006398 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	01e84800 	.word	0x01e84800
 80063b4:	00f42400 	.word	0x00f42400

080063b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01a      	beq.n	80064ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064b6:	d10a      	bne.n	80064ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af02      	add	r7, sp, #8
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800650a:	f7fa fe6f 	bl	80011ec <HAL_GetTick>
 800650e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b08      	cmp	r3, #8
 800651c:	d10e      	bne.n	800653c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800651e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f82a 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e020      	b.n	800657e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b04      	cmp	r3, #4
 8006548:	d10e      	bne.n	8006568 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800654a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f814 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e00a      	b.n	800657e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	e05d      	b.n	8006654 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d059      	beq.n	8006654 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a0:	f7fa fe24 	bl	80011ec <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11b      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e042      	b.n	8006674 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d02b      	beq.n	8006654 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660a:	d123      	bne.n	8006654 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006624:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0201 	bic.w	r2, r2, #1
 8006634:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e00f      	b.n	8006674 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4013      	ands	r3, r2
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	429a      	cmp	r2, r3
 8006670:	d092      	beq.n	8006598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800667c:	b084      	sub	sp, #16
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	f107 001c 	add.w	r0, r7, #28
 800668a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2b01      	cmp	r3, #1
 8006692:	d120      	bne.n	80066d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	4b20      	ldr	r3, [pc, #128]	; (8006728 <USB_CoreInit+0xac>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d105      	bne.n	80066ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa52 	bl	8006b74 <USB_CoreReset>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	e010      	b.n	80066f8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa46 	bl	8006b74 <USB_CoreReset>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d10b      	bne.n	8006716 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f043 0206 	orr.w	r2, r3, #6
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006722:	b004      	add	sp, #16
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	ffbdffbf 	.word	0xffbdffbf

0800672c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f023 0201 	bic.w	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d106      	bne.n	800677a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60da      	str	r2, [r3, #12]
 8006778:	e00b      	b.n	8006792 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]
 800678c:	e001      	b.n	8006792 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e003      	b.n	800679a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006792:	2032      	movs	r0, #50	; 0x32
 8006794:	f7fa fd36 	bl	8001204 <HAL_Delay>

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a4:	b084      	sub	sp, #16
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	e009      	b.n	80067d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3340      	adds	r3, #64	; 0x40
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b0e      	cmp	r3, #14
 80067dc:	d9f2      	bls.n	80067c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11c      	bne.n	800681e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f2:	f043 0302 	orr.w	r3, r3, #2
 80067f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e005      	b.n	800682a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006830:	461a      	mov	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	4619      	mov	r1, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	461a      	mov	r2, r3
 8006846:	680b      	ldr	r3, [r1, #0]
 8006848:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b01      	cmp	r3, #1
 800684e:	d10c      	bne.n	800686a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f959 	bl	8006b10 <USB_SetDevSpeed>
 800685e:	e018      	b.n	8006892 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006860:	2101      	movs	r1, #1
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f954 	bl	8006b10 <USB_SetDevSpeed>
 8006868:	e013      	b.n	8006892 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	2b03      	cmp	r3, #3
 800686e:	d10c      	bne.n	800688a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f949 	bl	8006b10 <USB_SetDevSpeed>
 800687e:	e008      	b.n	8006892 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006880:	2101      	movs	r1, #1
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f944 	bl	8006b10 <USB_SetDevSpeed>
 8006888:	e003      	b.n	8006892 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800688a:	2103      	movs	r1, #3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f93f 	bl	8006b10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006892:	2110      	movs	r1, #16
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f8f3 	bl	8006a80 <USB_FlushTxFifo>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f911 	bl	8006acc <USB_FlushRxFifo>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	461a      	mov	r2, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	461a      	mov	r2, r3
 80068c8:	2300      	movs	r3, #0
 80068ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	461a      	mov	r2, r3
 80068d4:	2300      	movs	r3, #0
 80068d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	e043      	b.n	8006966 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f4:	d118      	bne.n	8006928 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	461a      	mov	r2, r3
 800690a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e013      	b.n	800693a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	461a      	mov	r2, r3
 8006920:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e008      	b.n	800693a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	461a      	mov	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	461a      	mov	r2, r3
 8006948:	2300      	movs	r3, #0
 800694a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	461a      	mov	r2, r3
 800695a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800695e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	3301      	adds	r3, #1
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	429a      	cmp	r2, r3
 800696c:	d3b7      	bcc.n	80068de <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800696e:	2300      	movs	r3, #0
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	e043      	b.n	80069fc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800698a:	d118      	bne.n	80069be <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	461a      	mov	r2, r3
 80069a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e013      	b.n	80069d0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	461a      	mov	r2, r3
 80069b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	e008      	b.n	80069d0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	461a      	mov	r2, r3
 80069cc:	2300      	movs	r3, #0
 80069ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	461a      	mov	r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	461a      	mov	r2, r3
 80069f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3301      	adds	r3, #1
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d3b7      	bcc.n	8006974 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d105      	bne.n	8006a38 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f043 0210 	orr.w	r2, r3, #16
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699a      	ldr	r2, [r3, #24]
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <USB_DevInit+0x2d4>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f043 0208 	orr.w	r2, r3, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <USB_DevInit+0x2d8>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a74:	b004      	add	sp, #16
 8006a76:	4770      	bx	lr
 8006a78:	803c3800 	.word	0x803c3800
 8006a7c:	40000004 	.word	0x40000004

08006a80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <USB_FlushTxFifo+0x48>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e006      	b.n	8006aba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d0f0      	beq.n	8006a9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	00030d40 	.word	0x00030d40

08006acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2210      	movs	r2, #16
 8006adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <USB_FlushRxFifo+0x40>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e006      	b.n	8006afe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	d0f0      	beq.n	8006ade <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	00030d40 	.word	0x00030d40

08006b10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b5c:	f043 0302 	orr.w	r3, r3, #2
 8006b60:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006b62:	2003      	movs	r0, #3
 8006b64:	f7fa fb4e 	bl	8001204 <HAL_Delay>

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a13      	ldr	r2, [pc, #76]	; (8006bd8 <USB_CoreReset+0x64>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e01b      	b.n	8006bca <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	daf2      	bge.n	8006b80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f043 0201 	orr.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3301      	adds	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4a09      	ldr	r2, [pc, #36]	; (8006bd8 <USB_CoreReset+0x64>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d901      	bls.n	8006bbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e006      	b.n	8006bca <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d0f0      	beq.n	8006baa <USB_CoreReset+0x36>

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	00030d40 	.word	0x00030d40

08006bdc <__libc_init_array>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4e0d      	ldr	r6, [pc, #52]	; (8006c14 <__libc_init_array+0x38>)
 8006be0:	4c0d      	ldr	r4, [pc, #52]	; (8006c18 <__libc_init_array+0x3c>)
 8006be2:	1ba4      	subs	r4, r4, r6
 8006be4:	10a4      	asrs	r4, r4, #2
 8006be6:	2500      	movs	r5, #0
 8006be8:	42a5      	cmp	r5, r4
 8006bea:	d109      	bne.n	8006c00 <__libc_init_array+0x24>
 8006bec:	4e0b      	ldr	r6, [pc, #44]	; (8006c1c <__libc_init_array+0x40>)
 8006bee:	4c0c      	ldr	r4, [pc, #48]	; (8006c20 <__libc_init_array+0x44>)
 8006bf0:	f000 f820 	bl	8006c34 <_init>
 8006bf4:	1ba4      	subs	r4, r4, r6
 8006bf6:	10a4      	asrs	r4, r4, #2
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	42a5      	cmp	r5, r4
 8006bfc:	d105      	bne.n	8006c0a <__libc_init_array+0x2e>
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c04:	4798      	blx	r3
 8006c06:	3501      	adds	r5, #1
 8006c08:	e7ee      	b.n	8006be8 <__libc_init_array+0xc>
 8006c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c0e:	4798      	blx	r3
 8006c10:	3501      	adds	r5, #1
 8006c12:	e7f2      	b.n	8006bfa <__libc_init_array+0x1e>
 8006c14:	08006c74 	.word	0x08006c74
 8006c18:	08006c74 	.word	0x08006c74
 8006c1c:	08006c74 	.word	0x08006c74
 8006c20:	08006c78 	.word	0x08006c78

08006c24 <memset>:
 8006c24:	4402      	add	r2, r0
 8006c26:	4603      	mov	r3, r0
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d100      	bne.n	8006c2e <memset+0xa>
 8006c2c:	4770      	bx	lr
 8006c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c32:	e7f9      	b.n	8006c28 <memset+0x4>

08006c34 <_init>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr

08006c40 <_fini>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr
